
Proba4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800460c  0800460c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004614  08004614  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800461c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  2000005c  08004678  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  08004678  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c343  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e95  00000000  00000000  0002c412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000798  00000000  00000000  0002ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bcb  00000000  00000000  0002f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c7e7  00000000  00000000  00054ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e76cf  00000000  00000000  000617e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c90  00000000  00000000  00148eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014bb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800456c 	.word	0x0800456c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800456c 	.word	0x0800456c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <USART_fsend>:
	return 0;
}

//Dopisywanie do bufora nadawczego
void USART_fsend(char* format,...)
{
 800057c:	b40f      	push	{r0, r1, r2, r3}
 800057e:	b580      	push	{r7, lr}
 8000580:	b0a4      	sub	sp, #144	; 0x90
 8000582:	af00      	add	r7, sp, #0
	char tmp_rx[128];
	int i;
	__IO int idx;

	va_list arglist;
	va_start(arglist, format);
 8000584:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000588:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_rx, format, arglist);
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fb5b 	bl	8003c50 <vsiprintf>
	va_end(arglist);

	idx=USART_TX_Empty;
 800059a:	4b34      	ldr	r3, [pc, #208]	; (800066c <USART_fsend+0xf0>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	60bb      	str	r3, [r7, #8]

	for (i = 0 ; i < strlen(tmp_rx);i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80005a8:	e016      	b.n	80005d8 <USART_fsend+0x5c>
	{
		USART_TxBuf[idx]=tmp_rx[i];
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	f107 010c 	add.w	r1, r7, #12
 80005b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80005b4:	440a      	add	r2, r1
 80005b6:	7811      	ldrb	r1, [r2, #0]
 80005b8:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <USART_fsend+0xf4>)
 80005ba:	54d1      	strb	r1, [r2, r3]
		idx++;
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	3301      	adds	r3, #1
 80005c0:	60bb      	str	r3, [r7, #8]
		if (idx>=USART_TXBUF_LEN) idx =0;
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 80005c8:	db01      	blt.n	80005ce <USART_fsend+0x52>
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
	for (i = 0 ; i < strlen(tmp_rx);i++)
 80005ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005d2:	3301      	adds	r3, #1
 80005d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fdf7 	bl	80001d0 <strlen>
 80005e2:	4602      	mov	r2, r0
 80005e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8de      	bhi.n	80005aa <USART_fsend+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
	}

	__disable_irq(); //Blokuje przerwania w sposób softwerowy
	if ((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET))
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <USART_fsend+0xf0>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <USART_fsend+0xf8>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d128      	bne.n	8000652 <USART_fsend+0xd6>
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <USART_fsend+0xfc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	2b80      	cmp	r3, #128	; 0x80
 800060c:	d121      	bne.n	8000652 <USART_fsend+0xd6>
	{
		USART_TX_Empty=idx;
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <USART_fsend+0xf0>)
 8000614:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = USART_TxBuf[USART_TX_Busy];
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <USART_fsend+0xf8>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	b29b      	uxth	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <USART_fsend+0xf4>)
 8000620:	5c9b      	ldrb	r3, [r3, r2]
 8000622:	70fb      	strb	r3, [r7, #3]
		USART_TX_Busy++;
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <USART_fsend+0xf8>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	b29b      	uxth	r3, r3
 800062a:	3301      	adds	r3, #1
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <USART_fsend+0xf8>)
 8000630:	801a      	strh	r2, [r3, #0]
		if (USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <USART_fsend+0xf8>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 800063c:	d302      	bcc.n	8000644 <USART_fsend+0xc8>
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <USART_fsend+0xf8>)
 8000640:	2200      	movs	r2, #0
 8000642:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000644:	1cfb      	adds	r3, r7, #3
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <USART_fsend+0xfc>)
 800064c:	f002 f9b8 	bl	80029c0 <HAL_UART_Transmit_IT>
	{
 8000650:	e003      	b.n	800065a <USART_fsend+0xde>
	}
	else
		USART_TX_Empty = idx;
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <USART_fsend+0xf0>)
 8000658:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800065a:	b662      	cpsie	i
}
 800065c:	bf00      	nop

	__enable_irq();
}
 800065e:	bf00      	nop
 8000660:	3790      	adds	r7, #144	; 0x90
 8000662:	46bd      	mov	sp, r7
 8000664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000668:	b004      	add	sp, #16
 800066a:	4770      	bx	lr
 800066c:	200006e8 	.word	0x200006e8
 8000670:	20000100 	.word	0x20000100
 8000674:	200006ea 	.word	0x200006ea
 8000678:	20000078 	.word	0x20000078

0800067c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <HAL_UART_TxCpltCallback+0x64>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d125      	bne.n	80006d8 <HAL_UART_TxCpltCallback+0x5c>
	{
		if (USART_TX_Empty != USART_TX_Busy)
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_UART_TxCpltCallback+0x68>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_UART_TxCpltCallback+0x6c>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	b29b      	uxth	r3, r3
 8000698:	429a      	cmp	r2, r3
 800069a:	d01d      	beq.n	80006d8 <HAL_UART_TxCpltCallback+0x5c>
		{
			uint8_t temp = USART_TxBuf[USART_TX_Busy];
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_UART_TxCpltCallback+0x6c>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_UART_TxCpltCallback+0x70>)
 80006a6:	5c9b      	ldrb	r3, [r3, r2]
 80006a8:	73fb      	strb	r3, [r7, #15]
			USART_TX_Busy++;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_UART_TxCpltCallback+0x6c>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	3301      	adds	r3, #1
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_UART_TxCpltCallback+0x6c>)
 80006b6:	801a      	strh	r2, [r3, #0]
			if (USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy =0;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <HAL_UART_TxCpltCallback+0x6c>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 80006c2:	d302      	bcc.n	80006ca <HAL_UART_TxCpltCallback+0x4e>
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_UART_TxCpltCallback+0x6c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &temp, 1);
 80006ca:	f107 030f 	add.w	r3, r7, #15
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <HAL_UART_TxCpltCallback+0x64>)
 80006d4:	f002 f974 	bl	80029c0 <HAL_UART_Transmit_IT>
		}
	}
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000078 	.word	0x20000078
 80006e4:	200006e8 	.word	0x200006e8
 80006e8:	200006ea 	.word	0x200006ea
 80006ec:	20000100 	.word	0x20000100

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 fa28 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f80a 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 f88a 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000700:	f000 f858 	bl	80007b4 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {USART_fsend("STM start\r\n");
 8000704:	4801      	ldr	r0, [pc, #4]	; (800070c <main+0x1c>)
 8000706:	f7ff ff39 	bl	800057c <USART_fsend>
 800070a:	e7fb      	b.n	8000704 <main+0x14>
 800070c:	08004584 	.word	0x08004584

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	; 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	; 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 faa0 	bl	8003c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000732:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000736:	f000 fde3 	bl	8001300 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000740:	f000 f8ce 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2310      	movs	r3, #16
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	2302      	movs	r3, #2
 8000758:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800075e:	230a      	movs	r3, #10
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000762:	2307      	movs	r3, #7
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fe1a 	bl	80013ac <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800077e:	f000 f8af 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2303      	movs	r3, #3
 8000788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2104      	movs	r1, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f9e2 	bl	8001b64 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007a6:	f000 f89b 	bl	80008e0 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3758      	adds	r7, #88	; 0x58
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_USART2_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007f8:	f002 f894 	bl	8002924 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f86d 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000078 	.word	0x20000078
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a2a      	ldr	r2, [pc, #168]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a24      	ldr	r2, [pc, #144]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_GPIO_Init+0xc4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f000 fd0f 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <MX_GPIO_Init+0xc8>)
 80008ae:	f000 fb57 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b2:	2320      	movs	r3, #32
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f000 fb48 	bl	8000f60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000800 	.word	0x48000800

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6613      	str	r3, [r2, #96]	; 0x60
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0ac      	sub	sp, #176	; 0xb0
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2288      	movs	r2, #136	; 0x88
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f003 f985 	bl	8003c64 <memset>
  if(huart->Instance==USART2)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a25      	ldr	r2, [pc, #148]	; (80009f4 <HAL_UART_MspInit+0xc0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d143      	bne.n	80009ec <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000964:	2302      	movs	r3, #2
 8000966:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000968:	2300      	movs	r3, #0
 800096a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fb1b 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800097c:	f7ff ffb0 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <HAL_UART_MspInit+0xc4>)
 8000982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000984:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <HAL_UART_MspInit+0xc4>)
 8000986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098a:	6593      	str	r3, [r2, #88]	; 0x58
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <HAL_UART_MspInit+0xc4>)
 800098e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0xc4>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	4a16      	ldr	r2, [pc, #88]	; (80009f8 <HAL_UART_MspInit+0xc4>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_UART_MspInit+0xc4>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009b0:	230c      	movs	r3, #12
 80009b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c8:	2307      	movs	r3, #7
 80009ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f000 fac2 	bl	8000f60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2026      	movs	r0, #38	; 0x26
 80009e2:	f000 fa08 	bl	8000df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009e6:	2026      	movs	r0, #38	; 0x26
 80009e8:	f000 fa21 	bl	8000e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	37b0      	adds	r7, #176	; 0xb0
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004400 	.word	0x40004400
 80009f8:	40021000 	.word	0x40021000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f8da 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <USART2_IRQHandler+0x10>)
 8000a56:	f002 f811 	bl	8002a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000078 	.word	0x20000078

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f003 f8ee 	bl	8003c74 <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20018000 	.word	0x20018000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	200006ec 	.word	0x200006ec
 8000acc:	20000840 	.word	0x20000840

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af8:	f7ff ffea 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	; (8000b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <LoopForever+0xe>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	; (8000b40 <LoopForever+0x16>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b22:	f003 f8ad 	bl	8003c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b26:	f7ff fde3 	bl	80006f0 <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b38:	0800461c 	.word	0x0800461c
  ldr r2, =_sbss
 8000b3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b40:	2000083c 	.word	0x2000083c

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_Init+0x3c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_Init+0x3c>)
 8000b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f93e 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f80f 	bl	8000b88 <HAL_InitTick>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	71fb      	strb	r3, [r7, #7]
 8000b74:	e001      	b.n	8000b7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b76:	f7ff feb9 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_InitTick+0x6c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d023      	beq.n	8000be4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_InitTick+0x70>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_InitTick+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f949 	bl	8000e4a <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10f      	bne.n	8000bde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d809      	bhi.n	8000bd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f913 	bl	8000df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_InitTick+0x74>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e007      	b.n	8000be8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e004      	b.n	8000be8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	e001      	b.n	8000be8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	200006f0 	.word	0x200006f0

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200006f0 	.word	0x200006f0

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f7ff ff8e 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff29 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff3e 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff8e 	bl	8000d34 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5d 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff31 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffa2 	bl	8000d9c <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d008      	beq.n	8000e8c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e022      	b.n	8000ed2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 020e 	bic.w	r2, r2, #14
 8000e9a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0201 	bic.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb0:	f003 021c 	and.w	r2, r3, #28
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d005      	beq.n	8000f02 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2204      	movs	r2, #4
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e029      	b.n	8000f56 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 020e 	bic.w	r2, r2, #14
 8000f10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f003 021c 	and.w	r2, r3, #28
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	2101      	movs	r1, #1
 8000f30:	fa01 f202 	lsl.w	r2, r1, r2
 8000f34:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	4798      	blx	r3
    }
  }
  return status;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6e:	e17f      	b.n	8001270 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8171 	beq.w	800126a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d005      	beq.n	8000fa0 <HAL_GPIO_Init+0x40>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d130      	bne.n	8001002 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 0201 	and.w	r2, r3, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b03      	cmp	r3, #3
 800100c:	d118      	bne.n	8001040 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d017      	beq.n	800107c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	6939      	ldr	r1, [r7, #16]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80ac 	beq.w	800126a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <HAL_GPIO_Init+0x330>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	4a5e      	ldr	r2, [pc, #376]	; (8001290 <HAL_GPIO_Init+0x330>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6613      	str	r3, [r2, #96]	; 0x60
 800111e:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <HAL_GPIO_Init+0x330>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800112a:	4a5a      	ldr	r2, [pc, #360]	; (8001294 <HAL_GPIO_Init+0x334>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001154:	d025      	beq.n	80011a2 <HAL_GPIO_Init+0x242>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4f      	ldr	r2, [pc, #316]	; (8001298 <HAL_GPIO_Init+0x338>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01f      	beq.n	800119e <HAL_GPIO_Init+0x23e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4e      	ldr	r2, [pc, #312]	; (800129c <HAL_GPIO_Init+0x33c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x23a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <HAL_GPIO_Init+0x340>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x236>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4c      	ldr	r2, [pc, #304]	; (80012a4 <HAL_GPIO_Init+0x344>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x232>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_GPIO_Init+0x348>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x22e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4a      	ldr	r2, [pc, #296]	; (80012ac <HAL_GPIO_Init+0x34c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x22a>
 8001186:	2306      	movs	r3, #6
 8001188:	e00c      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800118a:	2307      	movs	r3, #7
 800118c:	e00a      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800118e:	2305      	movs	r3, #5
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 8001192:	2304      	movs	r3, #4
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x244>
 80011a2:	2300      	movs	r3, #0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	f002 0203 	and.w	r2, r2, #3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b4:	4937      	ldr	r1, [pc, #220]	; (8001294 <HAL_GPIO_Init+0x334>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_GPIO_Init+0x350>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011e6:	4a32      	ldr	r2, [pc, #200]	; (80012b0 <HAL_GPIO_Init+0x350>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ec:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <HAL_GPIO_Init+0x350>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001210:	4a27      	ldr	r2, [pc, #156]	; (80012b0 <HAL_GPIO_Init+0x350>)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_GPIO_Init+0x350>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800123a:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <HAL_GPIO_Init+0x350>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_GPIO_Init+0x350>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <HAL_GPIO_Init+0x350>)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa22 f303 	lsr.w	r3, r2, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	f47f ae78 	bne.w	8000f70 <HAL_GPIO_Init+0x10>
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000800 	.word	0x48000800
 80012a0:	48000c00 	.word	0x48000c00
 80012a4:	48001000 	.word	0x48001000
 80012a8:	48001400 	.word	0x48001400
 80012ac:	48001800 	.word	0x48001800
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_PWREx_GetVoltageRange+0x18>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800130e:	d130      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800131c:	d038      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001328:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2232      	movs	r2, #50	; 0x32
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001344:	e002      	b.n	800134c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001358:	d102      	bne.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x60>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f2      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136c:	d110      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e00f      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800137a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137e:	d007      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001388:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40007000 	.word	0x40007000
 80013a4:	20000000 	.word	0x20000000
 80013a8:	431bde83 	.word	0x431bde83

080013ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e3ca      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013be:	4b97      	ldr	r3, [pc, #604]	; (800161c <HAL_RCC_OscConfig+0x270>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c8:	4b94      	ldr	r3, [pc, #592]	; (800161c <HAL_RCC_OscConfig+0x270>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80e4 	beq.w	80015a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <HAL_RCC_OscConfig+0x4a>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	f040 808b 	bne.w	8001504 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f040 8087 	bne.w	8001504 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f6:	4b89      	ldr	r3, [pc, #548]	; (800161c <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x62>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e3a2      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	4b82      	ldr	r3, [pc, #520]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <HAL_RCC_OscConfig+0x7c>
 800141e:	4b7f      	ldr	r3, [pc, #508]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001426:	e005      	b.n	8001434 <HAL_RCC_OscConfig+0x88>
 8001428:	4b7c      	ldr	r3, [pc, #496]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800142a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001434:	4293      	cmp	r3, r2
 8001436:	d223      	bcs.n	8001480 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fd55 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e383      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144c:	4b73      	ldr	r3, [pc, #460]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a72      	ldr	r2, [pc, #456]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b70      	ldr	r3, [pc, #448]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	496d      	ldr	r1, [pc, #436]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b6c      	ldr	r3, [pc, #432]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	4968      	ldr	r1, [pc, #416]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
 800147e:	e025      	b.n	80014cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001480:	4b66      	ldr	r3, [pc, #408]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a65      	ldr	r2, [pc, #404]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b63      	ldr	r3, [pc, #396]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4960      	ldr	r1, [pc, #384]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149e:	4b5f      	ldr	r3, [pc, #380]	; (800161c <HAL_RCC_OscConfig+0x270>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	495b      	ldr	r1, [pc, #364]	; (800161c <HAL_RCC_OscConfig+0x270>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fd15 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e343      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014cc:	f000 fc4a 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b52      	ldr	r3, [pc, #328]	; (800161c <HAL_RCC_OscConfig+0x270>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	4950      	ldr	r1, [pc, #320]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	4a4e      	ldr	r2, [pc, #312]	; (8001624 <HAL_RCC_OscConfig+0x278>)
 80014ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ec:	4b4e      	ldr	r3, [pc, #312]	; (8001628 <HAL_RCC_OscConfig+0x27c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fb49 	bl	8000b88 <HAL_InitTick>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d052      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	e327      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d032      	beq.n	8001572 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a42      	ldr	r2, [pc, #264]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001518:	f7ff fb86 	bl	8000c28 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fb82 	bl	8000c28 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e310      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001532:	4b3a      	ldr	r3, [pc, #232]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a36      	ldr	r2, [pc, #216]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b34      	ldr	r3, [pc, #208]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4931      	ldr	r1, [pc, #196]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155c:	4b2f      	ldr	r3, [pc, #188]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	492c      	ldr	r1, [pc, #176]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e01a      	b.n	80015a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a29      	ldr	r2, [pc, #164]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800157e:	f7ff fb53 	bl	8000c28 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001586:	f7ff fb4f 	bl	8000c28 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e2dd      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x1da>
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d074      	beq.n	800169e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x21a>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d10e      	bne.n	80015de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d10b      	bne.n	80015de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d064      	beq.n	800169c <HAL_RCC_OscConfig+0x2f0>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d160      	bne.n	800169c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e2ba      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x24a>
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_RCC_OscConfig+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_RCC_OscConfig+0x270>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e026      	b.n	8001644 <HAL_RCC_OscConfig+0x298>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015fe:	d115      	bne.n	800162c <HAL_RCC_OscConfig+0x280>
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001606:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a02      	ldr	r2, [pc, #8]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x298>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	08004590 	.word	0x08004590
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004
 800162c:	4ba0      	ldr	r3, [pc, #640]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a9f      	ldr	r2, [pc, #636]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b9d      	ldr	r3, [pc, #628]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a9c      	ldr	r2, [pc, #624]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff faec 	bl	8000c28 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fae8 	bl	8000c28 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e276      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	4b92      	ldr	r3, [pc, #584]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x2a8>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fad8 	bl	8000c28 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fad4 	bl	8000c28 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e262      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168e:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x2d0>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d060      	beq.n	800176c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x310>
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d119      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d116      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	4b7c      	ldr	r3, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x328>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e23f      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4973      	ldr	r1, [pc, #460]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e8:	e040      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d023      	beq.n	800173a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f2:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6e      	ldr	r2, [pc, #440]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fa93 	bl	8000c28 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fa8f 	bl	8000c28 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e21d      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001718:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b62      	ldr	r3, [pc, #392]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	495f      	ldr	r1, [pc, #380]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e018      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173a:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a5c      	ldr	r2, [pc, #368]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fa6f 	bl	8000c28 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fa6b 	bl	8000c28 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1f9      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01c      	beq.n	80017ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001780:	4b4b      	ldr	r3, [pc, #300]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001786:	4a4a      	ldr	r2, [pc, #296]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fa4a 	bl	8000c28 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fa46 	bl	8000c28 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1d4      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017aa:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ef      	beq.n	8001798 <HAL_RCC_OscConfig+0x3ec>
 80017b8:	e01b      	b.n	80017f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c0:	4a3b      	ldr	r2, [pc, #236]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa2d 	bl	8000c28 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fa29 	bl	8000c28 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1b7      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e4:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80a6 	beq.w	800194c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	4a26      	ldr	r2, [pc, #152]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181a:	6593      	str	r3, [r2, #88]	; 0x58
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001828:	2301      	movs	r3, #1
 800182a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_RCC_OscConfig+0x508>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d118      	bne.n	800186a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_RCC_OscConfig+0x508>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1d      	ldr	r2, [pc, #116]	; (80018b4 <HAL_RCC_OscConfig+0x508>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001844:	f7ff f9f0 	bl	8000c28 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7ff f9ec 	bl	8000c28 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e17a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_RCC_OscConfig+0x508>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <HAL_RCC_OscConfig+0x4d8>
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001882:	e029      	b.n	80018d8 <HAL_RCC_OscConfig+0x52c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d115      	bne.n	80018b8 <HAL_RCC_OscConfig+0x50c>
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001892:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <HAL_RCC_OscConfig+0x504>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x52c>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40007000 	.word	0x40007000
 80018b8:	4b9c      	ldr	r3, [pc, #624]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018be:	4a9b      	ldr	r2, [pc, #620]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c8:	4b98      	ldr	r3, [pc, #608]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ce:	4a97      	ldr	r2, [pc, #604]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d016      	beq.n	800190e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff f9a2 	bl	8000c28 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff f99e 	bl	8000c28 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e12a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fe:	4b8b      	ldr	r3, [pc, #556]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0ed      	beq.n	80018e8 <HAL_RCC_OscConfig+0x53c>
 800190c:	e015      	b.n	800193a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff f98b 	bl	8000c28 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff f987 	bl	8000c28 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e113      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192c:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ed      	bne.n	8001916 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193a:	7ffb      	ldrb	r3, [r7, #31]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	4a79      	ldr	r2, [pc, #484]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80fe 	beq.w	8001b52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	2b02      	cmp	r3, #2
 800195c:	f040 80d0 	bne.w	8001b00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001960:	4b72      	ldr	r3, [pc, #456]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	429a      	cmp	r2, r3
 8001972:	d130      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	3b01      	subs	r3, #1
 8001980:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d127      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d11f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a0:	2a07      	cmp	r2, #7
 80019a2:	bf14      	ite	ne
 80019a4:	2201      	movne	r2, #1
 80019a6:	2200      	moveq	r2, #0
 80019a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d113      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	3b01      	subs	r3, #1
 80019bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d06e      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d069      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019e8:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0ad      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019f8:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4b      	ldr	r2, [pc, #300]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 80019fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a04:	f7ff f910 	bl	8000c28 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f90c 	bl	8000c28 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e09a      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1e:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4b40      	ldr	r3, [pc, #256]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <HAL_RCC_OscConfig+0x784>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a44:	0212      	lsls	r2, r2, #8
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a4c:	0852      	lsrs	r2, r2, #1
 8001a4e:	3a01      	subs	r2, #1
 8001a50:	0552      	lsls	r2, r2, #21
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a58:	0852      	lsrs	r2, r2, #1
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	0652      	lsls	r2, r2, #25
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a64:	0912      	lsrs	r2, r2, #4
 8001a66:	0452      	lsls	r2, r2, #17
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	4930      	ldr	r1, [pc, #192]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a70:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2d      	ldr	r2, [pc, #180]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a88:	f7ff f8ce 	bl	8000c28 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f8ca 	bl	8000c28 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aae:	e050      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e04f      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d148      	bne.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad8:	f7ff f8a6 	bl	8000c28 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f8a2 	bl	8000c28 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e030      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x734>
 8001afe:	e028      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d023      	beq.n	8001b4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_RCC_OscConfig+0x780>)
 8001b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f889 	bl	8000c28 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	e00c      	b.n	8001b34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff f885 	bl	8000c28 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d905      	bls.n	8001b34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e013      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ec      	bne.n	8001b1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4905      	ldr	r1, [pc, #20]	; (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_RCC_OscConfig+0x7b4>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e001      	b.n	8001b52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	feeefffc 	.word	0xfeeefffc

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0e7      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b75      	ldr	r3, [pc, #468]	; (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d910      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b72      	ldr	r3, [pc, #456]	; (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4970      	ldr	r1, [pc, #448]	; (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cf      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d908      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4960      	ldr	r1, [pc, #384]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d04c      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	4b5a      	ldr	r3, [pc, #360]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d121      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0a6      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	4b54      	ldr	r3, [pc, #336]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d115      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e09a      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1a:	4b4e      	ldr	r3, [pc, #312]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e08e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e086      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4943      	ldr	r1, [pc, #268]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4c:	f7fe ffec 	bl	8000c28 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7fe ffe8 	bl	8000c28 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e06e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d010      	beq.n	8001caa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d208      	bcs.n	8001caa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	492b      	ldr	r1, [pc, #172]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d210      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 0207 	bic.w	r2, r3, #7
 8001cc0:	4923      	ldr	r1, [pc, #140]	; (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e036      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4918      	ldr	r1, [pc, #96]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4910      	ldr	r1, [pc, #64]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d18:	f000 f824 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	490b      	ldr	r1, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x1f4>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1f8>)
 8001d36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1fc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ff23 	bl	8000b88 <HAL_InitTick>
 8001d42:	4603      	mov	r3, r0
 8001d44:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d46:	7afb      	ldrb	r3, [r7, #11]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08004590 	.word	0x08004590
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d72:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d121      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d11e      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d98:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001da4:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e005      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	e004      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d134      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d003      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0xac>
 8001e08:	e005      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e0c:	617b      	str	r3, [r7, #20]
      break;
 8001e0e:	e005      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e12:	617b      	str	r3, [r7, #20]
      break;
 8001e14:	e002      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	617b      	str	r3, [r7, #20]
      break;
 8001e1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	3301      	adds	r3, #1
 8001e28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	fb03 f202 	mul.w	r2, r3, r2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	0e5b      	lsrs	r3, r3, #25
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	080045a8 	.word	0x080045a8
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4904      	ldr	r1, [pc, #16]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	080045a0 	.word	0x080045a0

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ec4:	f7ff ffda 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4904      	ldr	r1, [pc, #16]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	080045a0 	.word	0x080045a0

08001eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f04:	f7ff f9ee 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001f08:	6178      	str	r0, [r7, #20]
 8001f0a:	e014      	b.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6593      	str	r3, [r2, #88]	; 0x58
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f24:	f7ff f9de 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001f28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f3c:	d10b      	bne.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d919      	bls.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2ba0      	cmp	r3, #160	; 0xa0
 8001f48:	d902      	bls.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e013      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f50:	2301      	movs	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e010      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b80      	cmp	r3, #128	; 0x80
 8001f5a:	d902      	bls.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e00a      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b80      	cmp	r3, #128	; 0x80
 8001f66:	d102      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e004      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b70      	cmp	r3, #112	; 0x70
 8001f72:	d101      	bne.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f74:	2301      	movs	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 0207 	bic.w	r2, r3, #7
 8001f80:	4909      	ldr	r1, [pc, #36]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d041      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fd0:	d02a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fd6:	d824      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fe2:	d81e      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fec:	d010      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fee:	e018      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff0:	4b86      	ldr	r3, [pc, #536]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a85      	ldr	r2, [pc, #532]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ffc:	e015      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fabb 	bl	8002580 <RCCEx_PLLSAI1_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800200e:	e00c      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3320      	adds	r3, #32
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fba6 	bl	8002768 <RCCEx_PLLSAI2_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	74fb      	strb	r3, [r7, #19]
      break;
 8002026:	e000      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002030:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800203e:	4973      	ldr	r1, [pc, #460]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002046:	e001      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d041      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800205c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002060:	d02a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002062:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002066:	d824      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800206c:	d008      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800206e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002072:	d81e      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207c:	d010      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800207e:	e018      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002080:	4b62      	ldr	r3, [pc, #392]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a61      	ldr	r2, [pc, #388]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800208c:	e015      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3304      	adds	r3, #4
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fa73 	bl	8002580 <RCCEx_PLLSAI1_Config>
 800209a:	4603      	mov	r3, r0
 800209c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800209e:	e00c      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3320      	adds	r3, #32
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fb5e 	bl	8002768 <RCCEx_PLLSAI2_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b0:	e003      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	74fb      	strb	r3, [r7, #19]
      break;
 80020b6:	e000      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10b      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020c0:	4b52      	ldr	r3, [pc, #328]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ce:	494f      	ldr	r1, [pc, #316]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020d6:	e001      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a0 	beq.w	800222a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ee:	4b47      	ldr	r3, [pc, #284]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b41      	ldr	r3, [pc, #260]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	4a40      	ldr	r2, [pc, #256]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	; 0x58
 8002110:	4b3e      	ldr	r3, [pc, #248]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211c:	2301      	movs	r3, #1
 800211e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002120:	4b3b      	ldr	r3, [pc, #236]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3a      	ldr	r2, [pc, #232]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212c:	f7fe fd7c 	bl	8000c28 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002132:	e009      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002134:	f7fe fd78 	bl	8000c28 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d902      	bls.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	74fb      	strb	r3, [r7, #19]
        break;
 8002146:	e005      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002148:	4b31      	ldr	r3, [pc, #196]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ef      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d15c      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800215a:	4b2c      	ldr	r3, [pc, #176]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002164:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01f      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	d019      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002178:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002182:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	4a20      	ldr	r2, [pc, #128]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	4a1c      	ldr	r2, [pc, #112]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a4:	4a19      	ldr	r2, [pc, #100]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7fe fd37 	bl	8000c28 <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021bc:	e00b      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe fd33 	bl	8000c28 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	74fb      	strb	r3, [r7, #19]
            break;
 80021d4:	e006      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ec      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021fa:	4904      	ldr	r1, [pc, #16]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002202:	e009      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
 8002208:	e006      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002218:	7c7b      	ldrb	r3, [r7, #17]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4b9e      	ldr	r3, [pc, #632]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	4a9d      	ldr	r2, [pc, #628]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002228:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002236:	4b98      	ldr	r3, [pc, #608]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f023 0203 	bic.w	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002244:	4994      	ldr	r1, [pc, #592]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002258:	4b8f      	ldr	r3, [pc, #572]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f023 020c 	bic.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	498c      	ldr	r1, [pc, #560]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800227a:	4b87      	ldr	r3, [pc, #540]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	4983      	ldr	r1, [pc, #524]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800229c:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	497b      	ldr	r1, [pc, #492]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022be:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022cc:	4972      	ldr	r1, [pc, #456]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e0:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	496a      	ldr	r1, [pc, #424]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002302:	4b65      	ldr	r3, [pc, #404]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	4961      	ldr	r1, [pc, #388]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002324:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002332:	4959      	ldr	r1, [pc, #356]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002346:	4b54      	ldr	r3, [pc, #336]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002354:	4950      	ldr	r1, [pc, #320]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	4948      	ldr	r1, [pc, #288]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800238a:	4b43      	ldr	r3, [pc, #268]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	493f      	ldr	r1, [pc, #252]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d028      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ac:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ba:	4937      	ldr	r1, [pc, #220]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ca:	d106      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a31      	ldr	r2, [pc, #196]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d6:	60d3      	str	r3, [r2, #12]
 80023d8:	e011      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023e2:	d10c      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3304      	adds	r3, #4
 80023e8:	2101      	movs	r1, #1
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f8c8 	bl	8002580 <RCCEx_PLLSAI1_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d028      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	491f      	ldr	r1, [pc, #124]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002428:	d106      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002434:	60d3      	str	r3, [r2, #12]
 8002436:	e011      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002440:	d10c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f899 	bl	8002580 <RCCEx_PLLSAI1_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02b      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002476:	4908      	ldr	r1, [pc, #32]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002486:	d109      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a02      	ldr	r2, [pc, #8]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002492:	60d3      	str	r3, [r2, #12]
 8002494:	e014      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f867 	bl	8002580 <RCCEx_PLLSAI1_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d02f      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024da:	4928      	ldr	r1, [pc, #160]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ea:	d10d      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f844 	bl	8002580 <RCCEx_PLLSAI1_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d014      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	74bb      	strb	r3, [r7, #18]
 8002506:	e011      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800250c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002510:	d10c      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3320      	adds	r3, #32
 8002516:	2102      	movs	r1, #2
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f925 	bl	8002768 <RCCEx_PLLSAI2_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002546:	490d      	ldr	r1, [pc, #52]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800256a:	4904      	ldr	r1, [pc, #16]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002572:	7cbb      	ldrb	r3, [r7, #18]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000

08002580 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800258e:	4b75      	ldr	r3, [pc, #468]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d018      	beq.n	80025cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800259a:	4b72      	ldr	r3, [pc, #456]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0203 	and.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d10d      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
       ||
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025b2:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
       ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d047      	beq.n	8002656 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e044      	b.n	8002656 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d018      	beq.n	8002606 <RCCEx_PLLSAI1_Config+0x86>
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d825      	bhi.n	8002624 <RCCEx_PLLSAI1_Config+0xa4>
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d002      	beq.n	80025e2 <RCCEx_PLLSAI1_Config+0x62>
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d009      	beq.n	80025f4 <RCCEx_PLLSAI1_Config+0x74>
 80025e0:	e020      	b.n	8002624 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025e2:	4b60      	ldr	r3, [pc, #384]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11d      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f2:	e01a      	b.n	800262a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025f4:	4b5b      	ldr	r3, [pc, #364]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d116      	bne.n	800262e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002604:	e013      	b.n	800262e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002612:	4b54      	ldr	r3, [pc, #336]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002622:	e006      	b.n	8002632 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e004      	b.n	8002634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800262a:	bf00      	nop
 800262c:	e002      	b.n	8002634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800262e:	bf00      	nop
 8002630:	e000      	b.n	8002634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002632:	bf00      	nop
    }

    if(status == HAL_OK)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10d      	bne.n	8002656 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800263a:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	430b      	orrs	r3, r1
 8002650:	4944      	ldr	r1, [pc, #272]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d17d      	bne.n	8002758 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800265c:	4b41      	ldr	r3, [pc, #260]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a40      	ldr	r2, [pc, #256]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002668:	f7fe fade 	bl	8000c28 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800266e:	e009      	b.n	8002684 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002670:	f7fe fada 	bl	8000c28 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d902      	bls.n	8002684 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	73fb      	strb	r3, [r7, #15]
        break;
 8002682:	e005      	b.n	8002690 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002684:	4b37      	ldr	r3, [pc, #220]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ef      	bne.n	8002670 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d160      	bne.n	8002758 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6892      	ldr	r2, [r2, #8]
 80026ac:	0211      	lsls	r1, r2, #8
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	0912      	lsrs	r2, r2, #4
 80026b4:	0452      	lsls	r2, r2, #17
 80026b6:	430a      	orrs	r2, r1
 80026b8:	492a      	ldr	r1, [pc, #168]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	610b      	str	r3, [r1, #16]
 80026be:	e027      	b.n	8002710 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d112      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c6:	4b27      	ldr	r3, [pc, #156]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6892      	ldr	r2, [r2, #8]
 80026d6:	0211      	lsls	r1, r2, #8
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6912      	ldr	r2, [r2, #16]
 80026dc:	0852      	lsrs	r2, r2, #1
 80026de:	3a01      	subs	r2, #1
 80026e0:	0552      	lsls	r2, r2, #21
 80026e2:	430a      	orrs	r2, r1
 80026e4:	491f      	ldr	r1, [pc, #124]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	610b      	str	r3, [r1, #16]
 80026ea:	e011      	b.n	8002710 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6892      	ldr	r2, [r2, #8]
 80026fc:	0211      	lsls	r1, r2, #8
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6952      	ldr	r2, [r2, #20]
 8002702:	0852      	lsrs	r2, r2, #1
 8002704:	3a01      	subs	r2, #1
 8002706:	0652      	lsls	r2, r2, #25
 8002708:	430a      	orrs	r2, r1
 800270a:	4916      	ldr	r1, [pc, #88]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a13      	ldr	r2, [pc, #76]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800271a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7fe fa84 	bl	8000c28 <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002722:	e009      	b.n	8002738 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002724:	f7fe fa80 	bl	8000c28 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d902      	bls.n	8002738 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	73fb      	strb	r3, [r7, #15]
          break;
 8002736:	e005      	b.n	8002744 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ef      	beq.n	8002724 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d106      	bne.n	8002758 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4904      	ldr	r1, [pc, #16]	; (8002764 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000

08002768 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002776:	4b6a      	ldr	r3, [pc, #424]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d018      	beq.n	80027b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002782:	4b67      	ldr	r3, [pc, #412]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0203 	and.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d10d      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
       ||
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800279a:	4b61      	ldr	r3, [pc, #388]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
       ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d047      	beq.n	800283e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	e044      	b.n	800283e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d018      	beq.n	80027ee <RCCEx_PLLSAI2_Config+0x86>
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d825      	bhi.n	800280c <RCCEx_PLLSAI2_Config+0xa4>
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d002      	beq.n	80027ca <RCCEx_PLLSAI2_Config+0x62>
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d009      	beq.n	80027dc <RCCEx_PLLSAI2_Config+0x74>
 80027c8:	e020      	b.n	800280c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ca:	4b55      	ldr	r3, [pc, #340]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11d      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027da:	e01a      	b.n	8002812 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027dc:	4b50      	ldr	r3, [pc, #320]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d116      	bne.n	8002816 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ec:	e013      	b.n	8002816 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ee:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027fa:	4b49      	ldr	r3, [pc, #292]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800280a:	e006      	b.n	800281a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      break;
 8002810:	e004      	b.n	800281c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800281a:	bf00      	nop
    }

    if(status == HAL_OK)
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	430b      	orrs	r3, r1
 8002838:	4939      	ldr	r1, [pc, #228]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d167      	bne.n	8002914 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002844:	4b36      	ldr	r3, [pc, #216]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a35      	ldr	r2, [pc, #212]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7fe f9ea 	bl	8000c28 <HAL_GetTick>
 8002854:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002856:	e009      	b.n	800286c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002858:	f7fe f9e6 	bl	8000c28 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d902      	bls.n	800286c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	73fb      	strb	r3, [r7, #15]
        break;
 800286a:	e005      	b.n	8002878 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800286c:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ef      	bne.n	8002858 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d14a      	bne.n	8002914 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800288c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6892      	ldr	r2, [r2, #8]
 8002894:	0211      	lsls	r1, r2, #8
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68d2      	ldr	r2, [r2, #12]
 800289a:	0912      	lsrs	r2, r2, #4
 800289c:	0452      	lsls	r2, r2, #17
 800289e:	430a      	orrs	r2, r1
 80028a0:	491f      	ldr	r1, [pc, #124]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	614b      	str	r3, [r1, #20]
 80028a6:	e011      	b.n	80028cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6892      	ldr	r2, [r2, #8]
 80028b8:	0211      	lsls	r1, r2, #8
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6912      	ldr	r2, [r2, #16]
 80028be:	0852      	lsrs	r2, r2, #1
 80028c0:	3a01      	subs	r2, #1
 80028c2:	0652      	lsls	r2, r2, #25
 80028c4:	430a      	orrs	r2, r1
 80028c6:	4916      	ldr	r1, [pc, #88]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a13      	ldr	r2, [pc, #76]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe f9a6 	bl	8000c28 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028de:	e009      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028e0:	f7fe f9a2 	bl	8000c28 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d902      	bls.n	80028f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	73fb      	strb	r3, [r7, #15]
          break;
 80028f2:	e005      	b.n	8002900 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ef      	beq.n	80028e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	4904      	ldr	r1, [pc, #16]	; (8002920 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e040      	b.n	80029b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fd fff4 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fe3e 	bl	80035ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fb83 	bl	800307c <UART_SetConfig>
 8002976:	4603      	mov	r3, r0
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e01b      	b.n	80029b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800298e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800299e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 febd 	bl	8003730 <UART_CheckIdleState>
 80029b6:	4603      	mov	r3, r0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b08b      	sub	sp, #44	; 0x2c
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d147      	bne.n	8002a66 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HAL_UART_Transmit_IT+0x22>
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e040      	b.n	8002a68 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	88fa      	ldrh	r2, [r7, #6]
 80029f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2221      	movs	r2, #33	; 0x21
 8002a0e:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a18:	d107      	bne.n	8002a2a <HAL_UART_Transmit_IT+0x6a>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_UART_Transmit_IT+0xb4>)
 8002a26:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a28:	e002      	b.n	8002a30 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_UART_Transmit_IT+0xb8>)
 8002a2e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	e853 3f00 	ldrex	r3, [r3]
 8002a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a52:	69f9      	ldr	r1, [r7, #28]
 8002a54:	6a3a      	ldr	r2, [r7, #32]
 8002a56:	e841 2300 	strex	r3, r2, [r1]
 8002a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1e6      	bne.n	8002a30 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	372c      	adds	r7, #44	; 0x2c
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	08003afb 	.word	0x08003afb
 8002a78:	08003a43 	.word	0x08003a43

08002a7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b0ba      	sub	sp, #232	; 0xe8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002aa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002aa6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002aaa:	4013      	ands	r3, r2
 8002aac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d115      	bne.n	8002ae4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00f      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d009      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 82ae 	beq.w	8003036 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
      }
      return;
 8002ae2:	e2a8      	b.n	8003036 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8117 	beq.w	8002d1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002afa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002afe:	4b85      	ldr	r3, [pc, #532]	; (8002d14 <HAL_UART_IRQHandler+0x298>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 810a 	beq.w	8002d1c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d011      	beq.n	8002b38 <HAL_UART_IRQHandler+0xbc>
 8002b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2201      	movs	r2, #1
 8002b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d011      	beq.n	8002b68 <HAL_UART_IRQHandler+0xec>
 8002b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2202      	movs	r2, #2
 8002b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5e:	f043 0204 	orr.w	r2, r3, #4
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d011      	beq.n	8002b98 <HAL_UART_IRQHandler+0x11c>
 8002b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2204      	movs	r2, #4
 8002b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8e:	f043 0202 	orr.w	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d017      	beq.n	8002bd4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bca:	f043 0208 	orr.w	r2, r3, #8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d012      	beq.n	8002c06 <HAL_UART_IRQHandler+0x18a>
 8002be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00c      	beq.n	8002c06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8214 	beq.w	800303a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00d      	beq.n	8002c3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d005      	beq.n	8002c5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04f      	beq.n	8002cfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fe75 	bl	800394e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d141      	bne.n	8002cf6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3308      	adds	r3, #8
 8002c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3308      	adds	r3, #8
 8002c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cae:	e841 2300 	strex	r3, r2, [r1]
 8002cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1d9      	bne.n	8002c72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d013      	beq.n	8002cee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cca:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <HAL_UART_IRQHandler+0x29c>)
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe f903 	bl	8000ede <HAL_DMA_Abort_IT>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d017      	beq.n	8002d0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cec:	e00f      	b.n	8002d0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f9ae 	bl	8003050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	e00b      	b.n	8002d0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f9aa 	bl	8003050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfc:	e007      	b.n	8002d0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f9a6 	bl	8003050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002d0c:	e195      	b.n	800303a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0e:	bf00      	nop
    return;
 8002d10:	e193      	b.n	800303a <HAL_UART_IRQHandler+0x5be>
 8002d12:	bf00      	nop
 8002d14:	04000120 	.word	0x04000120
 8002d18:	08003a17 	.word	0x08003a17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	f040 814e 	bne.w	8002fc2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8147 	beq.w	8002fc2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8140 	beq.w	8002fc2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2210      	movs	r2, #16
 8002d48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d54:	2b40      	cmp	r3, #64	; 0x40
 8002d56:	f040 80b8 	bne.w	8002eca <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8167 	beq.w	800303e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	f080 815f 	bcs.w	800303e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 8086 	bne.w	8002ea8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1da      	bne.n	8002d9c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3308      	adds	r3, #8
 8002dec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3308      	adds	r3, #8
 8002e06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e16:	e841 2300 	strex	r3, r2, [r1]
 8002e1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1e1      	bne.n	8002de6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3308      	adds	r3, #8
 8002e28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3308      	adds	r3, #8
 8002e42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e3      	bne.n	8002e22 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e78:	f023 0310 	bic.w	r3, r3, #16
 8002e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e92:	e841 2300 	strex	r3, r2, [r1]
 8002e96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e4      	bne.n	8002e68 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd ffdd 	bl	8000e62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8ce 	bl	8003064 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ec8:	e0b9      	b.n	800303e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80ab 	beq.w	8003042 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80a6 	beq.w	8003042 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f18:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e4      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3308      	adds	r3, #8
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	e853 3f00 	ldrex	r3, [r3]
 8002f3a:	623b      	str	r3, [r7, #32]
   return(result);
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f50:	633a      	str	r2, [r7, #48]	; 0x30
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f58:	e841 2300 	strex	r3, r2, [r1]
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e3      	bne.n	8002f2c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f023 0310 	bic.w	r3, r3, #16
 8002f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	69b9      	ldr	r1, [r7, #24]
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e4      	bne.n	8002f78 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f852 	bl	8003064 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fc0:	e03f      	b.n	8003042 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00e      	beq.n	8002fec <HAL_UART_IRQHandler+0x570>
 8002fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fe12 	bl	8003c0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fea:	e02d      	b.n	8003048 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00e      	beq.n	8003016 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01c      	beq.n	8003046 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
    }
    return;
 8003014:	e017      	b.n	8003046 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d012      	beq.n	8003048 <HAL_UART_IRQHandler+0x5cc>
 8003022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fdc3 	bl	8003bba <UART_EndTransmit_IT>
    return;
 8003034:	e008      	b.n	8003048 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003036:	bf00      	nop
 8003038:	e006      	b.n	8003048 <HAL_UART_IRQHandler+0x5cc>
    return;
 800303a:	bf00      	nop
 800303c:	e004      	b.n	8003048 <HAL_UART_IRQHandler+0x5cc>
      return;
 800303e:	bf00      	nop
 8003040:	e002      	b.n	8003048 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003042:	bf00      	nop
 8003044:	e000      	b.n	8003048 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003046:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003048:	37e8      	adds	r7, #232	; 0xe8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop

08003050 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800307c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003080:	b08a      	sub	sp, #40	; 0x28
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	431a      	orrs	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	431a      	orrs	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4ba4      	ldr	r3, [pc, #656]	; (800333c <UART_SetConfig+0x2c0>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a99      	ldr	r2, [pc, #612]	; (8003340 <UART_SetConfig+0x2c4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	4313      	orrs	r3, r2
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a90      	ldr	r2, [pc, #576]	; (8003344 <UART_SetConfig+0x2c8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d126      	bne.n	8003154 <UART_SetConfig+0xd8>
 8003106:	4b90      	ldr	r3, [pc, #576]	; (8003348 <UART_SetConfig+0x2cc>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b03      	cmp	r3, #3
 8003112:	d81b      	bhi.n	800314c <UART_SetConfig+0xd0>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <UART_SetConfig+0xa0>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	0800312d 	.word	0x0800312d
 8003120:	0800313d 	.word	0x0800313d
 8003124:	08003135 	.word	0x08003135
 8003128:	08003145 	.word	0x08003145
 800312c:	2301      	movs	r3, #1
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003132:	e116      	b.n	8003362 <UART_SetConfig+0x2e6>
 8003134:	2302      	movs	r3, #2
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313a:	e112      	b.n	8003362 <UART_SetConfig+0x2e6>
 800313c:	2304      	movs	r3, #4
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003142:	e10e      	b.n	8003362 <UART_SetConfig+0x2e6>
 8003144:	2308      	movs	r3, #8
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314a:	e10a      	b.n	8003362 <UART_SetConfig+0x2e6>
 800314c:	2310      	movs	r3, #16
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003152:	e106      	b.n	8003362 <UART_SetConfig+0x2e6>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a7c      	ldr	r2, [pc, #496]	; (800334c <UART_SetConfig+0x2d0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d138      	bne.n	80031d0 <UART_SetConfig+0x154>
 800315e:	4b7a      	ldr	r3, [pc, #488]	; (8003348 <UART_SetConfig+0x2cc>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d82d      	bhi.n	80031c8 <UART_SetConfig+0x14c>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <UART_SetConfig+0xf8>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031c9 	.word	0x080031c9
 800317c:	080031c9 	.word	0x080031c9
 8003180:	080031c9 	.word	0x080031c9
 8003184:	080031b9 	.word	0x080031b9
 8003188:	080031c9 	.word	0x080031c9
 800318c:	080031c9 	.word	0x080031c9
 8003190:	080031c9 	.word	0x080031c9
 8003194:	080031b1 	.word	0x080031b1
 8003198:	080031c9 	.word	0x080031c9
 800319c:	080031c9 	.word	0x080031c9
 80031a0:	080031c9 	.word	0x080031c9
 80031a4:	080031c1 	.word	0x080031c1
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ae:	e0d8      	b.n	8003362 <UART_SetConfig+0x2e6>
 80031b0:	2302      	movs	r3, #2
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b6:	e0d4      	b.n	8003362 <UART_SetConfig+0x2e6>
 80031b8:	2304      	movs	r3, #4
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031be:	e0d0      	b.n	8003362 <UART_SetConfig+0x2e6>
 80031c0:	2308      	movs	r3, #8
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c6:	e0cc      	b.n	8003362 <UART_SetConfig+0x2e6>
 80031c8:	2310      	movs	r3, #16
 80031ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ce:	e0c8      	b.n	8003362 <UART_SetConfig+0x2e6>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a5e      	ldr	r2, [pc, #376]	; (8003350 <UART_SetConfig+0x2d4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d125      	bne.n	8003226 <UART_SetConfig+0x1aa>
 80031da:	4b5b      	ldr	r3, [pc, #364]	; (8003348 <UART_SetConfig+0x2cc>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d016      	beq.n	8003216 <UART_SetConfig+0x19a>
 80031e8:	2b30      	cmp	r3, #48	; 0x30
 80031ea:	d818      	bhi.n	800321e <UART_SetConfig+0x1a2>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d00a      	beq.n	8003206 <UART_SetConfig+0x18a>
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d814      	bhi.n	800321e <UART_SetConfig+0x1a2>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <UART_SetConfig+0x182>
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d008      	beq.n	800320e <UART_SetConfig+0x192>
 80031fc:	e00f      	b.n	800321e <UART_SetConfig+0x1a2>
 80031fe:	2300      	movs	r3, #0
 8003200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003204:	e0ad      	b.n	8003362 <UART_SetConfig+0x2e6>
 8003206:	2302      	movs	r3, #2
 8003208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320c:	e0a9      	b.n	8003362 <UART_SetConfig+0x2e6>
 800320e:	2304      	movs	r3, #4
 8003210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003214:	e0a5      	b.n	8003362 <UART_SetConfig+0x2e6>
 8003216:	2308      	movs	r3, #8
 8003218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321c:	e0a1      	b.n	8003362 <UART_SetConfig+0x2e6>
 800321e:	2310      	movs	r3, #16
 8003220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003224:	e09d      	b.n	8003362 <UART_SetConfig+0x2e6>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a4a      	ldr	r2, [pc, #296]	; (8003354 <UART_SetConfig+0x2d8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d125      	bne.n	800327c <UART_SetConfig+0x200>
 8003230:	4b45      	ldr	r3, [pc, #276]	; (8003348 <UART_SetConfig+0x2cc>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003236:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800323a:	2bc0      	cmp	r3, #192	; 0xc0
 800323c:	d016      	beq.n	800326c <UART_SetConfig+0x1f0>
 800323e:	2bc0      	cmp	r3, #192	; 0xc0
 8003240:	d818      	bhi.n	8003274 <UART_SetConfig+0x1f8>
 8003242:	2b80      	cmp	r3, #128	; 0x80
 8003244:	d00a      	beq.n	800325c <UART_SetConfig+0x1e0>
 8003246:	2b80      	cmp	r3, #128	; 0x80
 8003248:	d814      	bhi.n	8003274 <UART_SetConfig+0x1f8>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <UART_SetConfig+0x1d8>
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d008      	beq.n	8003264 <UART_SetConfig+0x1e8>
 8003252:	e00f      	b.n	8003274 <UART_SetConfig+0x1f8>
 8003254:	2300      	movs	r3, #0
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325a:	e082      	b.n	8003362 <UART_SetConfig+0x2e6>
 800325c:	2302      	movs	r3, #2
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003262:	e07e      	b.n	8003362 <UART_SetConfig+0x2e6>
 8003264:	2304      	movs	r3, #4
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326a:	e07a      	b.n	8003362 <UART_SetConfig+0x2e6>
 800326c:	2308      	movs	r3, #8
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003272:	e076      	b.n	8003362 <UART_SetConfig+0x2e6>
 8003274:	2310      	movs	r3, #16
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327a:	e072      	b.n	8003362 <UART_SetConfig+0x2e6>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a35      	ldr	r2, [pc, #212]	; (8003358 <UART_SetConfig+0x2dc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d12a      	bne.n	80032dc <UART_SetConfig+0x260>
 8003286:	4b30      	ldr	r3, [pc, #192]	; (8003348 <UART_SetConfig+0x2cc>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003294:	d01a      	beq.n	80032cc <UART_SetConfig+0x250>
 8003296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800329a:	d81b      	bhi.n	80032d4 <UART_SetConfig+0x258>
 800329c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a0:	d00c      	beq.n	80032bc <UART_SetConfig+0x240>
 80032a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a6:	d815      	bhi.n	80032d4 <UART_SetConfig+0x258>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <UART_SetConfig+0x238>
 80032ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b0:	d008      	beq.n	80032c4 <UART_SetConfig+0x248>
 80032b2:	e00f      	b.n	80032d4 <UART_SetConfig+0x258>
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ba:	e052      	b.n	8003362 <UART_SetConfig+0x2e6>
 80032bc:	2302      	movs	r3, #2
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c2:	e04e      	b.n	8003362 <UART_SetConfig+0x2e6>
 80032c4:	2304      	movs	r3, #4
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e04a      	b.n	8003362 <UART_SetConfig+0x2e6>
 80032cc:	2308      	movs	r3, #8
 80032ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d2:	e046      	b.n	8003362 <UART_SetConfig+0x2e6>
 80032d4:	2310      	movs	r3, #16
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032da:	e042      	b.n	8003362 <UART_SetConfig+0x2e6>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a17      	ldr	r2, [pc, #92]	; (8003340 <UART_SetConfig+0x2c4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d13a      	bne.n	800335c <UART_SetConfig+0x2e0>
 80032e6:	4b18      	ldr	r3, [pc, #96]	; (8003348 <UART_SetConfig+0x2cc>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032f4:	d01a      	beq.n	800332c <UART_SetConfig+0x2b0>
 80032f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032fa:	d81b      	bhi.n	8003334 <UART_SetConfig+0x2b8>
 80032fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003300:	d00c      	beq.n	800331c <UART_SetConfig+0x2a0>
 8003302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003306:	d815      	bhi.n	8003334 <UART_SetConfig+0x2b8>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <UART_SetConfig+0x298>
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003310:	d008      	beq.n	8003324 <UART_SetConfig+0x2a8>
 8003312:	e00f      	b.n	8003334 <UART_SetConfig+0x2b8>
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331a:	e022      	b.n	8003362 <UART_SetConfig+0x2e6>
 800331c:	2302      	movs	r3, #2
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003322:	e01e      	b.n	8003362 <UART_SetConfig+0x2e6>
 8003324:	2304      	movs	r3, #4
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332a:	e01a      	b.n	8003362 <UART_SetConfig+0x2e6>
 800332c:	2308      	movs	r3, #8
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003332:	e016      	b.n	8003362 <UART_SetConfig+0x2e6>
 8003334:	2310      	movs	r3, #16
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333a:	e012      	b.n	8003362 <UART_SetConfig+0x2e6>
 800333c:	efff69f3 	.word	0xefff69f3
 8003340:	40008000 	.word	0x40008000
 8003344:	40013800 	.word	0x40013800
 8003348:	40021000 	.word	0x40021000
 800334c:	40004400 	.word	0x40004400
 8003350:	40004800 	.word	0x40004800
 8003354:	40004c00 	.word	0x40004c00
 8003358:	40005000 	.word	0x40005000
 800335c:	2310      	movs	r3, #16
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a9f      	ldr	r2, [pc, #636]	; (80035e4 <UART_SetConfig+0x568>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d17a      	bne.n	8003462 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800336c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003370:	2b08      	cmp	r3, #8
 8003372:	d824      	bhi.n	80033be <UART_SetConfig+0x342>
 8003374:	a201      	add	r2, pc, #4	; (adr r2, 800337c <UART_SetConfig+0x300>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033a1 	.word	0x080033a1
 8003380:	080033bf 	.word	0x080033bf
 8003384:	080033a9 	.word	0x080033a9
 8003388:	080033bf 	.word	0x080033bf
 800338c:	080033af 	.word	0x080033af
 8003390:	080033bf 	.word	0x080033bf
 8003394:	080033bf 	.word	0x080033bf
 8003398:	080033bf 	.word	0x080033bf
 800339c:	080033b7 	.word	0x080033b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a0:	f7fe fd78 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80033a4:	61f8      	str	r0, [r7, #28]
        break;
 80033a6:	e010      	b.n	80033ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a8:	4b8f      	ldr	r3, [pc, #572]	; (80035e8 <UART_SetConfig+0x56c>)
 80033aa:	61fb      	str	r3, [r7, #28]
        break;
 80033ac:	e00d      	b.n	80033ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ae:	f7fe fcd9 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 80033b2:	61f8      	str	r0, [r7, #28]
        break;
 80033b4:	e009      	b.n	80033ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ba:	61fb      	str	r3, [r7, #28]
        break;
 80033bc:	e005      	b.n	80033ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80fb 	beq.w	80035c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d305      	bcc.n	80033ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d903      	bls.n	80033f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033f4:	e0e8      	b.n	80035c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	2200      	movs	r2, #0
 80033fa:	461c      	mov	r4, r3
 80033fc:	4615      	mov	r5, r2
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	022b      	lsls	r3, r5, #8
 8003408:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800340c:	0222      	lsls	r2, r4, #8
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	6849      	ldr	r1, [r1, #4]
 8003412:	0849      	lsrs	r1, r1, #1
 8003414:	2000      	movs	r0, #0
 8003416:	4688      	mov	r8, r1
 8003418:	4681      	mov	r9, r0
 800341a:	eb12 0a08 	adds.w	sl, r2, r8
 800341e:	eb43 0b09 	adc.w	fp, r3, r9
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003430:	4650      	mov	r0, sl
 8003432:	4659      	mov	r1, fp
 8003434:	f7fc ff24 	bl	8000280 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003446:	d308      	bcc.n	800345a <UART_SetConfig+0x3de>
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344e:	d204      	bcs.n	800345a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	60da      	str	r2, [r3, #12]
 8003458:	e0b6      	b.n	80035c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003460:	e0b2      	b.n	80035c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346a:	d15e      	bne.n	800352a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800346c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003470:	2b08      	cmp	r3, #8
 8003472:	d828      	bhi.n	80034c6 <UART_SetConfig+0x44a>
 8003474:	a201      	add	r2, pc, #4	; (adr r2, 800347c <UART_SetConfig+0x400>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	080034a1 	.word	0x080034a1
 8003480:	080034a9 	.word	0x080034a9
 8003484:	080034b1 	.word	0x080034b1
 8003488:	080034c7 	.word	0x080034c7
 800348c:	080034b7 	.word	0x080034b7
 8003490:	080034c7 	.word	0x080034c7
 8003494:	080034c7 	.word	0x080034c7
 8003498:	080034c7 	.word	0x080034c7
 800349c:	080034bf 	.word	0x080034bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a0:	f7fe fcf8 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80034a4:	61f8      	str	r0, [r7, #28]
        break;
 80034a6:	e014      	b.n	80034d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a8:	f7fe fd0a 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 80034ac:	61f8      	str	r0, [r7, #28]
        break;
 80034ae:	e010      	b.n	80034d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b0:	4b4d      	ldr	r3, [pc, #308]	; (80035e8 <UART_SetConfig+0x56c>)
 80034b2:	61fb      	str	r3, [r7, #28]
        break;
 80034b4:	e00d      	b.n	80034d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b6:	f7fe fc55 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 80034ba:	61f8      	str	r0, [r7, #28]
        break;
 80034bc:	e009      	b.n	80034d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c2:	61fb      	str	r3, [r7, #28]
        break;
 80034c4:	e005      	b.n	80034d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d077      	beq.n	80035c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005a      	lsls	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	441a      	add	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d916      	bls.n	8003522 <UART_SetConfig+0x4a6>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fa:	d212      	bcs.n	8003522 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f023 030f 	bic.w	r3, r3, #15
 8003504:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	b29b      	uxth	r3, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	b29a      	uxth	r2, r3
 8003512:	8afb      	ldrh	r3, [r7, #22]
 8003514:	4313      	orrs	r3, r2
 8003516:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	8afa      	ldrh	r2, [r7, #22]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	e052      	b.n	80035c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003528:	e04e      	b.n	80035c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800352a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800352e:	2b08      	cmp	r3, #8
 8003530:	d827      	bhi.n	8003582 <UART_SetConfig+0x506>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <UART_SetConfig+0x4bc>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800355d 	.word	0x0800355d
 800353c:	08003565 	.word	0x08003565
 8003540:	0800356d 	.word	0x0800356d
 8003544:	08003583 	.word	0x08003583
 8003548:	08003573 	.word	0x08003573
 800354c:	08003583 	.word	0x08003583
 8003550:	08003583 	.word	0x08003583
 8003554:	08003583 	.word	0x08003583
 8003558:	0800357b 	.word	0x0800357b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800355c:	f7fe fc9a 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8003560:	61f8      	str	r0, [r7, #28]
        break;
 8003562:	e014      	b.n	800358e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003564:	f7fe fcac 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8003568:	61f8      	str	r0, [r7, #28]
        break;
 800356a:	e010      	b.n	800358e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800356c:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <UART_SetConfig+0x56c>)
 800356e:	61fb      	str	r3, [r7, #28]
        break;
 8003570:	e00d      	b.n	800358e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003572:	f7fe fbf7 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8003576:	61f8      	str	r0, [r7, #28]
        break;
 8003578:	e009      	b.n	800358e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800357a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800357e:	61fb      	str	r3, [r7, #28]
        break;
 8003580:	e005      	b.n	800358e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800358c:	bf00      	nop
    }

    if (pclk != 0U)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d019      	beq.n	80035c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	085a      	lsrs	r2, r3, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	441a      	add	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b0f      	cmp	r3, #15
 80035ac:	d909      	bls.n	80035c2 <UART_SetConfig+0x546>
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d205      	bcs.n	80035c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60da      	str	r2, [r3, #12]
 80035c0:	e002      	b.n	80035c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e2:	bf00      	nop
 80035e4:	40008000 	.word	0x40008000
 80035e8:	00f42400 	.word	0x00f42400

080035ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01a      	beq.n	8003702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ea:	d10a      	bne.n	8003702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b098      	sub	sp, #96	; 0x60
 8003734:	af02      	add	r7, sp, #8
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003740:	f7fd fa72 	bl	8000c28 <HAL_GetTick>
 8003744:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b08      	cmp	r3, #8
 8003752:	d12e      	bne.n	80037b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375c:	2200      	movs	r2, #0
 800375e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f88c 	bl	8003880 <UART_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d021      	beq.n	80037b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800377c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003782:	653b      	str	r3, [r7, #80]	; 0x50
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378c:	647b      	str	r3, [r7, #68]	; 0x44
 800378e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800379a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e6      	bne.n	800376e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e062      	b.n	8003878 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d149      	bne.n	8003854 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c8:	2200      	movs	r2, #0
 80037ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f856 	bl	8003880 <UART_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d03c      	beq.n	8003854 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	623b      	str	r3, [r7, #32]
   return(result);
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	633b      	str	r3, [r7, #48]	; 0x30
 80037fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e6      	bne.n	80037da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3308      	adds	r3, #8
 8003812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	60fb      	str	r3, [r7, #12]
   return(result);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	64bb      	str	r3, [r7, #72]	; 0x48
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3308      	adds	r3, #8
 800382a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800382c:	61fa      	str	r2, [r7, #28]
 800382e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	69b9      	ldr	r1, [r7, #24]
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	617b      	str	r3, [r7, #20]
   return(result);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e5      	bne.n	800380c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e011      	b.n	8003878 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3758      	adds	r7, #88	; 0x58
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003890:	e049      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d045      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fd f9c5 	bl	8000c28 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e048      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d031      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d110      	bne.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2208      	movs	r2, #8
 80038d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f838 	bl	800394e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2208      	movs	r2, #8
 80038e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e029      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003900:	d111      	bne.n	8003926 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800390a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f81e 	bl	800394e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e00f      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4013      	ands	r3, r2
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	bf0c      	ite	eq
 8003936:	2301      	moveq	r3, #1
 8003938:	2300      	movne	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	429a      	cmp	r2, r3
 8003942:	d0a6      	beq.n	8003892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800394e:	b480      	push	{r7}
 8003950:	b095      	sub	sp, #84	; 0x54
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003974:	643b      	str	r3, [r7, #64]	; 0x40
 8003976:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800397a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e6      	bne.n	8003956 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3308      	adds	r3, #8
 800398e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	61fb      	str	r3, [r7, #28]
   return(result);
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	64bb      	str	r3, [r7, #72]	; 0x48
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3308      	adds	r3, #8
 80039a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d118      	bne.n	80039f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f023 0310 	bic.w	r3, r3, #16
 80039d8:	647b      	str	r3, [r7, #68]	; 0x44
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6979      	ldr	r1, [r7, #20]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	613b      	str	r3, [r7, #16]
   return(result);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e6      	bne.n	80039c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a0a:	bf00      	nop
 8003a0c:	3754      	adds	r7, #84	; 0x54
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f7ff fb0b 	bl	8003050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b08f      	sub	sp, #60	; 0x3c
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a4e:	2b21      	cmp	r3, #33	; 0x21
 8003a50:	d14d      	bne.n	8003aee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d132      	bne.n	8003ac4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e6      	bne.n	8003a5e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	613b      	str	r3, [r7, #16]
   return(result);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e6      	bne.n	8003a90 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003ac2:	e014      	b.n	8003aee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	b292      	uxth	r2, r2
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003aee:	bf00      	nop
 8003af0:	373c      	adds	r7, #60	; 0x3c
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b091      	sub	sp, #68	; 0x44
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b06:	2b21      	cmp	r3, #33	; 0x21
 8003b08:	d151      	bne.n	8003bae <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d132      	bne.n	8003b7c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	623b      	str	r3, [r7, #32]
   return(result);
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30
 8003b36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	617b      	str	r3, [r7, #20]
   return(result);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e6      	bne.n	8003b48 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003b7a:	e018      	b.n	8003bae <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b84:	881a      	ldrh	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b8e:	b292      	uxth	r2, r2
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	1c9a      	adds	r2, r3, #2
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003bae:	bf00      	nop
 8003bb0:	3744      	adds	r7, #68	; 0x44
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b088      	sub	sp, #32
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6979      	ldr	r1, [r7, #20]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	613b      	str	r3, [r7, #16]
   return(result);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e6      	bne.n	8003bc2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7fc fd3b 	bl	800067c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c06:	bf00      	nop
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <_vsiprintf_r>:
 8003c24:	b500      	push	{lr}
 8003c26:	b09b      	sub	sp, #108	; 0x6c
 8003c28:	9100      	str	r1, [sp, #0]
 8003c2a:	9104      	str	r1, [sp, #16]
 8003c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c30:	9105      	str	r1, [sp, #20]
 8003c32:	9102      	str	r1, [sp, #8]
 8003c34:	4905      	ldr	r1, [pc, #20]	; (8003c4c <_vsiprintf_r+0x28>)
 8003c36:	9103      	str	r1, [sp, #12]
 8003c38:	4669      	mov	r1, sp
 8003c3a:	f000 f999 	bl	8003f70 <_svfiprintf_r>
 8003c3e:	9b00      	ldr	r3, [sp, #0]
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
 8003c44:	b01b      	add	sp, #108	; 0x6c
 8003c46:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c4a:	bf00      	nop
 8003c4c:	ffff0208 	.word	0xffff0208

08003c50 <vsiprintf>:
 8003c50:	4613      	mov	r3, r2
 8003c52:	460a      	mov	r2, r1
 8003c54:	4601      	mov	r1, r0
 8003c56:	4802      	ldr	r0, [pc, #8]	; (8003c60 <vsiprintf+0x10>)
 8003c58:	6800      	ldr	r0, [r0, #0]
 8003c5a:	f7ff bfe3 	b.w	8003c24 <_vsiprintf_r>
 8003c5e:	bf00      	nop
 8003c60:	20000058 	.word	0x20000058

08003c64 <memset>:
 8003c64:	4402      	add	r2, r0
 8003c66:	4603      	mov	r3, r0
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <memset+0xa>
 8003c6c:	4770      	bx	lr
 8003c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c72:	e7f9      	b.n	8003c68 <memset+0x4>

08003c74 <__errno>:
 8003c74:	4b01      	ldr	r3, [pc, #4]	; (8003c7c <__errno+0x8>)
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000058 	.word	0x20000058

08003c80 <__libc_init_array>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	4d0d      	ldr	r5, [pc, #52]	; (8003cb8 <__libc_init_array+0x38>)
 8003c84:	4c0d      	ldr	r4, [pc, #52]	; (8003cbc <__libc_init_array+0x3c>)
 8003c86:	1b64      	subs	r4, r4, r5
 8003c88:	10a4      	asrs	r4, r4, #2
 8003c8a:	2600      	movs	r6, #0
 8003c8c:	42a6      	cmp	r6, r4
 8003c8e:	d109      	bne.n	8003ca4 <__libc_init_array+0x24>
 8003c90:	4d0b      	ldr	r5, [pc, #44]	; (8003cc0 <__libc_init_array+0x40>)
 8003c92:	4c0c      	ldr	r4, [pc, #48]	; (8003cc4 <__libc_init_array+0x44>)
 8003c94:	f000 fc6a 	bl	800456c <_init>
 8003c98:	1b64      	subs	r4, r4, r5
 8003c9a:	10a4      	asrs	r4, r4, #2
 8003c9c:	2600      	movs	r6, #0
 8003c9e:	42a6      	cmp	r6, r4
 8003ca0:	d105      	bne.n	8003cae <__libc_init_array+0x2e>
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca8:	4798      	blx	r3
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7ee      	b.n	8003c8c <__libc_init_array+0xc>
 8003cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb2:	4798      	blx	r3
 8003cb4:	3601      	adds	r6, #1
 8003cb6:	e7f2      	b.n	8003c9e <__libc_init_array+0x1e>
 8003cb8:	08004614 	.word	0x08004614
 8003cbc:	08004614 	.word	0x08004614
 8003cc0:	08004614 	.word	0x08004614
 8003cc4:	08004618 	.word	0x08004618

08003cc8 <__retarget_lock_acquire_recursive>:
 8003cc8:	4770      	bx	lr

08003cca <__retarget_lock_release_recursive>:
 8003cca:	4770      	bx	lr

08003ccc <_free_r>:
 8003ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cce:	2900      	cmp	r1, #0
 8003cd0:	d044      	beq.n	8003d5c <_free_r+0x90>
 8003cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd6:	9001      	str	r0, [sp, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f1a1 0404 	sub.w	r4, r1, #4
 8003cde:	bfb8      	it	lt
 8003ce0:	18e4      	addlt	r4, r4, r3
 8003ce2:	f000 f8df 	bl	8003ea4 <__malloc_lock>
 8003ce6:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <_free_r+0x94>)
 8003ce8:	9801      	ldr	r0, [sp, #4]
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	b933      	cbnz	r3, 8003cfc <_free_r+0x30>
 8003cee:	6063      	str	r3, [r4, #4]
 8003cf0:	6014      	str	r4, [r2, #0]
 8003cf2:	b003      	add	sp, #12
 8003cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cf8:	f000 b8da 	b.w	8003eb0 <__malloc_unlock>
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	d908      	bls.n	8003d12 <_free_r+0x46>
 8003d00:	6825      	ldr	r5, [r4, #0]
 8003d02:	1961      	adds	r1, r4, r5
 8003d04:	428b      	cmp	r3, r1
 8003d06:	bf01      	itttt	eq
 8003d08:	6819      	ldreq	r1, [r3, #0]
 8003d0a:	685b      	ldreq	r3, [r3, #4]
 8003d0c:	1949      	addeq	r1, r1, r5
 8003d0e:	6021      	streq	r1, [r4, #0]
 8003d10:	e7ed      	b.n	8003cee <_free_r+0x22>
 8003d12:	461a      	mov	r2, r3
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	b10b      	cbz	r3, 8003d1c <_free_r+0x50>
 8003d18:	42a3      	cmp	r3, r4
 8003d1a:	d9fa      	bls.n	8003d12 <_free_r+0x46>
 8003d1c:	6811      	ldr	r1, [r2, #0]
 8003d1e:	1855      	adds	r5, r2, r1
 8003d20:	42a5      	cmp	r5, r4
 8003d22:	d10b      	bne.n	8003d3c <_free_r+0x70>
 8003d24:	6824      	ldr	r4, [r4, #0]
 8003d26:	4421      	add	r1, r4
 8003d28:	1854      	adds	r4, r2, r1
 8003d2a:	42a3      	cmp	r3, r4
 8003d2c:	6011      	str	r1, [r2, #0]
 8003d2e:	d1e0      	bne.n	8003cf2 <_free_r+0x26>
 8003d30:	681c      	ldr	r4, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	6053      	str	r3, [r2, #4]
 8003d36:	440c      	add	r4, r1
 8003d38:	6014      	str	r4, [r2, #0]
 8003d3a:	e7da      	b.n	8003cf2 <_free_r+0x26>
 8003d3c:	d902      	bls.n	8003d44 <_free_r+0x78>
 8003d3e:	230c      	movs	r3, #12
 8003d40:	6003      	str	r3, [r0, #0]
 8003d42:	e7d6      	b.n	8003cf2 <_free_r+0x26>
 8003d44:	6825      	ldr	r5, [r4, #0]
 8003d46:	1961      	adds	r1, r4, r5
 8003d48:	428b      	cmp	r3, r1
 8003d4a:	bf04      	itt	eq
 8003d4c:	6819      	ldreq	r1, [r3, #0]
 8003d4e:	685b      	ldreq	r3, [r3, #4]
 8003d50:	6063      	str	r3, [r4, #4]
 8003d52:	bf04      	itt	eq
 8003d54:	1949      	addeq	r1, r1, r5
 8003d56:	6021      	streq	r1, [r4, #0]
 8003d58:	6054      	str	r4, [r2, #4]
 8003d5a:	e7ca      	b.n	8003cf2 <_free_r+0x26>
 8003d5c:	b003      	add	sp, #12
 8003d5e:	bd30      	pop	{r4, r5, pc}
 8003d60:	20000834 	.word	0x20000834

08003d64 <sbrk_aligned>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	4e0e      	ldr	r6, [pc, #56]	; (8003da0 <sbrk_aligned+0x3c>)
 8003d68:	460c      	mov	r4, r1
 8003d6a:	6831      	ldr	r1, [r6, #0]
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	b911      	cbnz	r1, 8003d76 <sbrk_aligned+0x12>
 8003d70:	f000 fba6 	bl	80044c0 <_sbrk_r>
 8003d74:	6030      	str	r0, [r6, #0]
 8003d76:	4621      	mov	r1, r4
 8003d78:	4628      	mov	r0, r5
 8003d7a:	f000 fba1 	bl	80044c0 <_sbrk_r>
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	d00a      	beq.n	8003d98 <sbrk_aligned+0x34>
 8003d82:	1cc4      	adds	r4, r0, #3
 8003d84:	f024 0403 	bic.w	r4, r4, #3
 8003d88:	42a0      	cmp	r0, r4
 8003d8a:	d007      	beq.n	8003d9c <sbrk_aligned+0x38>
 8003d8c:	1a21      	subs	r1, r4, r0
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 fb96 	bl	80044c0 <_sbrk_r>
 8003d94:	3001      	adds	r0, #1
 8003d96:	d101      	bne.n	8003d9c <sbrk_aligned+0x38>
 8003d98:	f04f 34ff 	mov.w	r4, #4294967295
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	20000838 	.word	0x20000838

08003da4 <_malloc_r>:
 8003da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da8:	1ccd      	adds	r5, r1, #3
 8003daa:	f025 0503 	bic.w	r5, r5, #3
 8003dae:	3508      	adds	r5, #8
 8003db0:	2d0c      	cmp	r5, #12
 8003db2:	bf38      	it	cc
 8003db4:	250c      	movcc	r5, #12
 8003db6:	2d00      	cmp	r5, #0
 8003db8:	4607      	mov	r7, r0
 8003dba:	db01      	blt.n	8003dc0 <_malloc_r+0x1c>
 8003dbc:	42a9      	cmp	r1, r5
 8003dbe:	d905      	bls.n	8003dcc <_malloc_r+0x28>
 8003dc0:	230c      	movs	r3, #12
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	2600      	movs	r6, #0
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ea0 <_malloc_r+0xfc>
 8003dd0:	f000 f868 	bl	8003ea4 <__malloc_lock>
 8003dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8003dd8:	461c      	mov	r4, r3
 8003dda:	bb5c      	cbnz	r4, 8003e34 <_malloc_r+0x90>
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4638      	mov	r0, r7
 8003de0:	f7ff ffc0 	bl	8003d64 <sbrk_aligned>
 8003de4:	1c43      	adds	r3, r0, #1
 8003de6:	4604      	mov	r4, r0
 8003de8:	d155      	bne.n	8003e96 <_malloc_r+0xf2>
 8003dea:	f8d8 4000 	ldr.w	r4, [r8]
 8003dee:	4626      	mov	r6, r4
 8003df0:	2e00      	cmp	r6, #0
 8003df2:	d145      	bne.n	8003e80 <_malloc_r+0xdc>
 8003df4:	2c00      	cmp	r4, #0
 8003df6:	d048      	beq.n	8003e8a <_malloc_r+0xe6>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	eb04 0903 	add.w	r9, r4, r3
 8003e02:	f000 fb5d 	bl	80044c0 <_sbrk_r>
 8003e06:	4581      	cmp	r9, r0
 8003e08:	d13f      	bne.n	8003e8a <_malloc_r+0xe6>
 8003e0a:	6821      	ldr	r1, [r4, #0]
 8003e0c:	1a6d      	subs	r5, r5, r1
 8003e0e:	4629      	mov	r1, r5
 8003e10:	4638      	mov	r0, r7
 8003e12:	f7ff ffa7 	bl	8003d64 <sbrk_aligned>
 8003e16:	3001      	adds	r0, #1
 8003e18:	d037      	beq.n	8003e8a <_malloc_r+0xe6>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	442b      	add	r3, r5
 8003e1e:	6023      	str	r3, [r4, #0]
 8003e20:	f8d8 3000 	ldr.w	r3, [r8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d038      	beq.n	8003e9a <_malloc_r+0xf6>
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	42a2      	cmp	r2, r4
 8003e2c:	d12b      	bne.n	8003e86 <_malloc_r+0xe2>
 8003e2e:	2200      	movs	r2, #0
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	e00f      	b.n	8003e54 <_malloc_r+0xb0>
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	1b52      	subs	r2, r2, r5
 8003e38:	d41f      	bmi.n	8003e7a <_malloc_r+0xd6>
 8003e3a:	2a0b      	cmp	r2, #11
 8003e3c:	d917      	bls.n	8003e6e <_malloc_r+0xca>
 8003e3e:	1961      	adds	r1, r4, r5
 8003e40:	42a3      	cmp	r3, r4
 8003e42:	6025      	str	r5, [r4, #0]
 8003e44:	bf18      	it	ne
 8003e46:	6059      	strne	r1, [r3, #4]
 8003e48:	6863      	ldr	r3, [r4, #4]
 8003e4a:	bf08      	it	eq
 8003e4c:	f8c8 1000 	streq.w	r1, [r8]
 8003e50:	5162      	str	r2, [r4, r5]
 8003e52:	604b      	str	r3, [r1, #4]
 8003e54:	4638      	mov	r0, r7
 8003e56:	f104 060b 	add.w	r6, r4, #11
 8003e5a:	f000 f829 	bl	8003eb0 <__malloc_unlock>
 8003e5e:	f026 0607 	bic.w	r6, r6, #7
 8003e62:	1d23      	adds	r3, r4, #4
 8003e64:	1af2      	subs	r2, r6, r3
 8003e66:	d0ae      	beq.n	8003dc6 <_malloc_r+0x22>
 8003e68:	1b9b      	subs	r3, r3, r6
 8003e6a:	50a3      	str	r3, [r4, r2]
 8003e6c:	e7ab      	b.n	8003dc6 <_malloc_r+0x22>
 8003e6e:	42a3      	cmp	r3, r4
 8003e70:	6862      	ldr	r2, [r4, #4]
 8003e72:	d1dd      	bne.n	8003e30 <_malloc_r+0x8c>
 8003e74:	f8c8 2000 	str.w	r2, [r8]
 8003e78:	e7ec      	b.n	8003e54 <_malloc_r+0xb0>
 8003e7a:	4623      	mov	r3, r4
 8003e7c:	6864      	ldr	r4, [r4, #4]
 8003e7e:	e7ac      	b.n	8003dda <_malloc_r+0x36>
 8003e80:	4634      	mov	r4, r6
 8003e82:	6876      	ldr	r6, [r6, #4]
 8003e84:	e7b4      	b.n	8003df0 <_malloc_r+0x4c>
 8003e86:	4613      	mov	r3, r2
 8003e88:	e7cc      	b.n	8003e24 <_malloc_r+0x80>
 8003e8a:	230c      	movs	r3, #12
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4638      	mov	r0, r7
 8003e90:	f000 f80e 	bl	8003eb0 <__malloc_unlock>
 8003e94:	e797      	b.n	8003dc6 <_malloc_r+0x22>
 8003e96:	6025      	str	r5, [r4, #0]
 8003e98:	e7dc      	b.n	8003e54 <_malloc_r+0xb0>
 8003e9a:	605b      	str	r3, [r3, #4]
 8003e9c:	deff      	udf	#255	; 0xff
 8003e9e:	bf00      	nop
 8003ea0:	20000834 	.word	0x20000834

08003ea4 <__malloc_lock>:
 8003ea4:	4801      	ldr	r0, [pc, #4]	; (8003eac <__malloc_lock+0x8>)
 8003ea6:	f7ff bf0f 	b.w	8003cc8 <__retarget_lock_acquire_recursive>
 8003eaa:	bf00      	nop
 8003eac:	20000830 	.word	0x20000830

08003eb0 <__malloc_unlock>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	; (8003eb8 <__malloc_unlock+0x8>)
 8003eb2:	f7ff bf0a 	b.w	8003cca <__retarget_lock_release_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	20000830 	.word	0x20000830

08003ebc <__ssputs_r>:
 8003ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec0:	688e      	ldr	r6, [r1, #8]
 8003ec2:	461f      	mov	r7, r3
 8003ec4:	42be      	cmp	r6, r7
 8003ec6:	680b      	ldr	r3, [r1, #0]
 8003ec8:	4682      	mov	sl, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	4690      	mov	r8, r2
 8003ece:	d82c      	bhi.n	8003f2a <__ssputs_r+0x6e>
 8003ed0:	898a      	ldrh	r2, [r1, #12]
 8003ed2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ed6:	d026      	beq.n	8003f26 <__ssputs_r+0x6a>
 8003ed8:	6965      	ldr	r5, [r4, #20]
 8003eda:	6909      	ldr	r1, [r1, #16]
 8003edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ee0:	eba3 0901 	sub.w	r9, r3, r1
 8003ee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ee8:	1c7b      	adds	r3, r7, #1
 8003eea:	444b      	add	r3, r9
 8003eec:	106d      	asrs	r5, r5, #1
 8003eee:	429d      	cmp	r5, r3
 8003ef0:	bf38      	it	cc
 8003ef2:	461d      	movcc	r5, r3
 8003ef4:	0553      	lsls	r3, r2, #21
 8003ef6:	d527      	bpl.n	8003f48 <__ssputs_r+0x8c>
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f7ff ff53 	bl	8003da4 <_malloc_r>
 8003efe:	4606      	mov	r6, r0
 8003f00:	b360      	cbz	r0, 8003f5c <__ssputs_r+0xa0>
 8003f02:	6921      	ldr	r1, [r4, #16]
 8003f04:	464a      	mov	r2, r9
 8003f06:	f000 faeb 	bl	80044e0 <memcpy>
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f14:	81a3      	strh	r3, [r4, #12]
 8003f16:	6126      	str	r6, [r4, #16]
 8003f18:	6165      	str	r5, [r4, #20]
 8003f1a:	444e      	add	r6, r9
 8003f1c:	eba5 0509 	sub.w	r5, r5, r9
 8003f20:	6026      	str	r6, [r4, #0]
 8003f22:	60a5      	str	r5, [r4, #8]
 8003f24:	463e      	mov	r6, r7
 8003f26:	42be      	cmp	r6, r7
 8003f28:	d900      	bls.n	8003f2c <__ssputs_r+0x70>
 8003f2a:	463e      	mov	r6, r7
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	4632      	mov	r2, r6
 8003f30:	4641      	mov	r1, r8
 8003f32:	f000 faab 	bl	800448c <memmove>
 8003f36:	68a3      	ldr	r3, [r4, #8]
 8003f38:	1b9b      	subs	r3, r3, r6
 8003f3a:	60a3      	str	r3, [r4, #8]
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	4433      	add	r3, r6
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	2000      	movs	r0, #0
 8003f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f48:	462a      	mov	r2, r5
 8003f4a:	f000 fad7 	bl	80044fc <_realloc_r>
 8003f4e:	4606      	mov	r6, r0
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d1e0      	bne.n	8003f16 <__ssputs_r+0x5a>
 8003f54:	6921      	ldr	r1, [r4, #16]
 8003f56:	4650      	mov	r0, sl
 8003f58:	f7ff feb8 	bl	8003ccc <_free_r>
 8003f5c:	230c      	movs	r3, #12
 8003f5e:	f8ca 3000 	str.w	r3, [sl]
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f68:	81a3      	strh	r3, [r4, #12]
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	e7e9      	b.n	8003f44 <__ssputs_r+0x88>

08003f70 <_svfiprintf_r>:
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	4698      	mov	r8, r3
 8003f76:	898b      	ldrh	r3, [r1, #12]
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	b09d      	sub	sp, #116	; 0x74
 8003f7c:	4607      	mov	r7, r0
 8003f7e:	460d      	mov	r5, r1
 8003f80:	4614      	mov	r4, r2
 8003f82:	d50e      	bpl.n	8003fa2 <_svfiprintf_r+0x32>
 8003f84:	690b      	ldr	r3, [r1, #16]
 8003f86:	b963      	cbnz	r3, 8003fa2 <_svfiprintf_r+0x32>
 8003f88:	2140      	movs	r1, #64	; 0x40
 8003f8a:	f7ff ff0b 	bl	8003da4 <_malloc_r>
 8003f8e:	6028      	str	r0, [r5, #0]
 8003f90:	6128      	str	r0, [r5, #16]
 8003f92:	b920      	cbnz	r0, 8003f9e <_svfiprintf_r+0x2e>
 8003f94:	230c      	movs	r3, #12
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	e0d0      	b.n	8004140 <_svfiprintf_r+0x1d0>
 8003f9e:	2340      	movs	r3, #64	; 0x40
 8003fa0:	616b      	str	r3, [r5, #20]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fb0:	2330      	movs	r3, #48	; 0x30
 8003fb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004158 <_svfiprintf_r+0x1e8>
 8003fb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fba:	f04f 0901 	mov.w	r9, #1
 8003fbe:	4623      	mov	r3, r4
 8003fc0:	469a      	mov	sl, r3
 8003fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fc6:	b10a      	cbz	r2, 8003fcc <_svfiprintf_r+0x5c>
 8003fc8:	2a25      	cmp	r2, #37	; 0x25
 8003fca:	d1f9      	bne.n	8003fc0 <_svfiprintf_r+0x50>
 8003fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8003fd0:	d00b      	beq.n	8003fea <_svfiprintf_r+0x7a>
 8003fd2:	465b      	mov	r3, fp
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f7ff ff6f 	bl	8003ebc <__ssputs_r>
 8003fde:	3001      	adds	r0, #1
 8003fe0:	f000 80a9 	beq.w	8004136 <_svfiprintf_r+0x1c6>
 8003fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fe6:	445a      	add	r2, fp
 8003fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8003fea:	f89a 3000 	ldrb.w	r3, [sl]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 80a1 	beq.w	8004136 <_svfiprintf_r+0x1c6>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ffe:	f10a 0a01 	add.w	sl, sl, #1
 8004002:	9304      	str	r3, [sp, #16]
 8004004:	9307      	str	r3, [sp, #28]
 8004006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800400a:	931a      	str	r3, [sp, #104]	; 0x68
 800400c:	4654      	mov	r4, sl
 800400e:	2205      	movs	r2, #5
 8004010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004014:	4850      	ldr	r0, [pc, #320]	; (8004158 <_svfiprintf_r+0x1e8>)
 8004016:	f7fc f8e3 	bl	80001e0 <memchr>
 800401a:	9a04      	ldr	r2, [sp, #16]
 800401c:	b9d8      	cbnz	r0, 8004056 <_svfiprintf_r+0xe6>
 800401e:	06d0      	lsls	r0, r2, #27
 8004020:	bf44      	itt	mi
 8004022:	2320      	movmi	r3, #32
 8004024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004028:	0711      	lsls	r1, r2, #28
 800402a:	bf44      	itt	mi
 800402c:	232b      	movmi	r3, #43	; 0x2b
 800402e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004032:	f89a 3000 	ldrb.w	r3, [sl]
 8004036:	2b2a      	cmp	r3, #42	; 0x2a
 8004038:	d015      	beq.n	8004066 <_svfiprintf_r+0xf6>
 800403a:	9a07      	ldr	r2, [sp, #28]
 800403c:	4654      	mov	r4, sl
 800403e:	2000      	movs	r0, #0
 8004040:	f04f 0c0a 	mov.w	ip, #10
 8004044:	4621      	mov	r1, r4
 8004046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800404a:	3b30      	subs	r3, #48	; 0x30
 800404c:	2b09      	cmp	r3, #9
 800404e:	d94d      	bls.n	80040ec <_svfiprintf_r+0x17c>
 8004050:	b1b0      	cbz	r0, 8004080 <_svfiprintf_r+0x110>
 8004052:	9207      	str	r2, [sp, #28]
 8004054:	e014      	b.n	8004080 <_svfiprintf_r+0x110>
 8004056:	eba0 0308 	sub.w	r3, r0, r8
 800405a:	fa09 f303 	lsl.w	r3, r9, r3
 800405e:	4313      	orrs	r3, r2
 8004060:	9304      	str	r3, [sp, #16]
 8004062:	46a2      	mov	sl, r4
 8004064:	e7d2      	b.n	800400c <_svfiprintf_r+0x9c>
 8004066:	9b03      	ldr	r3, [sp, #12]
 8004068:	1d19      	adds	r1, r3, #4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	9103      	str	r1, [sp, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	bfbb      	ittet	lt
 8004072:	425b      	neglt	r3, r3
 8004074:	f042 0202 	orrlt.w	r2, r2, #2
 8004078:	9307      	strge	r3, [sp, #28]
 800407a:	9307      	strlt	r3, [sp, #28]
 800407c:	bfb8      	it	lt
 800407e:	9204      	strlt	r2, [sp, #16]
 8004080:	7823      	ldrb	r3, [r4, #0]
 8004082:	2b2e      	cmp	r3, #46	; 0x2e
 8004084:	d10c      	bne.n	80040a0 <_svfiprintf_r+0x130>
 8004086:	7863      	ldrb	r3, [r4, #1]
 8004088:	2b2a      	cmp	r3, #42	; 0x2a
 800408a:	d134      	bne.n	80040f6 <_svfiprintf_r+0x186>
 800408c:	9b03      	ldr	r3, [sp, #12]
 800408e:	1d1a      	adds	r2, r3, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	9203      	str	r2, [sp, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	bfb8      	it	lt
 8004098:	f04f 33ff 	movlt.w	r3, #4294967295
 800409c:	3402      	adds	r4, #2
 800409e:	9305      	str	r3, [sp, #20]
 80040a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004168 <_svfiprintf_r+0x1f8>
 80040a4:	7821      	ldrb	r1, [r4, #0]
 80040a6:	2203      	movs	r2, #3
 80040a8:	4650      	mov	r0, sl
 80040aa:	f7fc f899 	bl	80001e0 <memchr>
 80040ae:	b138      	cbz	r0, 80040c0 <_svfiprintf_r+0x150>
 80040b0:	9b04      	ldr	r3, [sp, #16]
 80040b2:	eba0 000a 	sub.w	r0, r0, sl
 80040b6:	2240      	movs	r2, #64	; 0x40
 80040b8:	4082      	lsls	r2, r0
 80040ba:	4313      	orrs	r3, r2
 80040bc:	3401      	adds	r4, #1
 80040be:	9304      	str	r3, [sp, #16]
 80040c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c4:	4825      	ldr	r0, [pc, #148]	; (800415c <_svfiprintf_r+0x1ec>)
 80040c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040ca:	2206      	movs	r2, #6
 80040cc:	f7fc f888 	bl	80001e0 <memchr>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	d038      	beq.n	8004146 <_svfiprintf_r+0x1d6>
 80040d4:	4b22      	ldr	r3, [pc, #136]	; (8004160 <_svfiprintf_r+0x1f0>)
 80040d6:	bb1b      	cbnz	r3, 8004120 <_svfiprintf_r+0x1b0>
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	3307      	adds	r3, #7
 80040dc:	f023 0307 	bic.w	r3, r3, #7
 80040e0:	3308      	adds	r3, #8
 80040e2:	9303      	str	r3, [sp, #12]
 80040e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e6:	4433      	add	r3, r6
 80040e8:	9309      	str	r3, [sp, #36]	; 0x24
 80040ea:	e768      	b.n	8003fbe <_svfiprintf_r+0x4e>
 80040ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80040f0:	460c      	mov	r4, r1
 80040f2:	2001      	movs	r0, #1
 80040f4:	e7a6      	b.n	8004044 <_svfiprintf_r+0xd4>
 80040f6:	2300      	movs	r3, #0
 80040f8:	3401      	adds	r4, #1
 80040fa:	9305      	str	r3, [sp, #20]
 80040fc:	4619      	mov	r1, r3
 80040fe:	f04f 0c0a 	mov.w	ip, #10
 8004102:	4620      	mov	r0, r4
 8004104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004108:	3a30      	subs	r2, #48	; 0x30
 800410a:	2a09      	cmp	r2, #9
 800410c:	d903      	bls.n	8004116 <_svfiprintf_r+0x1a6>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0c6      	beq.n	80040a0 <_svfiprintf_r+0x130>
 8004112:	9105      	str	r1, [sp, #20]
 8004114:	e7c4      	b.n	80040a0 <_svfiprintf_r+0x130>
 8004116:	fb0c 2101 	mla	r1, ip, r1, r2
 800411a:	4604      	mov	r4, r0
 800411c:	2301      	movs	r3, #1
 800411e:	e7f0      	b.n	8004102 <_svfiprintf_r+0x192>
 8004120:	ab03      	add	r3, sp, #12
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	462a      	mov	r2, r5
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <_svfiprintf_r+0x1f4>)
 8004128:	a904      	add	r1, sp, #16
 800412a:	4638      	mov	r0, r7
 800412c:	f3af 8000 	nop.w
 8004130:	1c42      	adds	r2, r0, #1
 8004132:	4606      	mov	r6, r0
 8004134:	d1d6      	bne.n	80040e4 <_svfiprintf_r+0x174>
 8004136:	89ab      	ldrh	r3, [r5, #12]
 8004138:	065b      	lsls	r3, r3, #25
 800413a:	f53f af2d 	bmi.w	8003f98 <_svfiprintf_r+0x28>
 800413e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004140:	b01d      	add	sp, #116	; 0x74
 8004142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004146:	ab03      	add	r3, sp, #12
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	462a      	mov	r2, r5
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <_svfiprintf_r+0x1f4>)
 800414e:	a904      	add	r1, sp, #16
 8004150:	4638      	mov	r0, r7
 8004152:	f000 f879 	bl	8004248 <_printf_i>
 8004156:	e7eb      	b.n	8004130 <_svfiprintf_r+0x1c0>
 8004158:	080045d8 	.word	0x080045d8
 800415c:	080045e2 	.word	0x080045e2
 8004160:	00000000 	.word	0x00000000
 8004164:	08003ebd 	.word	0x08003ebd
 8004168:	080045de 	.word	0x080045de

0800416c <_printf_common>:
 800416c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004170:	4616      	mov	r6, r2
 8004172:	4699      	mov	r9, r3
 8004174:	688a      	ldr	r2, [r1, #8]
 8004176:	690b      	ldr	r3, [r1, #16]
 8004178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800417c:	4293      	cmp	r3, r2
 800417e:	bfb8      	it	lt
 8004180:	4613      	movlt	r3, r2
 8004182:	6033      	str	r3, [r6, #0]
 8004184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004188:	4607      	mov	r7, r0
 800418a:	460c      	mov	r4, r1
 800418c:	b10a      	cbz	r2, 8004192 <_printf_common+0x26>
 800418e:	3301      	adds	r3, #1
 8004190:	6033      	str	r3, [r6, #0]
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	0699      	lsls	r1, r3, #26
 8004196:	bf42      	ittt	mi
 8004198:	6833      	ldrmi	r3, [r6, #0]
 800419a:	3302      	addmi	r3, #2
 800419c:	6033      	strmi	r3, [r6, #0]
 800419e:	6825      	ldr	r5, [r4, #0]
 80041a0:	f015 0506 	ands.w	r5, r5, #6
 80041a4:	d106      	bne.n	80041b4 <_printf_common+0x48>
 80041a6:	f104 0a19 	add.w	sl, r4, #25
 80041aa:	68e3      	ldr	r3, [r4, #12]
 80041ac:	6832      	ldr	r2, [r6, #0]
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	42ab      	cmp	r3, r5
 80041b2:	dc26      	bgt.n	8004202 <_printf_common+0x96>
 80041b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041b8:	1e13      	subs	r3, r2, #0
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	bf18      	it	ne
 80041be:	2301      	movne	r3, #1
 80041c0:	0692      	lsls	r2, r2, #26
 80041c2:	d42b      	bmi.n	800421c <_printf_common+0xb0>
 80041c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041c8:	4649      	mov	r1, r9
 80041ca:	4638      	mov	r0, r7
 80041cc:	47c0      	blx	r8
 80041ce:	3001      	adds	r0, #1
 80041d0:	d01e      	beq.n	8004210 <_printf_common+0xa4>
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	6922      	ldr	r2, [r4, #16]
 80041d6:	f003 0306 	and.w	r3, r3, #6
 80041da:	2b04      	cmp	r3, #4
 80041dc:	bf02      	ittt	eq
 80041de:	68e5      	ldreq	r5, [r4, #12]
 80041e0:	6833      	ldreq	r3, [r6, #0]
 80041e2:	1aed      	subeq	r5, r5, r3
 80041e4:	68a3      	ldr	r3, [r4, #8]
 80041e6:	bf0c      	ite	eq
 80041e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041ec:	2500      	movne	r5, #0
 80041ee:	4293      	cmp	r3, r2
 80041f0:	bfc4      	itt	gt
 80041f2:	1a9b      	subgt	r3, r3, r2
 80041f4:	18ed      	addgt	r5, r5, r3
 80041f6:	2600      	movs	r6, #0
 80041f8:	341a      	adds	r4, #26
 80041fa:	42b5      	cmp	r5, r6
 80041fc:	d11a      	bne.n	8004234 <_printf_common+0xc8>
 80041fe:	2000      	movs	r0, #0
 8004200:	e008      	b.n	8004214 <_printf_common+0xa8>
 8004202:	2301      	movs	r3, #1
 8004204:	4652      	mov	r2, sl
 8004206:	4649      	mov	r1, r9
 8004208:	4638      	mov	r0, r7
 800420a:	47c0      	blx	r8
 800420c:	3001      	adds	r0, #1
 800420e:	d103      	bne.n	8004218 <_printf_common+0xac>
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004218:	3501      	adds	r5, #1
 800421a:	e7c6      	b.n	80041aa <_printf_common+0x3e>
 800421c:	18e1      	adds	r1, r4, r3
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	2030      	movs	r0, #48	; 0x30
 8004222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004226:	4422      	add	r2, r4
 8004228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800422c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004230:	3302      	adds	r3, #2
 8004232:	e7c7      	b.n	80041c4 <_printf_common+0x58>
 8004234:	2301      	movs	r3, #1
 8004236:	4622      	mov	r2, r4
 8004238:	4649      	mov	r1, r9
 800423a:	4638      	mov	r0, r7
 800423c:	47c0      	blx	r8
 800423e:	3001      	adds	r0, #1
 8004240:	d0e6      	beq.n	8004210 <_printf_common+0xa4>
 8004242:	3601      	adds	r6, #1
 8004244:	e7d9      	b.n	80041fa <_printf_common+0x8e>
	...

08004248 <_printf_i>:
 8004248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	7e0f      	ldrb	r7, [r1, #24]
 800424e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004250:	2f78      	cmp	r7, #120	; 0x78
 8004252:	4691      	mov	r9, r2
 8004254:	4680      	mov	r8, r0
 8004256:	460c      	mov	r4, r1
 8004258:	469a      	mov	sl, r3
 800425a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800425e:	d807      	bhi.n	8004270 <_printf_i+0x28>
 8004260:	2f62      	cmp	r7, #98	; 0x62
 8004262:	d80a      	bhi.n	800427a <_printf_i+0x32>
 8004264:	2f00      	cmp	r7, #0
 8004266:	f000 80d4 	beq.w	8004412 <_printf_i+0x1ca>
 800426a:	2f58      	cmp	r7, #88	; 0x58
 800426c:	f000 80c0 	beq.w	80043f0 <_printf_i+0x1a8>
 8004270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004278:	e03a      	b.n	80042f0 <_printf_i+0xa8>
 800427a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800427e:	2b15      	cmp	r3, #21
 8004280:	d8f6      	bhi.n	8004270 <_printf_i+0x28>
 8004282:	a101      	add	r1, pc, #4	; (adr r1, 8004288 <_printf_i+0x40>)
 8004284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004288:	080042e1 	.word	0x080042e1
 800428c:	080042f5 	.word	0x080042f5
 8004290:	08004271 	.word	0x08004271
 8004294:	08004271 	.word	0x08004271
 8004298:	08004271 	.word	0x08004271
 800429c:	08004271 	.word	0x08004271
 80042a0:	080042f5 	.word	0x080042f5
 80042a4:	08004271 	.word	0x08004271
 80042a8:	08004271 	.word	0x08004271
 80042ac:	08004271 	.word	0x08004271
 80042b0:	08004271 	.word	0x08004271
 80042b4:	080043f9 	.word	0x080043f9
 80042b8:	08004321 	.word	0x08004321
 80042bc:	080043b3 	.word	0x080043b3
 80042c0:	08004271 	.word	0x08004271
 80042c4:	08004271 	.word	0x08004271
 80042c8:	0800441b 	.word	0x0800441b
 80042cc:	08004271 	.word	0x08004271
 80042d0:	08004321 	.word	0x08004321
 80042d4:	08004271 	.word	0x08004271
 80042d8:	08004271 	.word	0x08004271
 80042dc:	080043bb 	.word	0x080043bb
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	1d1a      	adds	r2, r3, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	602a      	str	r2, [r5, #0]
 80042e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042f0:	2301      	movs	r3, #1
 80042f2:	e09f      	b.n	8004434 <_printf_i+0x1ec>
 80042f4:	6820      	ldr	r0, [r4, #0]
 80042f6:	682b      	ldr	r3, [r5, #0]
 80042f8:	0607      	lsls	r7, r0, #24
 80042fa:	f103 0104 	add.w	r1, r3, #4
 80042fe:	6029      	str	r1, [r5, #0]
 8004300:	d501      	bpl.n	8004306 <_printf_i+0xbe>
 8004302:	681e      	ldr	r6, [r3, #0]
 8004304:	e003      	b.n	800430e <_printf_i+0xc6>
 8004306:	0646      	lsls	r6, r0, #25
 8004308:	d5fb      	bpl.n	8004302 <_printf_i+0xba>
 800430a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800430e:	2e00      	cmp	r6, #0
 8004310:	da03      	bge.n	800431a <_printf_i+0xd2>
 8004312:	232d      	movs	r3, #45	; 0x2d
 8004314:	4276      	negs	r6, r6
 8004316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431a:	485a      	ldr	r0, [pc, #360]	; (8004484 <_printf_i+0x23c>)
 800431c:	230a      	movs	r3, #10
 800431e:	e012      	b.n	8004346 <_printf_i+0xfe>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	6820      	ldr	r0, [r4, #0]
 8004324:	1d19      	adds	r1, r3, #4
 8004326:	6029      	str	r1, [r5, #0]
 8004328:	0605      	lsls	r5, r0, #24
 800432a:	d501      	bpl.n	8004330 <_printf_i+0xe8>
 800432c:	681e      	ldr	r6, [r3, #0]
 800432e:	e002      	b.n	8004336 <_printf_i+0xee>
 8004330:	0641      	lsls	r1, r0, #25
 8004332:	d5fb      	bpl.n	800432c <_printf_i+0xe4>
 8004334:	881e      	ldrh	r6, [r3, #0]
 8004336:	4853      	ldr	r0, [pc, #332]	; (8004484 <_printf_i+0x23c>)
 8004338:	2f6f      	cmp	r7, #111	; 0x6f
 800433a:	bf0c      	ite	eq
 800433c:	2308      	moveq	r3, #8
 800433e:	230a      	movne	r3, #10
 8004340:	2100      	movs	r1, #0
 8004342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004346:	6865      	ldr	r5, [r4, #4]
 8004348:	60a5      	str	r5, [r4, #8]
 800434a:	2d00      	cmp	r5, #0
 800434c:	bfa2      	ittt	ge
 800434e:	6821      	ldrge	r1, [r4, #0]
 8004350:	f021 0104 	bicge.w	r1, r1, #4
 8004354:	6021      	strge	r1, [r4, #0]
 8004356:	b90e      	cbnz	r6, 800435c <_printf_i+0x114>
 8004358:	2d00      	cmp	r5, #0
 800435a:	d04b      	beq.n	80043f4 <_printf_i+0x1ac>
 800435c:	4615      	mov	r5, r2
 800435e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004362:	fb03 6711 	mls	r7, r3, r1, r6
 8004366:	5dc7      	ldrb	r7, [r0, r7]
 8004368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800436c:	4637      	mov	r7, r6
 800436e:	42bb      	cmp	r3, r7
 8004370:	460e      	mov	r6, r1
 8004372:	d9f4      	bls.n	800435e <_printf_i+0x116>
 8004374:	2b08      	cmp	r3, #8
 8004376:	d10b      	bne.n	8004390 <_printf_i+0x148>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	07de      	lsls	r6, r3, #31
 800437c:	d508      	bpl.n	8004390 <_printf_i+0x148>
 800437e:	6923      	ldr	r3, [r4, #16]
 8004380:	6861      	ldr	r1, [r4, #4]
 8004382:	4299      	cmp	r1, r3
 8004384:	bfde      	ittt	le
 8004386:	2330      	movle	r3, #48	; 0x30
 8004388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800438c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004390:	1b52      	subs	r2, r2, r5
 8004392:	6122      	str	r2, [r4, #16]
 8004394:	f8cd a000 	str.w	sl, [sp]
 8004398:	464b      	mov	r3, r9
 800439a:	aa03      	add	r2, sp, #12
 800439c:	4621      	mov	r1, r4
 800439e:	4640      	mov	r0, r8
 80043a0:	f7ff fee4 	bl	800416c <_printf_common>
 80043a4:	3001      	adds	r0, #1
 80043a6:	d14a      	bne.n	800443e <_printf_i+0x1f6>
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	b004      	add	sp, #16
 80043ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	f043 0320 	orr.w	r3, r3, #32
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	4833      	ldr	r0, [pc, #204]	; (8004488 <_printf_i+0x240>)
 80043bc:	2778      	movs	r7, #120	; 0x78
 80043be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	6829      	ldr	r1, [r5, #0]
 80043c6:	061f      	lsls	r7, r3, #24
 80043c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80043cc:	d402      	bmi.n	80043d4 <_printf_i+0x18c>
 80043ce:	065f      	lsls	r7, r3, #25
 80043d0:	bf48      	it	mi
 80043d2:	b2b6      	uxthmi	r6, r6
 80043d4:	07df      	lsls	r7, r3, #31
 80043d6:	bf48      	it	mi
 80043d8:	f043 0320 	orrmi.w	r3, r3, #32
 80043dc:	6029      	str	r1, [r5, #0]
 80043de:	bf48      	it	mi
 80043e0:	6023      	strmi	r3, [r4, #0]
 80043e2:	b91e      	cbnz	r6, 80043ec <_printf_i+0x1a4>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	f023 0320 	bic.w	r3, r3, #32
 80043ea:	6023      	str	r3, [r4, #0]
 80043ec:	2310      	movs	r3, #16
 80043ee:	e7a7      	b.n	8004340 <_printf_i+0xf8>
 80043f0:	4824      	ldr	r0, [pc, #144]	; (8004484 <_printf_i+0x23c>)
 80043f2:	e7e4      	b.n	80043be <_printf_i+0x176>
 80043f4:	4615      	mov	r5, r2
 80043f6:	e7bd      	b.n	8004374 <_printf_i+0x12c>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	6826      	ldr	r6, [r4, #0]
 80043fc:	6961      	ldr	r1, [r4, #20]
 80043fe:	1d18      	adds	r0, r3, #4
 8004400:	6028      	str	r0, [r5, #0]
 8004402:	0635      	lsls	r5, r6, #24
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	d501      	bpl.n	800440c <_printf_i+0x1c4>
 8004408:	6019      	str	r1, [r3, #0]
 800440a:	e002      	b.n	8004412 <_printf_i+0x1ca>
 800440c:	0670      	lsls	r0, r6, #25
 800440e:	d5fb      	bpl.n	8004408 <_printf_i+0x1c0>
 8004410:	8019      	strh	r1, [r3, #0]
 8004412:	2300      	movs	r3, #0
 8004414:	6123      	str	r3, [r4, #16]
 8004416:	4615      	mov	r5, r2
 8004418:	e7bc      	b.n	8004394 <_printf_i+0x14c>
 800441a:	682b      	ldr	r3, [r5, #0]
 800441c:	1d1a      	adds	r2, r3, #4
 800441e:	602a      	str	r2, [r5, #0]
 8004420:	681d      	ldr	r5, [r3, #0]
 8004422:	6862      	ldr	r2, [r4, #4]
 8004424:	2100      	movs	r1, #0
 8004426:	4628      	mov	r0, r5
 8004428:	f7fb feda 	bl	80001e0 <memchr>
 800442c:	b108      	cbz	r0, 8004432 <_printf_i+0x1ea>
 800442e:	1b40      	subs	r0, r0, r5
 8004430:	6060      	str	r0, [r4, #4]
 8004432:	6863      	ldr	r3, [r4, #4]
 8004434:	6123      	str	r3, [r4, #16]
 8004436:	2300      	movs	r3, #0
 8004438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800443c:	e7aa      	b.n	8004394 <_printf_i+0x14c>
 800443e:	6923      	ldr	r3, [r4, #16]
 8004440:	462a      	mov	r2, r5
 8004442:	4649      	mov	r1, r9
 8004444:	4640      	mov	r0, r8
 8004446:	47d0      	blx	sl
 8004448:	3001      	adds	r0, #1
 800444a:	d0ad      	beq.n	80043a8 <_printf_i+0x160>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	079b      	lsls	r3, r3, #30
 8004450:	d413      	bmi.n	800447a <_printf_i+0x232>
 8004452:	68e0      	ldr	r0, [r4, #12]
 8004454:	9b03      	ldr	r3, [sp, #12]
 8004456:	4298      	cmp	r0, r3
 8004458:	bfb8      	it	lt
 800445a:	4618      	movlt	r0, r3
 800445c:	e7a6      	b.n	80043ac <_printf_i+0x164>
 800445e:	2301      	movs	r3, #1
 8004460:	4632      	mov	r2, r6
 8004462:	4649      	mov	r1, r9
 8004464:	4640      	mov	r0, r8
 8004466:	47d0      	blx	sl
 8004468:	3001      	adds	r0, #1
 800446a:	d09d      	beq.n	80043a8 <_printf_i+0x160>
 800446c:	3501      	adds	r5, #1
 800446e:	68e3      	ldr	r3, [r4, #12]
 8004470:	9903      	ldr	r1, [sp, #12]
 8004472:	1a5b      	subs	r3, r3, r1
 8004474:	42ab      	cmp	r3, r5
 8004476:	dcf2      	bgt.n	800445e <_printf_i+0x216>
 8004478:	e7eb      	b.n	8004452 <_printf_i+0x20a>
 800447a:	2500      	movs	r5, #0
 800447c:	f104 0619 	add.w	r6, r4, #25
 8004480:	e7f5      	b.n	800446e <_printf_i+0x226>
 8004482:	bf00      	nop
 8004484:	080045e9 	.word	0x080045e9
 8004488:	080045fa 	.word	0x080045fa

0800448c <memmove>:
 800448c:	4288      	cmp	r0, r1
 800448e:	b510      	push	{r4, lr}
 8004490:	eb01 0402 	add.w	r4, r1, r2
 8004494:	d902      	bls.n	800449c <memmove+0x10>
 8004496:	4284      	cmp	r4, r0
 8004498:	4623      	mov	r3, r4
 800449a:	d807      	bhi.n	80044ac <memmove+0x20>
 800449c:	1e43      	subs	r3, r0, #1
 800449e:	42a1      	cmp	r1, r4
 80044a0:	d008      	beq.n	80044b4 <memmove+0x28>
 80044a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044aa:	e7f8      	b.n	800449e <memmove+0x12>
 80044ac:	4402      	add	r2, r0
 80044ae:	4601      	mov	r1, r0
 80044b0:	428a      	cmp	r2, r1
 80044b2:	d100      	bne.n	80044b6 <memmove+0x2a>
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044be:	e7f7      	b.n	80044b0 <memmove+0x24>

080044c0 <_sbrk_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4d06      	ldr	r5, [pc, #24]	; (80044dc <_sbrk_r+0x1c>)
 80044c4:	2300      	movs	r3, #0
 80044c6:	4604      	mov	r4, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	f7fc faca 	bl	8000a64 <_sbrk>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_sbrk_r+0x1a>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	b103      	cbz	r3, 80044da <_sbrk_r+0x1a>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	2000082c 	.word	0x2000082c

080044e0 <memcpy>:
 80044e0:	440a      	add	r2, r1
 80044e2:	4291      	cmp	r1, r2
 80044e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044e8:	d100      	bne.n	80044ec <memcpy+0xc>
 80044ea:	4770      	bx	lr
 80044ec:	b510      	push	{r4, lr}
 80044ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044f6:	4291      	cmp	r1, r2
 80044f8:	d1f9      	bne.n	80044ee <memcpy+0xe>
 80044fa:	bd10      	pop	{r4, pc}

080044fc <_realloc_r>:
 80044fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004500:	4680      	mov	r8, r0
 8004502:	4614      	mov	r4, r2
 8004504:	460e      	mov	r6, r1
 8004506:	b921      	cbnz	r1, 8004512 <_realloc_r+0x16>
 8004508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800450c:	4611      	mov	r1, r2
 800450e:	f7ff bc49 	b.w	8003da4 <_malloc_r>
 8004512:	b92a      	cbnz	r2, 8004520 <_realloc_r+0x24>
 8004514:	f7ff fbda 	bl	8003ccc <_free_r>
 8004518:	4625      	mov	r5, r4
 800451a:	4628      	mov	r0, r5
 800451c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004520:	f000 f81b 	bl	800455a <_malloc_usable_size_r>
 8004524:	4284      	cmp	r4, r0
 8004526:	4607      	mov	r7, r0
 8004528:	d802      	bhi.n	8004530 <_realloc_r+0x34>
 800452a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800452e:	d812      	bhi.n	8004556 <_realloc_r+0x5a>
 8004530:	4621      	mov	r1, r4
 8004532:	4640      	mov	r0, r8
 8004534:	f7ff fc36 	bl	8003da4 <_malloc_r>
 8004538:	4605      	mov	r5, r0
 800453a:	2800      	cmp	r0, #0
 800453c:	d0ed      	beq.n	800451a <_realloc_r+0x1e>
 800453e:	42bc      	cmp	r4, r7
 8004540:	4622      	mov	r2, r4
 8004542:	4631      	mov	r1, r6
 8004544:	bf28      	it	cs
 8004546:	463a      	movcs	r2, r7
 8004548:	f7ff ffca 	bl	80044e0 <memcpy>
 800454c:	4631      	mov	r1, r6
 800454e:	4640      	mov	r0, r8
 8004550:	f7ff fbbc 	bl	8003ccc <_free_r>
 8004554:	e7e1      	b.n	800451a <_realloc_r+0x1e>
 8004556:	4635      	mov	r5, r6
 8004558:	e7df      	b.n	800451a <_realloc_r+0x1e>

0800455a <_malloc_usable_size_r>:
 800455a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800455e:	1f18      	subs	r0, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	bfbc      	itt	lt
 8004564:	580b      	ldrlt	r3, [r1, r0]
 8004566:	18c0      	addlt	r0, r0, r3
 8004568:	4770      	bx	lr
	...

0800456c <_init>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	bf00      	nop
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr

08004578 <_fini>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr

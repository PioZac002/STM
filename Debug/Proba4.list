
Proba4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a4  080065a4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ac  080065ac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080065b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e0c  20000068  0800661c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e74  0800661c  00020e74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdc4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002115  00000000  00000000  0002ce9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000831  00000000  00000000  0002fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cb6  00000000  00000000  000302a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d620  00000000  00000000  00056f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea29f  00000000  00000000  0006457f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003768  00000000  00000000  0014e820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00151f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006170 	.word	0x08006170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006170 	.word	0x08006170

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <USART_khbit>:
	}
}

//Zwraca 0, jesli bufor jest pusty. Natomiast 1, jezeli w buforze cos sie znajduje
uint8_t USART_khbit()
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	if (USART_RX_Empty == USART_RX_Busy)
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <USART_khbit+0x24>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <USART_khbit+0x28>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d101      	bne.n	80005b4 <USART_khbit+0x18>
		return 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e000      	b.n	80005b6 <USART_khbit+0x1a>
	else
		return 1;
 80005b4:	2301      	movs	r3, #1
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	200008fc 	.word	0x200008fc
 80005c4:	200008fe 	.word	0x200008fe

080005c8 <USART_getchar>:

//Pobieranie znaku z bufora
int16_t USART_getchar()
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
	uint8_t temp;
	if (USART_RX_Empty != USART_RX_Busy){
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <USART_getchar+0x5c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <USART_getchar+0x60>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	429a      	cmp	r2, r3
 80005dc:	d019      	beq.n	8000612 <USART_getchar+0x4a>
		temp = USART_RxBuf[USART_RX_Busy];
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <USART_getchar+0x60>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <USART_getchar+0x64>)
 80005e8:	5c9b      	ldrb	r3, [r3, r2]
 80005ea:	71fb      	strb	r3, [r7, #7]
		USART_RX_Busy++;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <USART_getchar+0x60>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	3301      	adds	r3, #1
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <USART_getchar+0x60>)
 80005f8:	801a      	strh	r2, [r3, #0]

		if (USART_RX_Busy >= USART_RXBUF_LEN)
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <USART_getchar+0x60>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000604:	d302      	bcc.n	800060c <USART_getchar+0x44>
			USART_RX_Busy = 0;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <USART_getchar+0x60>)
 8000608:	2200      	movs	r2, #0
 800060a:	801a      	strh	r2, [r3, #0]

		return temp;
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	b21b      	sxth	r3, r3
 8000610:	e001      	b.n	8000616 <USART_getchar+0x4e>
	}
	else return -1;
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
	// Zwraca -1, jezeli nic nie znajduje sie w buforze
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	200008fc 	.word	0x200008fc
 8000628:	200008fe 	.word	0x200008fe
 800062c:	200006f8 	.word	0x200006f8

08000630 <USART_fsend>:
	return 0;
}

//Dopisywanie do bufora nadawczego
void USART_fsend(char* format,...)
{
 8000630:	b40f      	push	{r0, r1, r2, r3}
 8000632:	b580      	push	{r7, lr}
 8000634:	b0a4      	sub	sp, #144	; 0x90
 8000636:	af00      	add	r7, sp, #0
	char tmp_rx[128];
	int i;
	__IO int idx;

	va_list arglist;
	va_start(arglist, format);
 8000638:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800063c:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_rx, format, arglist);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000648:	4618      	mov	r0, r3
 800064a:	f004 fdad 	bl	80051a8 <vsiprintf>
	va_end(arglist);

	idx=USART_TX_Empty;
 800064e:	4b34      	ldr	r3, [pc, #208]	; (8000720 <USART_fsend+0xf0>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	b29b      	uxth	r3, r3
 8000654:	60bb      	str	r3, [r7, #8]

	for (i = 0 ; i < strlen(tmp_rx);i++)
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800065c:	e016      	b.n	800068c <USART_fsend+0x5c>
	{
		USART_TxBuf[idx]=tmp_rx[i];
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	f107 010c 	add.w	r1, r7, #12
 8000664:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000668:	440a      	add	r2, r1
 800066a:	7811      	ldrb	r1, [r2, #0]
 800066c:	4a2d      	ldr	r2, [pc, #180]	; (8000724 <USART_fsend+0xf4>)
 800066e:	54d1      	strb	r1, [r2, r3]
		idx++;
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	3301      	adds	r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
		if (idx>=USART_TXBUF_LEN){
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 800067c:	db01      	blt.n	8000682 <USART_fsend+0x52>
			idx =0;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
	for (i = 0 ; i < strlen(tmp_rx);i++)
 8000682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000686:	3301      	adds	r3, #1
 8000688:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fda7 	bl	80001e4 <strlen>
 8000696:	4602      	mov	r2, r0
 8000698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800069c:	429a      	cmp	r2, r3
 800069e:	d8de      	bhi.n	800065e <USART_fsend+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
		}
	}

	__disable_irq(); //Blokuje przerwania w sposób softwerowy
	if ((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET))
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <USART_fsend+0xf0>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <USART_fsend+0xf8>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d128      	bne.n	8000706 <USART_fsend+0xd6>
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <USART_fsend+0xfc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	2b80      	cmp	r3, #128	; 0x80
 80006c0:	d121      	bne.n	8000706 <USART_fsend+0xd6>
	{
		USART_TX_Empty=idx;
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <USART_fsend+0xf0>)
 80006c8:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = USART_TxBuf[USART_TX_Busy];
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <USART_fsend+0xf8>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <USART_fsend+0xf4>)
 80006d4:	5c9b      	ldrb	r3, [r3, r2]
 80006d6:	70fb      	strb	r3, [r7, #3]
		USART_TX_Busy++;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <USART_fsend+0xf8>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	3301      	adds	r3, #1
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <USART_fsend+0xf8>)
 80006e4:	801a      	strh	r2, [r3, #0]
		if (USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <USART_fsend+0xf8>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 80006f0:	d302      	bcc.n	80006f8 <USART_fsend+0xc8>
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <USART_fsend+0xf8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006f8:	1cfb      	adds	r3, r7, #3
 80006fa:	2201      	movs	r2, #1
 80006fc:	4619      	mov	r1, r3
 80006fe:	480b      	ldr	r0, [pc, #44]	; (800072c <USART_fsend+0xfc>)
 8000700:	f002 fe66 	bl	80033d0 <HAL_UART_Transmit_IT>
	{
 8000704:	e003      	b.n	800070e <USART_fsend+0xde>
	}
	else
		USART_TX_Empty = idx;
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <USART_fsend+0xf0>)
 800070c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800070e:	b662      	cpsie	i
}
 8000710:	bf00      	nop

	__enable_irq();
}
 8000712:	bf00      	nop
 8000714:	3790      	adds	r7, #144	; 0x90
 8000716:	46bd      	mov	sp, r7
 8000718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800071c:	b004      	add	sp, #16
 800071e:	4770      	bx	lr
 8000720:	200008f8 	.word	0x200008f8
 8000724:	20000110 	.word	0x20000110
 8000728:	200008fa 	.word	0x200008fa
 800072c:	20000084 	.word	0x20000084

08000730 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a16      	ldr	r2, [pc, #88]	; (8000794 <HAL_UART_TxCpltCallback+0x64>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d125      	bne.n	800078c <HAL_UART_TxCpltCallback+0x5c>
	{
		if (USART_TX_Empty != USART_TX_Busy)
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_UART_TxCpltCallback+0x68>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	b29a      	uxth	r2, r3
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_UART_TxCpltCallback+0x6c>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	429a      	cmp	r2, r3
 800074e:	d01d      	beq.n	800078c <HAL_UART_TxCpltCallback+0x5c>
		{
			uint8_t temp = USART_TxBuf[USART_TX_Busy];
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_UART_TxCpltCallback+0x6c>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	b29b      	uxth	r3, r3
 8000756:	461a      	mov	r2, r3
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_UART_TxCpltCallback+0x70>)
 800075a:	5c9b      	ldrb	r3, [r3, r2]
 800075c:	73fb      	strb	r3, [r7, #15]
			USART_TX_Busy++;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_UART_TxCpltCallback+0x6c>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	b29b      	uxth	r3, r3
 8000764:	3301      	adds	r3, #1
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_UART_TxCpltCallback+0x6c>)
 800076a:	801a      	strh	r2, [r3, #0]
			if (USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy =0;
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <HAL_UART_TxCpltCallback+0x6c>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	b29b      	uxth	r3, r3
 8000772:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8000776:	d302      	bcc.n	800077e <HAL_UART_TxCpltCallback+0x4e>
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_UART_TxCpltCallback+0x6c>)
 800077a:	2200      	movs	r2, #0
 800077c:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &temp, 1);
 800077e:	f107 030f 	add.w	r3, r7, #15
 8000782:	2201      	movs	r2, #1
 8000784:	4619      	mov	r1, r3
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <HAL_UART_TxCpltCallback+0x64>)
 8000788:	f002 fe22 	bl	80033d0 <HAL_UART_Transmit_IT>
		}
	}
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000084 	.word	0x20000084
 8000798:	200008f8 	.word	0x200008f8
 800079c:	200008fa 	.word	0x200008fa
 80007a0:	20000110 	.word	0x20000110

080007a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <HAL_UART_RxCpltCallback+0x50>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d11a      	bne.n	80007ea <HAL_UART_RxCpltCallback+0x46>
	{
		USART_RX_Empty++;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <HAL_UART_RxCpltCallback+0x54>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	3301      	adds	r3, #1
 80007bc:	b29a      	uxth	r2, r3
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_UART_RxCpltCallback+0x54>)
 80007c0:	801a      	strh	r2, [r3, #0]
			if (USART_RX_Empty >= USART_RXBUF_LEN) USART_RX_Empty = 0;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <HAL_UART_RxCpltCallback+0x54>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007cc:	d302      	bcc.n	80007d4 <HAL_UART_RxCpltCallback+0x30>
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_UART_RxCpltCallback+0x54>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	801a      	strh	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &USART_RxBuf[USART_RX_Empty], 1);
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_UART_RxCpltCallback+0x54>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <HAL_UART_RxCpltCallback+0x58>)
 80007de:	4413      	add	r3, r2
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <HAL_UART_RxCpltCallback+0x50>)
 80007e6:	f002 fe51 	bl	800348c <HAL_UART_Receive_IT>
	}
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000084 	.word	0x20000084
 80007f8:	200008fc 	.word	0x200008fc
 80007fc:	200006f8 	.word	0x200006f8

08000800 <calculateChecksum>:

uint8_t calculateChecksum(char* command, uint8_t size)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	81fb      	strh	r3, [r7, #14]
	int i;

	for(i = 0; i < size; i++)
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	e00a      	b.n	800082c <calculateChecksum+0x2c>
	{
		checksum += (int)command[i];
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b29a      	uxth	r2, r3
 8000820:	89fb      	ldrh	r3, [r7, #14]
 8000822:	4413      	add	r3, r2
 8000824:	81fb      	strh	r3, [r7, #14]
	for(i = 0; i < size; i++)
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	3301      	adds	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbf0      	blt.n	8000816 <calculateChecksum+0x16>
	}
	checksum %= 100;
 8000834:	89fb      	ldrh	r3, [r7, #14]
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <calculateChecksum+0x58>)
 8000838:	fba2 1203 	umull	r1, r2, r2, r3
 800083c:	0952      	lsrs	r2, r2, #5
 800083e:	2164      	movs	r1, #100	; 0x64
 8000840:	fb01 f202 	mul.w	r2, r1, r2
 8000844:	1a9b      	subs	r3, r3, r2
 8000846:	81fb      	strh	r3, [r7, #14]

	return checksum;
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	b2db      	uxtb	r3, r3
}
 800084c:	4618      	mov	r0, r3
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	51eb851f 	.word	0x51eb851f

0800085c <getArchiveValue>:

int16_t getArchiveValue(uint16_t i)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
	int pointer = measurement.current - i;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <getArchiveValue+0x3c>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	60fb      	str	r3, [r7, #12]

	if(pointer < 0)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2b00      	cmp	r3, #0
 8000876:	da03      	bge.n	8000880 <getArchiveValue+0x24>
	{
		pointer = 511 + pointer;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800087e:	60fb      	str	r3, [r7, #12]
	}

	return measurement.data[pointer];
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <getArchiveValue+0x3c>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	2000091c 	.word	0x2000091c

0800089c <sendFrame>:

void sendFrame(char* data)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	int dataLength = strlen(data);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff fc9d 	bl	80001e4 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	60fb      	str	r3, [r7, #12]

	USART_fsend(":STMPC0%03d%s%02d;", dataLength, data, calculateChecksum(data, dataLength));
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ffa3 	bl	8000800 <calculateChecksum>
 80008ba:	4603      	mov	r3, r0
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	68f9      	ldr	r1, [r7, #12]
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <sendFrame+0x34>)
 80008c2:	f7ff feb5 	bl	8000630 <USART_fsend>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	08006188 	.word	0x08006188

080008d4 <executeCommand>:

void executeCommand()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
	// Odczytywanie komendy
	int i;
	int j;
	char* tmp = malloc(frame.dataSize * sizeof(char) + 1);
 80008da:	4b82      	ldr	r3, [pc, #520]	; (8000ae4 <executeCommand+0x210>)
 80008dc:	7b1b      	ldrb	r3, [r3, #12]
 80008de:	3301      	adds	r3, #1
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 f979 	bl	8004bd8 <malloc>
 80008e6:	4603      	mov	r3, r0
 80008e8:	60fb      	str	r3, [r7, #12]
	uint8_t detectedParameter = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	74fb      	strb	r3, [r7, #19]

	for(i = 0; i < frame.dataSize; i++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e015      	b.n	8000920 <executeCommand+0x4c>
	{
		if(frame.data[i] == ' ')
 80008f4:	4b7b      	ldr	r3, [pc, #492]	; (8000ae4 <executeCommand+0x210>)
 80008f6:	691a      	ldr	r2, [r3, #16]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b20      	cmp	r3, #32
 8000900:	d102      	bne.n	8000908 <executeCommand+0x34>
		{
			detectedParameter = 1;
 8000902:	2301      	movs	r3, #1
 8000904:	74fb      	strb	r3, [r7, #19]
			break;
 8000906:	e011      	b.n	800092c <executeCommand+0x58>
		}
		tmp[i] = frame.data[i];
 8000908:	4b76      	ldr	r3, [pc, #472]	; (8000ae4 <executeCommand+0x210>)
 800090a:	691a      	ldr	r2, [r3, #16]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	441a      	add	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	68f9      	ldr	r1, [r7, #12]
 8000914:	440b      	add	r3, r1
 8000916:	7812      	ldrb	r2, [r2, #0]
 8000918:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < frame.dataSize; i++)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	4b70      	ldr	r3, [pc, #448]	; (8000ae4 <executeCommand+0x210>)
 8000922:	7b1b      	ldrb	r3, [r3, #12]
 8000924:	461a      	mov	r2, r3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	4293      	cmp	r3, r2
 800092a:	dbe3      	blt.n	80008f4 <executeCommand+0x20>
	}
	tmp[i] = 0;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4413      	add	r3, r2
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]

	// Odczyt interwału pomiarowego
	if(strcmp(tmp, "GT") == 0)
 8000936:	496c      	ldr	r1, [pc, #432]	; (8000ae8 <executeCommand+0x214>)
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f7ff fc49 	bl	80001d0 <strcmp>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d111      	bne.n	8000968 <executeCommand+0x94>
	{
		sprintf(tmp, "STV %d", measurement.interval);
 8000944:	4b69      	ldr	r3, [pc, #420]	; (8000aec <executeCommand+0x218>)
 8000946:	885b      	ldrh	r3, [r3, #2]
 8000948:	461a      	mov	r2, r3
 800094a:	4969      	ldr	r1, [pc, #420]	; (8000af0 <executeCommand+0x21c>)
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f004 fbb1 	bl	80050b4 <siprintf>
		sprintf(tmp, "Aktualny interwal wynosi: %d", measurement.interval);
 8000952:	4b66      	ldr	r3, [pc, #408]	; (8000aec <executeCommand+0x218>)
 8000954:	885b      	ldrh	r3, [r3, #2]
 8000956:	461a      	mov	r2, r3
 8000958:	4966      	ldr	r1, [pc, #408]	; (8000af4 <executeCommand+0x220>)
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f004 fbaa 	bl	80050b4 <siprintf>
		sendFrame(tmp);
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f7ff ff9b 	bl	800089c <sendFrame>
		return;
 8000966:	e0b9      	b.n	8000adc <executeCommand+0x208>
	}
	// Odczyt aktualnej wartości
	else if(strcmp(tmp, "GM") == 0)
 8000968:	4963      	ldr	r1, [pc, #396]	; (8000af8 <executeCommand+0x224>)
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f7ff fc30 	bl	80001d0 <strcmp>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10f      	bne.n	8000996 <executeCommand+0xc2>
	{

		sprintf(tmp, "Odczytywanie aktualnej wartosci: SM %d", measurement.data[measurement.current]);
 8000976:	4b5d      	ldr	r3, [pc, #372]	; (8000aec <executeCommand+0x218>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4a5c      	ldr	r2, [pc, #368]	; (8000aec <executeCommand+0x218>)
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000984:	461a      	mov	r2, r3
 8000986:	495d      	ldr	r1, [pc, #372]	; (8000afc <executeCommand+0x228>)
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f004 fb93 	bl	80050b4 <siprintf>
		sendFrame(tmp);
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff ff84 	bl	800089c <sendFrame>
		return;
 8000994:	e0a2      	b.n	8000adc <executeCommand+0x208>
	}
	// Ustawienie interwału pomiarowego
	else if(strcmp(tmp, "ST") == 0)
 8000996:	495a      	ldr	r1, [pc, #360]	; (8000b00 <executeCommand+0x22c>)
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fc19 	bl	80001d0 <strcmp>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d149      	bne.n	8000a38 <executeCommand+0x164>
	{
		if(detectedParameter == 0)
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d107      	bne.n	80009ba <executeCommand+0xe6>
		{
			// Brak argumentu
			sprintf(tmp, "ERRARGV");
 80009aa:	4956      	ldr	r1, [pc, #344]	; (8000b04 <executeCommand+0x230>)
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f004 fb81 	bl	80050b4 <siprintf>
			sendFrame(tmp);
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f7ff ff72 	bl	800089c <sendFrame>
			return;
 80009b8:	e090      	b.n	8000adc <executeCommand+0x208>
		}
		else
		{
			for(i = 3; i < frame.dataSize; i++)
 80009ba:	2303      	movs	r3, #3
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e00c      	b.n	80009da <executeCommand+0x106>
			{
				tmp[i - 3] = frame.data[i];
 80009c0:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <executeCommand+0x210>)
 80009c2:	691a      	ldr	r2, [r3, #16]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	441a      	add	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	3b03      	subs	r3, #3
 80009cc:	68f9      	ldr	r1, [r7, #12]
 80009ce:	440b      	add	r3, r1
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	701a      	strb	r2, [r3, #0]
			for(i = 3; i < frame.dataSize; i++)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	3301      	adds	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <executeCommand+0x210>)
 80009dc:	7b1b      	ldrb	r3, [r3, #12]
 80009de:	461a      	mov	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	4293      	cmp	r3, r2
 80009e4:	dbec      	blt.n	80009c0 <executeCommand+0xec>
			}
			tmp[i - 3] = 0;
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	4413      	add	r3, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]

			int interval = atoi(tmp);
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f004 f8ec 	bl	8004bd0 <atoi>
 80009f8:	6078      	str	r0, [r7, #4]

			if(interval >= 100 && interval <= 10000)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b63      	cmp	r3, #99	; 0x63
 80009fe:	dd13      	ble.n	8000a28 <executeCommand+0x154>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a06:	4293      	cmp	r3, r2
 8000a08:	dc0e      	bgt.n	8000a28 <executeCommand+0x154>
			{
				// Informacja o aktualizacji intwrwału pomiarowego
				measurement.interval = interval;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b37      	ldr	r3, [pc, #220]	; (8000aec <executeCommand+0x218>)
 8000a10:	805a      	strh	r2, [r3, #2]
				sprintf(tmp, "TU %d", measurement.interval);
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <executeCommand+0x218>)
 8000a14:	885b      	ldrh	r3, [r3, #2]
 8000a16:	461a      	mov	r2, r3
 8000a18:	493b      	ldr	r1, [pc, #236]	; (8000b08 <executeCommand+0x234>)
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f004 fb4a 	bl	80050b4 <siprintf>
				sendFrame(tmp);
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f7ff ff3b 	bl	800089c <sendFrame>
				return;
 8000a26:	e059      	b.n	8000adc <executeCommand+0x208>
			}
			else
			{
				// Nieprawidłowy zakres argumentu
				sprintf(tmp, "ERRARGVF");
 8000a28:	4938      	ldr	r1, [pc, #224]	; (8000b0c <executeCommand+0x238>)
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f004 fb42 	bl	80050b4 <siprintf>
				sendFrame(tmp);
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f7ff ff33 	bl	800089c <sendFrame>
				return;
 8000a36:	e051      	b.n	8000adc <executeCommand+0x208>
			}
		}
	}
	else if(strcmp(tmp, "GAM") == 0)
 8000a38:	4935      	ldr	r1, [pc, #212]	; (8000b10 <executeCommand+0x23c>)
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fbc8 	bl	80001d0 <strcmp>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d142      	bne.n	8000acc <executeCommand+0x1f8>
		{
			if(detectedParameter == 0)
 8000a46:	7cfb      	ldrb	r3, [r7, #19]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d107      	bne.n	8000a5c <executeCommand+0x188>
			{
				// Brak argumentu
				sprintf(tmp, "ERRARGV");
 8000a4c:	492d      	ldr	r1, [pc, #180]	; (8000b04 <executeCommand+0x230>)
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f004 fb30 	bl	80050b4 <siprintf>
				sendFrame(tmp);
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff ff21 	bl	800089c <sendFrame>
				return;
 8000a5a:	e03f      	b.n	8000adc <executeCommand+0x208>
			}
			else
			{
				for(i = 3; i < frame.dataSize; i++)
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e00c      	b.n	8000a7c <executeCommand+0x1a8>
				{
					tmp[i - 3] = frame.data[i];
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <executeCommand+0x210>)
 8000a64:	691a      	ldr	r2, [r3, #16]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	441a      	add	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	68f9      	ldr	r1, [r7, #12]
 8000a70:	440b      	add	r3, r1
 8000a72:	7812      	ldrb	r2, [r2, #0]
 8000a74:	701a      	strb	r2, [r3, #0]
				for(i = 3; i < frame.dataSize; i++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <executeCommand+0x210>)
 8000a7e:	7b1b      	ldrb	r3, [r3, #12]
 8000a80:	461a      	mov	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	4293      	cmp	r3, r2
 8000a86:	dbec      	blt.n	8000a62 <executeCommand+0x18e>
				}

				int archiveValue = atoi(tmp);
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f004 f8a1 	bl	8004bd0 <atoi>
 8000a8e:	60b8      	str	r0, [r7, #8]

				if(archiveValue >= 1 && archiveValue <= 511)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	dd12      	ble.n	8000abc <executeCommand+0x1e8>
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a9c:	da0e      	bge.n	8000abc <executeCommand+0x1e8>
				{



					// Informacja o aktualizacji intwrwału pomiarowego
					sprintf(tmp, "SAM %d", getArchiveValue(archiveValue));
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff feda 	bl	800085c <getArchiveValue>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4919      	ldr	r1, [pc, #100]	; (8000b14 <executeCommand+0x240>)
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f004 fb00 	bl	80050b4 <siprintf>
					sendFrame(tmp);
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f7ff fef1 	bl	800089c <sendFrame>
					return;
 8000aba:	e00f      	b.n	8000adc <executeCommand+0x208>
				}
				else
				{
					// Nieprawidłowy zakres argumentu
					sprintf(tmp, "ERRARGVF");
 8000abc:	4913      	ldr	r1, [pc, #76]	; (8000b0c <executeCommand+0x238>)
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f004 faf8 	bl	80050b4 <siprintf>
					sendFrame(tmp);
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f7ff fee9 	bl	800089c <sendFrame>
					return;
 8000aca:	e007      	b.n	8000adc <executeCommand+0x208>
			}
		}
	// Nie rozpoznana komenda
	else
	{
		sprintf(tmp, "ERRCMD");
 8000acc:	4912      	ldr	r1, [pc, #72]	; (8000b18 <executeCommand+0x244>)
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f004 faf0 	bl	80050b4 <siprintf>
		sendFrame(tmp);
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f7ff fee1 	bl	800089c <sendFrame>
		return;
 8000ada:	bf00      	nop
	}
}
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000904 	.word	0x20000904
 8000ae8:	0800619c 	.word	0x0800619c
 8000aec:	2000091c 	.word	0x2000091c
 8000af0:	080061a0 	.word	0x080061a0
 8000af4:	080061a8 	.word	0x080061a8
 8000af8:	080061c8 	.word	0x080061c8
 8000afc:	080061cc 	.word	0x080061cc
 8000b00:	080061f4 	.word	0x080061f4
 8000b04:	080061f8 	.word	0x080061f8
 8000b08:	08006200 	.word	0x08006200
 8000b0c:	08006208 	.word	0x08006208
 8000b10:	08006214 	.word	0x08006214
 8000b14:	08006218 	.word	0x08006218
 8000b18:	08006220 	.word	0x08006220

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0c8      	sub	sp, #288	; 0x120
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b22:	f000 fcff 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b26:	f000 fa51 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2a:	f000 fad1 	bl	80010d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b2e:	f000 fa9f 	bl	8001070 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
USART_fsend("STM start\r\n");
 8000b32:	48a5      	ldr	r0, [pc, #660]	; (8000dc8 <main+0x2ac>)
 8000b34:	f7ff fd7c 	bl	8000630 <USART_fsend>
  /* USER CODE BEGIN WHILE */
  // TO DO
//  MX_I2C1_Init(); // Make sure this is defined and initializes I2C1 properly
//  LPS25HB_INIT(&hi2c1);

  HAL_UART_Receive_IT(&huart2, &USART_RxBuf[0], 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	49a4      	ldr	r1, [pc, #656]	; (8000dcc <main+0x2b0>)
 8000b3c:	48a4      	ldr	r0, [pc, #656]	; (8000dd0 <main+0x2b4>)
 8000b3e:	f002 fca5 	bl	800348c <HAL_UART_Receive_IT>
   char dataSize[4];
   char checkSum[3];
   char recievedFrame[269];
   char recievedChar;
   uint8_t charCoddingDetected;
   srand(time(NULL));
 8000b42:	2000      	movs	r0, #0
 8000b44:	f004 fb42 	bl	80051cc <time>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f004 f8f6 	bl	8004d40 <srand>

   frame.frameDetected = 0;
 8000b54:	4b9f      	ldr	r3, [pc, #636]	; (8000dd4 <main+0x2b8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
   measurement.current = 0;
 8000b5a:	4b9f      	ldr	r3, [pc, #636]	; (8000dd8 <main+0x2bc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
   measurement.interval = 1000;
 8000b60:	4b9d      	ldr	r3, [pc, #628]	; (8000dd8 <main+0x2bc>)
 8000b62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b66:	805a      	strh	r2, [r3, #2]

  while (1)
  {
    /* USER CODE END WHILE */
  	if(timer)
 8000b68:	4b9c      	ldr	r3, [pc, #624]	; (8000ddc <main+0x2c0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d022      	beq.n	8000bb6 <main+0x9a>
  	{
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b70:	2120      	movs	r1, #32
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f001 f8a3 	bl	8001cc0 <HAL_GPIO_TogglePin>

  measurement.current++;
 8000b7a:	4b97      	ldr	r3, [pc, #604]	; (8000dd8 <main+0x2bc>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b95      	ldr	r3, [pc, #596]	; (8000dd8 <main+0x2bc>)
 8000b84:	701a      	strb	r2, [r3, #0]
  measurement.data[measurement.current] = rand() % 100;
 8000b86:	f004 f909 	bl	8004d9c <rand>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a94      	ldr	r2, [pc, #592]	; (8000de0 <main+0x2c4>)
 8000b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b92:	1151      	asrs	r1, r2, #5
 8000b94:	17da      	asrs	r2, r3, #31
 8000b96:	1a8a      	subs	r2, r1, r2
 8000b98:	2164      	movs	r1, #100	; 0x64
 8000b9a:	fb01 f202 	mul.w	r2, r1, r2
 8000b9e:	1a9a      	subs	r2, r3, r2
 8000ba0:	4b8d      	ldr	r3, [pc, #564]	; (8000dd8 <main+0x2bc>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b211      	sxth	r1, r2
 8000ba6:	4a8c      	ldr	r2, [pc, #560]	; (8000dd8 <main+0x2bc>)
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	460a      	mov	r2, r1
 8000bae:	809a      	strh	r2, [r3, #4]

  if(measurement.current > 511)
  	measurement.current = 0;

  timer = 0;
 8000bb0:	4b8a      	ldr	r3, [pc, #552]	; (8000ddc <main+0x2c0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
  	}

  	if(USART_khbit())
 8000bb6:	f7ff fcf1 	bl	800059c <USART_khbit>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0d3      	beq.n	8000b68 <main+0x4c>
  	{
  recievedChar = USART_getchar();
 8000bc0:	f7ff fd02 	bl	80005c8 <USART_getchar>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  if(recievedChar == ':')
 8000bca:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8000bce:	2b3a      	cmp	r3, #58	; 0x3a
 8000bd0:	d109      	bne.n	8000be6 <main+0xca>
  {
  	frame.frameDetected = 1;
 8000bd2:	4b80      	ldr	r3, [pc, #512]	; (8000dd4 <main+0x2b8>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
  	frame.frameSize = 0;
 8000bd8:	4b7e      	ldr	r3, [pc, #504]	; (8000dd4 <main+0x2b8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	805a      	strh	r2, [r3, #2]
  	charCoddingDetected = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  	continue;
 8000be4:	e1cc      	b.n	8000f80 <main+0x464>
  }

  if(frame.frameDetected && frame.frameSize < 269)
 8000be6:	4b7b      	ldr	r3, [pc, #492]	; (8000dd4 <main+0x2b8>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 81b4 	beq.w	8000f58 <main+0x43c>
 8000bf0:	4b78      	ldr	r3, [pc, #480]	; (8000dd4 <main+0x2b8>)
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8000bf8:	f200 81ae 	bhi.w	8000f58 <main+0x43c>
  {
  	// Dekodowanie znaków

  	if(recievedChar == '\\' && charCoddingDetected == 0)
 8000bfc:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8000c00:	2b5c      	cmp	r3, #92	; 0x5c
 8000c02:	d107      	bne.n	8000c14 <main+0xf8>
 8000c04:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d103      	bne.n	8000c14 <main+0xf8>
  	{
  		charCoddingDetected = 1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  	if(recievedChar == '\\' && charCoddingDetected == 0)
 8000c12:	e1b4      	b.n	8000f7e <main+0x462>
  	}
  	else if(charCoddingDetected)
 8000c14:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d03f      	beq.n	8000c9c <main+0x180>
  	{
  		if(recievedChar == 'A')
 8000c1c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8000c20:	2b41      	cmp	r3, #65	; 0x41
 8000c22:	d109      	bne.n	8000c38 <main+0x11c>
  		{
  			recievedFrame[frame.frameSize] = ':';
 8000c24:	4b6b      	ldr	r3, [pc, #428]	; (8000dd4 <main+0x2b8>)
 8000c26:	885b      	ldrh	r3, [r3, #2]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c32:	213a      	movs	r1, #58	; 0x3a
 8000c34:	5499      	strb	r1, [r3, r2]
 8000c36:	e027      	b.n	8000c88 <main+0x16c>
  		}
  		else if(recievedChar == 'B')
 8000c38:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8000c3c:	2b42      	cmp	r3, #66	; 0x42
 8000c3e:	d109      	bne.n	8000c54 <main+0x138>
  		{
  			recievedFrame[frame.frameSize] = ';';
 8000c40:	4b64      	ldr	r3, [pc, #400]	; (8000dd4 <main+0x2b8>)
 8000c42:	885b      	ldrh	r3, [r3, #2]
 8000c44:	461a      	mov	r2, r3
 8000c46:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c4e:	213b      	movs	r1, #59	; 0x3b
 8000c50:	5499      	strb	r1, [r3, r2]
 8000c52:	e019      	b.n	8000c88 <main+0x16c>
  		}
  		else if(recievedChar == 'C')
 8000c54:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8000c58:	2b43      	cmp	r3, #67	; 0x43
 8000c5a:	d109      	bne.n	8000c70 <main+0x154>
  		{
  			recievedFrame[frame.frameSize] = '\\';
 8000c5c:	4b5d      	ldr	r3, [pc, #372]	; (8000dd4 <main+0x2b8>)
 8000c5e:	885b      	ldrh	r3, [r3, #2]
 8000c60:	461a      	mov	r2, r3
 8000c62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c6a:	215c      	movs	r1, #92	; 0x5c
 8000c6c:	5499      	strb	r1, [r3, r2]
 8000c6e:	e00b      	b.n	8000c88 <main+0x16c>
  		}
  		else
  		{
  			// Nierozpoznane kodowanie
  			frame.frameDetected = 0;
 8000c70:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <main+0x2b8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
  			USART_fsend(":STMPC0002ED%02d;", calculateChecksum("ED", 2));
 8000c76:	2102      	movs	r1, #2
 8000c78:	485a      	ldr	r0, [pc, #360]	; (8000de4 <main+0x2c8>)
 8000c7a:	f7ff fdc1 	bl	8000800 <calculateChecksum>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4619      	mov	r1, r3
 8000c82:	4859      	ldr	r0, [pc, #356]	; (8000de8 <main+0x2cc>)
 8000c84:	f7ff fcd4 	bl	8000630 <USART_fsend>
  		}

  		frame.frameSize++;
 8000c88:	4b52      	ldr	r3, [pc, #328]	; (8000dd4 <main+0x2b8>)
 8000c8a:	885b      	ldrh	r3, [r3, #2]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b50      	ldr	r3, [pc, #320]	; (8000dd4 <main+0x2b8>)
 8000c92:	805a      	strh	r2, [r3, #2]
  		charCoddingDetected = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  	if(recievedChar == '\\' && charCoddingDetected == 0)
 8000c9a:	e170      	b.n	8000f7e <main+0x462>
  	}
  	else if(recievedChar == ';')
 8000c9c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8000ca0:	2b3b      	cmp	r3, #59	; 0x3b
 8000ca2:	f040 8140 	bne.w	8000f26 <main+0x40a>
  	{

  		if(frame.frameSize < 13)
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <main+0x2b8>)
 8000ca8:	885b      	ldrh	r3, [r3, #2]
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	d803      	bhi.n	8000cb6 <main+0x19a>
  		{
  			frame.frameDetected = 0;
 8000cae:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <main+0x2b8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
  			continue;
 8000cb4:	e164      	b.n	8000f80 <main+0x464>
  		}

  		recievedFrame[frame.frameSize] = 0;
 8000cb6:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <main+0x2b8>)
 8000cb8:	885b      	ldrh	r3, [r3, #2]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000cc0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	5499      	strb	r1, [r3, r2]

  		for(i = 0; i < 3; i++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000cce:	e031      	b.n	8000d34 <main+0x218>
  		{
  			frame.sender[i] = recievedFrame[i];
 8000cd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000cd4:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8000cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000cdc:	4413      	add	r3, r2
 8000cde:	7819      	ldrb	r1, [r3, #0]
 8000ce0:	4a3c      	ldr	r2, [pc, #240]	; (8000dd4 <main+0x2b8>)
 8000ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000ce6:	4413      	add	r3, r2
 8000ce8:	3304      	adds	r3, #4
 8000cea:	460a      	mov	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
  			frame.receiver[i] = recievedFrame[i + 3];
 8000cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000cf2:	3303      	adds	r3, #3
 8000cf4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000cf8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8000cfc:	5cd1      	ldrb	r1, [r2, r3]
 8000cfe:	4a35      	ldr	r2, [pc, #212]	; (8000dd4 <main+0x2b8>)
 8000d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d04:	4413      	add	r3, r2
 8000d06:	3308      	adds	r3, #8
 8000d08:	460a      	mov	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
  			dataSize[i] = recievedFrame[i + 6];
 8000d0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d10:	3306      	adds	r3, #6
 8000d12:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000d16:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8000d1a:	5cd1      	ldrb	r1, [r2, r3]
 8000d1c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d24:	4413      	add	r3, r2
 8000d26:	460a      	mov	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
  		for(i = 0; i < 3; i++)
 8000d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	ddc9      	ble.n	8000cd0 <main+0x1b4>
  		}

  		frame.sender[3] = 0;
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <main+0x2b8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	71da      	strb	r2, [r3, #7]
  		frame.receiver[3] = 0;
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <main+0x2b8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	72da      	strb	r2, [r3, #11]
  		dataSize[3] = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  		frame.dataSize = atoi(dataSize);
 8000d4e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 ff3c 	bl	8004bd0 <atoi>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <main+0x2b8>)
 8000d5e:	731a      	strb	r2, [r3, #12]
  		frame.data = malloc(frame.dataSize * sizeof(char) + 1);
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <main+0x2b8>)
 8000d62:	7b1b      	ldrb	r3, [r3, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 ff36 	bl	8004bd8 <malloc>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <main+0x2b8>)
 8000d72:	611a      	str	r2, [r3, #16]

  		// Przepisanie danych
  		for(i = 0; i < frame.dataSize; i++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000d7a:	e013      	b.n	8000da4 <main+0x288>
  		{
  			frame.data[i] = recievedFrame[i + 9];
 8000d7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d80:	f103 0209 	add.w	r2, r3, #9
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <main+0x2b8>)
 8000d86:	6919      	ldr	r1, [r3, #16]
 8000d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d8c:	440b      	add	r3, r1
 8000d8e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000d92:	f5a1 7190 	sub.w	r1, r1, #288	; 0x120
 8000d96:	5c8a      	ldrb	r2, [r1, r2]
 8000d98:	701a      	strb	r2, [r3, #0]
  		for(i = 0; i < frame.dataSize; i++)
 8000d9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <main+0x2b8>)
 8000da6:	7b1b      	ldrb	r3, [r3, #12]
 8000da8:	461a      	mov	r2, r3
 8000daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000dae:	4293      	cmp	r3, r2
 8000db0:	dbe4      	blt.n	8000d7c <main+0x260>
  		}

  		frame.data[i] = 0;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <main+0x2b8>)
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000dba:	4413      	add	r3, r2
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]

  		// Odczy
  		for(i = 0; i < 2; i++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000dc6:	e028      	b.n	8000e1a <main+0x2fe>
 8000dc8:	08006228 	.word	0x08006228
 8000dcc:	200006f8 	.word	0x200006f8
 8000dd0:	20000084 	.word	0x20000084
 8000dd4:	20000904 	.word	0x20000904
 8000dd8:	2000091c 	.word	0x2000091c
 8000ddc:	2000010c 	.word	0x2000010c
 8000de0:	51eb851f 	.word	0x51eb851f
 8000de4:	08006234 	.word	0x08006234
 8000de8:	08006238 	.word	0x08006238
  		{
  			checkSum[i] = recievedFrame[i + 9 + frame.dataSize];
 8000dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000df0:	3309      	adds	r3, #9
 8000df2:	4a64      	ldr	r2, [pc, #400]	; (8000f84 <main+0x468>)
 8000df4:	7b12      	ldrb	r2, [r2, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000dfc:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8000e00:	5cd1      	ldrb	r1, [r2, r3]
 8000e02:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000e0a:	4413      	add	r3, r2
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	701a      	strb	r2, [r3, #0]
  		for(i = 0; i < 2; i++)
 8000e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000e14:	3301      	adds	r3, #1
 8000e16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	dde4      	ble.n	8000dec <main+0x2d0>
  		}
  		checkSum[3] = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
  		frame.checksumFromFrame = atoi(checkSum);
 8000e28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fecf 	bl	8004bd0 <atoi>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b53      	ldr	r3, [pc, #332]	; (8000f84 <main+0x468>)
 8000e38:	755a      	strb	r2, [r3, #21]
  		frame.checksumCalculated = calculateChecksum(frame.data, frame.dataSize);
 8000e3a:	4b52      	ldr	r3, [pc, #328]	; (8000f84 <main+0x468>)
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	4a51      	ldr	r2, [pc, #324]	; (8000f84 <main+0x468>)
 8000e40:	7b12      	ldrb	r2, [r2, #12]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fcdb 	bl	8000800 <calculateChecksum>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b4d      	ldr	r3, [pc, #308]	; (8000f84 <main+0x468>)
 8000e50:	751a      	strb	r2, [r3, #20]

  		if(debug)
 8000e52:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <main+0x46c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d029      	beq.n	8000eae <main+0x392>
  		{
  			USART_fsend("\r\n\nDANE Z RAMKI:\r\n", recievedFrame);
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	484b      	ldr	r0, [pc, #300]	; (8000f8c <main+0x470>)
 8000e60:	f7ff fbe6 	bl	8000630 <USART_fsend>
  			USART_fsend("%s\r\n", recievedFrame);
 8000e64:	463b      	mov	r3, r7
 8000e66:	4619      	mov	r1, r3
 8000e68:	4849      	ldr	r0, [pc, #292]	; (8000f90 <main+0x474>)
 8000e6a:	f7ff fbe1 	bl	8000630 <USART_fsend>
  			USART_fsend("Sender: %s\r\n", frame.sender);
 8000e6e:	4949      	ldr	r1, [pc, #292]	; (8000f94 <main+0x478>)
 8000e70:	4849      	ldr	r0, [pc, #292]	; (8000f98 <main+0x47c>)
 8000e72:	f7ff fbdd 	bl	8000630 <USART_fsend>
  			USART_fsend("Reciever: %s\r\n", frame.receiver);
 8000e76:	4949      	ldr	r1, [pc, #292]	; (8000f9c <main+0x480>)
 8000e78:	4849      	ldr	r0, [pc, #292]	; (8000fa0 <main+0x484>)
 8000e7a:	f7ff fbd9 	bl	8000630 <USART_fsend>
  			USART_fsend("Data size: %03d\r\n", frame.dataSize);
 8000e7e:	4b41      	ldr	r3, [pc, #260]	; (8000f84 <main+0x468>)
 8000e80:	7b1b      	ldrb	r3, [r3, #12]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4847      	ldr	r0, [pc, #284]	; (8000fa4 <main+0x488>)
 8000e86:	f7ff fbd3 	bl	8000630 <USART_fsend>
  			USART_fsend("Data: %s\r\n", frame.data);
 8000e8a:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <main+0x468>)
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4845      	ldr	r0, [pc, #276]	; (8000fa8 <main+0x48c>)
 8000e92:	f7ff fbcd 	bl	8000630 <USART_fsend>
  			USART_fsend("Check sum from frame: %02d\r\n", frame.checksumFromFrame);
 8000e96:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <main+0x468>)
 8000e98:	7d5b      	ldrb	r3, [r3, #21]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4843      	ldr	r0, [pc, #268]	; (8000fac <main+0x490>)
 8000e9e:	f7ff fbc7 	bl	8000630 <USART_fsend>
  			USART_fsend("Calculated checksum: %02d\r\n", frame.checksumCalculated);
 8000ea2:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <main+0x468>)
 8000ea4:	7d1b      	ldrb	r3, [r3, #20]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4841      	ldr	r0, [pc, #260]	; (8000fb0 <main+0x494>)
 8000eaa:	f7ff fbc1 	bl	8000630 <USART_fsend>
  		}


  		// Ignorowanie ramki nie wysłanej przez PC0
  		if(strcmp(frame.sender, "PC0") != 0)
 8000eae:	4941      	ldr	r1, [pc, #260]	; (8000fb4 <main+0x498>)
 8000eb0:	4838      	ldr	r0, [pc, #224]	; (8000f94 <main+0x478>)
 8000eb2:	f7ff f98d 	bl	80001d0 <strcmp>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d15c      	bne.n	8000f76 <main+0x45a>
  			continue;

  		// Ignorowanie ramki nie przeznaczonej dla STM
  		if(strcmp(frame.receiver, "STM") != 0)
 8000ebc:	493e      	ldr	r1, [pc, #248]	; (8000fb8 <main+0x49c>)
 8000ebe:	4837      	ldr	r0, [pc, #220]	; (8000f9c <main+0x480>)
 8000ec0:	f7ff f986 	bl	80001d0 <strcmp>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d157      	bne.n	8000f7a <main+0x45e>
  			continue;

  		// Niewłaściwa suma kontrolna, wysłanie ramki z odpowiednim błędem
  		if(frame.checksumCalculated != frame.checksumFromFrame)
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <main+0x468>)
 8000ecc:	7d1a      	ldrb	r2, [r3, #20]
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <main+0x468>)
 8000ed0:	7d5b      	ldrb	r3, [r3, #21]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d024      	beq.n	8000f20 <main+0x404>
  		{
  			 USART_fsend("Otrzymana suma kontrolna: %02d, Obliczona suma kontrolna: %02d\r\n", frame.checksumFromFrame, frame.checksumCalculated);
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <main+0x468>)
 8000ed8:	7d5b      	ldrb	r3, [r3, #21]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <main+0x468>)
 8000ede:	7d1b      	ldrb	r3, [r3, #20]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4836      	ldr	r0, [pc, #216]	; (8000fbc <main+0x4a0>)
 8000ee4:	f7ff fba4 	bl	8000630 <USART_fsend>
  			USART_fsend("Dane do obliczenia sumy kontrolnej: '%s'\r\n", frame.data);
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <main+0x468>)
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4834      	ldr	r0, [pc, #208]	; (8000fc0 <main+0x4a4>)
 8000ef0:	f7ff fb9e 	bl	8000630 <USART_fsend>
  			frame.checksumCalculated = calculateChecksum(frame.data, frame.dataSize);
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <main+0x468>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <main+0x468>)
 8000efa:	7b12      	ldrb	r2, [r2, #12]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fc7e 	bl	8000800 <calculateChecksum>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <main+0x468>)
 8000f0a:	751a      	strb	r2, [r3, #20]
  			 USART_fsend(":STMPC0005ERRCS%02d;", calculateChecksum("ERRCS", 5));
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	482d      	ldr	r0, [pc, #180]	; (8000fc4 <main+0x4a8>)
 8000f10:	f7ff fc76 	bl	8000800 <calculateChecksum>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4619      	mov	r1, r3
 8000f18:	482b      	ldr	r0, [pc, #172]	; (8000fc8 <main+0x4ac>)
 8000f1a:	f7ff fb89 	bl	8000630 <USART_fsend>
  			continue;
 8000f1e:	e02f      	b.n	8000f80 <main+0x464>
  		}

  		executeCommand();
 8000f20:	f7ff fcd8 	bl	80008d4 <executeCommand>
  	if(recievedChar == '\\' && charCoddingDetected == 0)
 8000f24:	e02b      	b.n	8000f7e <main+0x462>
  	}
  	else
  	{


  		recievedFrame[frame.frameSize] = recievedChar;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <main+0x468>)
 8000f28:	885b      	ldrh	r3, [r3, #2]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f30:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f34:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 8000f38:	545a      	strb	r2, [r3, r1]
  		frame.frameSize++;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <main+0x468>)
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <main+0x468>)
 8000f44:	805a      	strh	r2, [r3, #2]

  		if(frame.frameSize >= 269)
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <main+0x468>)
 8000f48:	885b      	ldrh	r3, [r3, #2]
 8000f4a:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8000f4e:	d916      	bls.n	8000f7e <main+0x462>
  		{
  			frame.frameDetected = 0;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <main+0x468>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
  	if(recievedChar == '\\' && charCoddingDetected == 0)
 8000f56:	e012      	b.n	8000f7e <main+0x462>
  		}

  	}
  }
  else if(frame.frameDetected && frame.frameSize >= 269)
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <main+0x468>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f43f ae03 	beq.w	8000b68 <main+0x4c>
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <main+0x468>)
 8000f64:	885b      	ldrh	r3, [r3, #2]
 8000f66:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8000f6a:	f67f adfd 	bls.w	8000b68 <main+0x4c>
  {
  	frame.frameDetected = 0;
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <main+0x468>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e5f8      	b.n	8000b68 <main+0x4c>
  			continue;
 8000f76:	bf00      	nop
 8000f78:	e5f6      	b.n	8000b68 <main+0x4c>
  			continue;
 8000f7a:	bf00      	nop
 8000f7c:	e5f4      	b.n	8000b68 <main+0x4c>
  	if(recievedChar == '\\' && charCoddingDetected == 0)
 8000f7e:	bf00      	nop
  	if(timer)
 8000f80:	e5f2      	b.n	8000b68 <main+0x4c>
 8000f82:	bf00      	nop
 8000f84:	20000904 	.word	0x20000904
 8000f88:	20000900 	.word	0x20000900
 8000f8c:	0800624c 	.word	0x0800624c
 8000f90:	08006260 	.word	0x08006260
 8000f94:	20000908 	.word	0x20000908
 8000f98:	08006268 	.word	0x08006268
 8000f9c:	2000090c 	.word	0x2000090c
 8000fa0:	08006278 	.word	0x08006278
 8000fa4:	08006288 	.word	0x08006288
 8000fa8:	0800629c 	.word	0x0800629c
 8000fac:	080062a8 	.word	0x080062a8
 8000fb0:	080062c8 	.word	0x080062c8
 8000fb4:	080062e4 	.word	0x080062e4
 8000fb8:	080062e8 	.word	0x080062e8
 8000fbc:	080062ec 	.word	0x080062ec
 8000fc0:	08006330 	.word	0x08006330
 8000fc4:	0800635c 	.word	0x0800635c
 8000fc8:	08006364 	.word	0x08006364

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b096      	sub	sp, #88	; 0x58
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2244      	movs	r2, #68	; 0x44
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 f8ee 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ff2:	f000 fe8d 	bl	8001d10 <HAL_PWREx_ControlVoltageScaling>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ffc:	f000 f8ce 	bl	800119c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001008:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100a:	2310      	movs	r3, #16
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001012:	2302      	movs	r3, #2
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800101a:	230a      	movs	r3, #10
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800101e:	2307      	movs	r3, #7
 8001020:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001026:	2302      	movs	r3, #2
 8001028:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fec4 	bl	8001dbc <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800103a:	f000 f8af 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2303      	movs	r3, #3
 8001044:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	2104      	movs	r1, #4
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fa8c 	bl	8002574 <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001062:	f000 f89b 	bl	800119c <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3758      	adds	r7, #88	; 0x58
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001076:	4a15      	ldr	r2, [pc, #84]	; (80010cc <MX_USART2_UART_Init+0x5c>)
 8001078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_USART2_UART_Init+0x58>)
 80010b4:	f002 f93e 	bl	8003334 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010be:	f000 f86d 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000084 	.word	0x20000084
 80010cc:	40004400 	.word	0x40004400

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <MX_GPIO_Init+0xc4>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a2a      	ldr	r2, [pc, #168]	; (8001194 <MX_GPIO_Init+0xc4>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b28      	ldr	r3, [pc, #160]	; (8001194 <MX_GPIO_Init+0xc4>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a24      	ldr	r2, [pc, #144]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <MX_GPIO_Init+0xc4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <MX_GPIO_Init+0xc4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_GPIO_Init+0xc4>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2120      	movs	r1, #32
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f000 fd9f 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001158:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <MX_GPIO_Init+0xc8>)
 800116a:	f000 fbe7 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800116e:	2320      	movs	r3, #32
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f000 fbd8 	bl	800193c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	48000800 	.word	0x48000800

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x44>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_MspInit+0x44>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_MspInit+0x44>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x44>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x44>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6593      	str	r3, [r2, #88]	; 0x58
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x44>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0ac      	sub	sp, #176	; 0xb0
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2288      	movs	r2, #136	; 0x88
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f003 ffd3 	bl	80051bc <memset>
  if(huart->Instance==USART2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <HAL_UART_MspInit+0xc0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d143      	bne.n	80012a8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001220:	2302      	movs	r3, #2
 8001222:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001224:	2300      	movs	r3, #0
 8001226:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fbc5 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001238:	f7ff ffb0 	bl	800119c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_UART_MspInit+0xc4>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001240:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <HAL_UART_MspInit+0xc4>)
 8001242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001246:	6593      	str	r3, [r2, #88]	; 0x58
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <HAL_UART_MspInit+0xc4>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_UART_MspInit+0xc4>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <HAL_UART_MspInit+0xc4>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_UART_MspInit+0xc4>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800126c:	230c      	movs	r3, #12
 800126e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001284:	2307      	movs	r3, #7
 8001286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f000 fb52 	bl	800193c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2026      	movs	r0, #38	; 0x26
 800129e:	f000 fa98 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012a2:	2026      	movs	r0, #38	; 0x26
 80012a4:	f000 fab1 	bl	800180a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	37b0      	adds	r7, #176	; 0xb0
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40021000 	.word	0x40021000

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f000 f96a 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <USART2_IRQHandler+0x10>)
 8001312:	f002 f907 	bl	8003524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000084 	.word	0x20000084

08001320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_kill>:

int _kill(int pid, int sig)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800133a:	f003 ffc9 	bl	80052d0 <__errno>
 800133e:	4603      	mov	r3, r0
 8001340:	2216      	movs	r2, #22
 8001342:	601a      	str	r2, [r3, #0]
  return -1;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_exit>:

void _exit (int status)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ffe7 	bl	8001330 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001362:	e7fe      	b.n	8001362 <_exit+0x12>

08001364 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e00a      	b.n	800138c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001376:	f3af 8000 	nop.w
 800137a:	4601      	mov	r1, r0
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	60ba      	str	r2, [r7, #8]
 8001382:	b2ca      	uxtb	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbf0      	blt.n	8001376 <_read+0x12>
  }

  return len;
 8001394:	687b      	ldr	r3, [r7, #4]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e009      	b.n	80013c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	60ba      	str	r2, [r7, #8]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbf1      	blt.n	80013b0 <_write+0x12>
  }
  return len;
 80013cc:	687b      	ldr	r3, [r7, #4]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_close>:

int _close(int file)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_isatty>:

int _isatty(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f003 ff2e 	bl	80052d0 <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20018000 	.word	0x20018000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	20000d20 	.word	0x20000d20
 80014a8:	20000e78 	.word	0x20000e78

080014ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d4:	f7ff ffea 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <LoopForever+0x6>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	; (8001510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <LoopForever+0xe>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	; (800151c <LoopForever+0x16>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fe:	f003 feed 	bl	80052dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001502:	f7ff fb0b 	bl	8000b1c <main>

08001506 <LoopForever>:

LoopForever:
    b LoopForever
 8001506:	e7fe      	b.n	8001506 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001508:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001514:	080065b4 	.word	0x080065b4
  ldr r2, =_sbss
 8001518:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800151c:	20000e74 	.word	0x20000e74

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>
	...

08001524 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_Init+0x3c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <HAL_Init+0x3c>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153a:	2003      	movs	r0, #3
 800153c:	f000 f93e 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001540:	2000      	movs	r0, #0
 8001542:	f000 f80f 	bl	8001564 <HAL_InitTick>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	e001      	b.n	8001556 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001552:	f7ff fe29 	bl	80011a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001556:	79fb      	ldrb	r3, [r7, #7]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40022000 	.word	0x40022000

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_InitTick+0x6c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d023      	beq.n	80015c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_InitTick+0x70>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <HAL_InitTick+0x6c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001586:	fbb3 f3f1 	udiv	r3, r3, r1
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f949 	bl	8001826 <HAL_SYSTICK_Config>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10f      	bne.n	80015ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d809      	bhi.n	80015b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f913 	bl	80017d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_InitTick+0x74>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e007      	b.n	80015c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e004      	b.n	80015c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e001      	b.n	80015c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000d24 	.word	0x20000d24

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000d24 	.word	0x20000d24

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff8e 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff29 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff3e 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff8e 	bl	8001710 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5d 	bl	80016bc <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff31 	bl	8001680 <__NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffa2 	bl	8001778 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d008      	beq.n	8001868 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2204      	movs	r2, #4
 800185a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e022      	b.n	80018ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 020e 	bic.w	r2, r2, #14
 8001876:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	f003 021c 	and.w	r2, r3, #28
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	2101      	movs	r1, #1
 8001896:	fa01 f202 	lsl.w	r2, r1, r2
 800189a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d005      	beq.n	80018de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2204      	movs	r2, #4
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e029      	b.n	8001932 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 020e 	bic.w	r2, r2, #14
 80018ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f003 021c 	and.w	r2, r3, #28
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
    }
  }
  return status;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194a:	e17f      	b.n	8001c4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8171 	beq.w	8001c46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d005      	beq.n	800197c <HAL_GPIO_Init+0x40>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d130      	bne.n	80019de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019b2:	2201      	movs	r2, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	f003 0201 	and.w	r2, r3, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d118      	bne.n	8001a1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019f0:	2201      	movs	r2, #1
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	08db      	lsrs	r3, r3, #3
 8001a06:	f003 0201 	and.w	r2, r3, #1
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d017      	beq.n	8001a58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	6939      	ldr	r1, [r7, #16]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80ac 	beq.w	8001c46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b5f      	ldr	r3, [pc, #380]	; (8001c6c <HAL_GPIO_Init+0x330>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af2:	4a5e      	ldr	r2, [pc, #376]	; (8001c6c <HAL_GPIO_Init+0x330>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6613      	str	r3, [r2, #96]	; 0x60
 8001afa:	4b5c      	ldr	r3, [pc, #368]	; (8001c6c <HAL_GPIO_Init+0x330>)
 8001afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b06:	4a5a      	ldr	r2, [pc, #360]	; (8001c70 <HAL_GPIO_Init+0x334>)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b30:	d025      	beq.n	8001b7e <HAL_GPIO_Init+0x242>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4f      	ldr	r2, [pc, #316]	; (8001c74 <HAL_GPIO_Init+0x338>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01f      	beq.n	8001b7a <HAL_GPIO_Init+0x23e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4e      	ldr	r2, [pc, #312]	; (8001c78 <HAL_GPIO_Init+0x33c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d019      	beq.n	8001b76 <HAL_GPIO_Init+0x23a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4d      	ldr	r2, [pc, #308]	; (8001c7c <HAL_GPIO_Init+0x340>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0x236>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4c      	ldr	r2, [pc, #304]	; (8001c80 <HAL_GPIO_Init+0x344>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00d      	beq.n	8001b6e <HAL_GPIO_Init+0x232>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <HAL_GPIO_Init+0x348>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0x22e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4a      	ldr	r2, [pc, #296]	; (8001c88 <HAL_GPIO_Init+0x34c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_GPIO_Init+0x22a>
 8001b62:	2306      	movs	r3, #6
 8001b64:	e00c      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b66:	2307      	movs	r3, #7
 8001b68:	e00a      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	e008      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b6e:	2304      	movs	r3, #4
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b72:	2303      	movs	r3, #3
 8001b74:	e004      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	f002 0203 	and.w	r2, r2, #3
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b90:	4937      	ldr	r1, [pc, #220]	; (8001c70 <HAL_GPIO_Init+0x334>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_GPIO_Init+0x350>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bc2:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <HAL_GPIO_Init+0x350>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_GPIO_Init+0x350>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bec:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <HAL_GPIO_Init+0x350>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_GPIO_Init+0x350>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_GPIO_Init+0x350>)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_GPIO_Init+0x350>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <HAL_GPIO_Init+0x350>)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f47f ae78 	bne.w	800194c <HAL_GPIO_Init+0x10>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	48000400 	.word	0x48000400
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	48000c00 	.word	0x48000c00
 8001c80:	48001000 	.word	0x48001000
 8001c84:	48001400 	.word	0x48001400
 8001c88:	48001800 	.word	0x48001800
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43d9      	mvns	r1, r3
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	619a      	str	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_PWREx_GetVoltageRange+0x18>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40007000 	.word	0x40007000

08001d10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1e:	d130      	bne.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d20:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d2c:	d038      	beq.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d36:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2232      	movs	r2, #50	; 0x32
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	0c9b      	lsrs	r3, r3, #18
 8001d50:	3301      	adds	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d54:	e002      	b.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d68:	d102      	bne.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f2      	bne.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7c:	d110      	bne.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e00f      	b.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8e:	d007      	beq.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40007000 	.word	0x40007000
 8001db4:	20000000 	.word	0x20000000
 8001db8:	431bde83 	.word	0x431bde83

08001dbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e3ca      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b97      	ldr	r3, [pc, #604]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b94      	ldr	r3, [pc, #592]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80e4 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_RCC_OscConfig+0x4a>
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	f040 808b 	bne.w	8001f14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	f040 8087 	bne.w	8001f14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e06:	4b89      	ldr	r3, [pc, #548]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x62>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e3a2      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1a      	ldr	r2, [r3, #32]
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_RCC_OscConfig+0x7c>
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e36:	e005      	b.n	8001e44 <HAL_RCC_OscConfig+0x88>
 8001e38:	4b7c      	ldr	r3, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d223      	bcs.n	8001e90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fd55 	bl	80028fc <RCC_SetFlashLatencyFromMSIRange>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e383      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5c:	4b73      	ldr	r3, [pc, #460]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a72      	ldr	r2, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b70      	ldr	r3, [pc, #448]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	496d      	ldr	r1, [pc, #436]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7a:	4b6c      	ldr	r3, [pc, #432]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	4968      	ldr	r1, [pc, #416]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
 8001e8e:	e025      	b.n	8001edc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e90:	4b66      	ldr	r3, [pc, #408]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a65      	ldr	r2, [pc, #404]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4960      	ldr	r1, [pc, #384]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eae:	4b5f      	ldr	r3, [pc, #380]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	495b      	ldr	r1, [pc, #364]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fd15 	bl	80028fc <RCC_SetFlashLatencyFromMSIRange>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e343      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001edc:	f000 fc4a 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b52      	ldr	r3, [pc, #328]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	4950      	ldr	r1, [pc, #320]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	4a4e      	ldr	r2, [pc, #312]	; (8002034 <HAL_RCC_OscConfig+0x278>)
 8001efa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001efc:	4b4e      	ldr	r3, [pc, #312]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fb2f 	bl	8001564 <HAL_InitTick>
 8001f06:	4603      	mov	r3, r0
 8001f08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d052      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	e327      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d032      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f1c:	4b43      	ldr	r3, [pc, #268]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a42      	ldr	r2, [pc, #264]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fb6c 	bl	8001604 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f30:	f7ff fb68 	bl	8001604 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e310      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a36      	ldr	r2, [pc, #216]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4931      	ldr	r1, [pc, #196]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	492c      	ldr	r1, [pc, #176]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
 8001f80:	e01a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f82:	4b2a      	ldr	r3, [pc, #168]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a29      	ldr	r2, [pc, #164]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fb39 	bl	8001604 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f96:	f7ff fb35 	bl	8001604 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e2dd      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fa8:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x1da>
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d074      	beq.n	80020ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x21a>
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b0c      	cmp	r3, #12
 8001fce:	d10e      	bne.n	8001fee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d10b      	bne.n	8001fee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d064      	beq.n	80020ac <HAL_RCC_OscConfig+0x2f0>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d160      	bne.n	80020ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e2ba      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x24a>
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e026      	b.n	8002054 <HAL_RCC_OscConfig+0x298>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800200e:	d115      	bne.n	800203c <HAL_RCC_OscConfig+0x280>
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a05      	ldr	r2, [pc, #20]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8002016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_RCC_OscConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a02      	ldr	r2, [pc, #8]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8002022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e014      	b.n	8002054 <HAL_RCC_OscConfig+0x298>
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	0800637c 	.word	0x0800637c
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004
 800203c:	4ba0      	ldr	r3, [pc, #640]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a9f      	ldr	r2, [pc, #636]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b9d      	ldr	r3, [pc, #628]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a9c      	ldr	r2, [pc, #624]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 800204e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff fad2 	bl	8001604 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff face 	bl	8001604 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e276      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002076:	4b92      	ldr	r3, [pc, #584]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x2a8>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff fabe 	bl	8001604 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff faba 	bl	8001604 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e262      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800209e:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x2d0>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d060      	beq.n	800217c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d005      	beq.n	80020cc <HAL_RCC_OscConfig+0x310>
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d119      	bne.n	80020fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d116      	bne.n	80020fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020cc:	4b7c      	ldr	r3, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_OscConfig+0x328>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e23f      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b76      	ldr	r3, [pc, #472]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	4973      	ldr	r1, [pc, #460]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f8:	e040      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d023      	beq.n	800214a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002102:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6e      	ldr	r2, [pc, #440]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7ff fa79 	bl	8001604 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002116:	f7ff fa75 	bl	8001604 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e21d      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002128:	4b65      	ldr	r3, [pc, #404]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b62      	ldr	r3, [pc, #392]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	061b      	lsls	r3, r3, #24
 8002142:	495f      	ldr	r1, [pc, #380]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
 8002148:	e018      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b5d      	ldr	r3, [pc, #372]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a5c      	ldr	r2, [pc, #368]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7ff fa55 	bl	8001604 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215e:	f7ff fa51 	bl	8001604 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e1f9      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002170:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d03c      	beq.n	8002202 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01c      	beq.n	80021ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002190:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002196:	4a4a      	ldr	r2, [pc, #296]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7ff fa30 	bl	8001604 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff fa2c 	bl	8001604 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1d4      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80021bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ef      	beq.n	80021a8 <HAL_RCC_OscConfig+0x3ec>
 80021c8:	e01b      	b.n	8002202 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80021cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d0:	4a3b      	ldr	r2, [pc, #236]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff fa13 	bl	8001604 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e2:	f7ff fa0f 	bl	8001604 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1b7      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ef      	bne.n	80021e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80a6 	beq.w	800235c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10d      	bne.n	800223c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222a:	6593      	str	r3, [r2, #88]	; 0x58
 800222c:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002238:	2301      	movs	r3, #1
 800223a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223c:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_RCC_OscConfig+0x508>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d118      	bne.n	800227a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_RCC_OscConfig+0x508>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_RCC_OscConfig+0x508>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002254:	f7ff f9d6 	bl	8001604 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7ff f9d2 	bl	8001604 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e17a      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_RCC_OscConfig+0x508>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x4d8>
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002292:	e029      	b.n	80022e8 <HAL_RCC_OscConfig+0x52c>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d115      	bne.n	80022c8 <HAL_RCC_OscConfig+0x50c>
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <HAL_RCC_OscConfig+0x504>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022bc:	e014      	b.n	80022e8 <HAL_RCC_OscConfig+0x52c>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
 80022c8:	4b9c      	ldr	r3, [pc, #624]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	4a9b      	ldr	r2, [pc, #620]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d8:	4b98      	ldr	r3, [pc, #608]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	4a97      	ldr	r2, [pc, #604]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d016      	beq.n	800231e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff f988 	bl	8001604 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7ff f984 	bl	8001604 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e12a      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800230e:	4b8b      	ldr	r3, [pc, #556]	; (800253c <HAL_RCC_OscConfig+0x780>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0ed      	beq.n	80022f8 <HAL_RCC_OscConfig+0x53c>
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231e:	f7ff f971 	bl	8001604 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7ff f96d 	bl	8001604 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e113      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800233c:	4b7f      	ldr	r3, [pc, #508]	; (800253c <HAL_RCC_OscConfig+0x780>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1ed      	bne.n	8002326 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800234a:	7ffb      	ldrb	r3, [r7, #31]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002350:	4b7a      	ldr	r3, [pc, #488]	; (800253c <HAL_RCC_OscConfig+0x780>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	4a79      	ldr	r2, [pc, #484]	; (800253c <HAL_RCC_OscConfig+0x780>)
 8002356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80fe 	beq.w	8002562 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	2b02      	cmp	r3, #2
 800236c:	f040 80d0 	bne.w	8002510 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002370:	4b72      	ldr	r3, [pc, #456]	; (800253c <HAL_RCC_OscConfig+0x780>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0203 	and.w	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	429a      	cmp	r2, r3
 8002382:	d130      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	3b01      	subs	r3, #1
 8002390:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d127      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d11f      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023b0:	2a07      	cmp	r2, #7
 80023b2:	bf14      	ite	ne
 80023b4:	2201      	movne	r2, #1
 80023b6:	2200      	moveq	r2, #0
 80023b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d113      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	3b01      	subs	r3, #1
 80023cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	3b01      	subs	r3, #1
 80023e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d06e      	beq.n	80024c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b0c      	cmp	r3, #12
 80023ea:	d069      	beq.n	80024c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023ec:	4b53      	ldr	r3, [pc, #332]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023f8:	4b50      	ldr	r3, [pc, #320]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0ad      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002408:	4b4c      	ldr	r3, [pc, #304]	; (800253c <HAL_RCC_OscConfig+0x780>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a4b      	ldr	r2, [pc, #300]	; (800253c <HAL_RCC_OscConfig+0x780>)
 800240e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002412:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002414:	f7ff f8f6 	bl	8001604 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff f8f2 	bl	8001604 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e09a      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242e:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCC_OscConfig+0x780>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243a:	4b40      	ldr	r3, [pc, #256]	; (800253c <HAL_RCC_OscConfig+0x780>)
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	4b40      	ldr	r3, [pc, #256]	; (8002540 <HAL_RCC_OscConfig+0x784>)
 8002440:	4013      	ands	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800244a:	3a01      	subs	r2, #1
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	4311      	orrs	r1, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002454:	0212      	lsls	r2, r2, #8
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800245c:	0852      	lsrs	r2, r2, #1
 800245e:	3a01      	subs	r2, #1
 8002460:	0552      	lsls	r2, r2, #21
 8002462:	4311      	orrs	r1, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002468:	0852      	lsrs	r2, r2, #1
 800246a:	3a01      	subs	r2, #1
 800246c:	0652      	lsls	r2, r2, #25
 800246e:	4311      	orrs	r1, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002474:	0912      	lsrs	r2, r2, #4
 8002476:	0452      	lsls	r2, r2, #17
 8002478:	430a      	orrs	r2, r1
 800247a:	4930      	ldr	r1, [pc, #192]	; (800253c <HAL_RCC_OscConfig+0x780>)
 800247c:	4313      	orrs	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002480:	4b2e      	ldr	r3, [pc, #184]	; (800253c <HAL_RCC_OscConfig+0x780>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a2d      	ldr	r2, [pc, #180]	; (800253c <HAL_RCC_OscConfig+0x780>)
 8002486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HAL_RCC_OscConfig+0x780>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a2a      	ldr	r2, [pc, #168]	; (800253c <HAL_RCC_OscConfig+0x780>)
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002496:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002498:	f7ff f8b4 	bl	8001604 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff f8b0 	bl	8001604 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e058      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024be:	e050      	b.n	8002562 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e04f      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d148      	bne.n	8002562 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a19      	ldr	r2, [pc, #100]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a16      	ldr	r2, [pc, #88]	; (800253c <HAL_RCC_OscConfig+0x780>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024e8:	f7ff f88c 	bl	8001604 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7ff f888 	bl	8001604 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e030      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_RCC_OscConfig+0x780>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x734>
 800250e:	e028      	b.n	8002562 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d023      	beq.n	800255e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_OscConfig+0x780>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <HAL_RCC_OscConfig+0x780>)
 800251c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7ff f86f 	bl	8001604 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002528:	e00c      	b.n	8002544 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7ff f86b 	bl	8001604 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d905      	bls.n	8002544 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e013      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
 800253c:	40021000 	.word	0x40021000
 8002540:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_OscConfig+0x7b0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ec      	bne.n	800252a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_OscConfig+0x7b0>)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	4905      	ldr	r1, [pc, #20]	; (800256c <HAL_RCC_OscConfig+0x7b0>)
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_OscConfig+0x7b4>)
 8002558:	4013      	ands	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
 800255c:	e001      	b.n	8002562 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	feeefffc 	.word	0xfeeefffc

08002574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0e7      	b.n	8002758 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b75      	ldr	r3, [pc, #468]	; (8002760 <HAL_RCC_ClockConfig+0x1ec>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d910      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b72      	ldr	r3, [pc, #456]	; (8002760 <HAL_RCC_ClockConfig+0x1ec>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	4970      	ldr	r1, [pc, #448]	; (8002760 <HAL_RCC_ClockConfig+0x1ec>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b6e      	ldr	r3, [pc, #440]	; (8002760 <HAL_RCC_ClockConfig+0x1ec>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0cf      	b.n	8002758 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d010      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d908      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4960      	ldr	r1, [pc, #384]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d04c      	beq.n	800268c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fa:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d121      	bne.n	800264a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0a6      	b.n	8002758 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	4b54      	ldr	r3, [pc, #336]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d115      	bne.n	800264a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e09a      	b.n	8002758 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800262a:	4b4e      	ldr	r3, [pc, #312]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e08e      	b.n	8002758 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800263a:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e086      	b.n	8002758 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4943      	ldr	r1, [pc, #268]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265c:	f7fe ffd2 	bl	8001604 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7fe ffce 	bl	8001604 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e06e      	b.n	8002758 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d010      	beq.n	80026ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d208      	bcs.n	80026ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	492b      	ldr	r1, [pc, #172]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ba:	4b29      	ldr	r3, [pc, #164]	; (8002760 <HAL_RCC_ClockConfig+0x1ec>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d210      	bcs.n	80026ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCC_ClockConfig+0x1ec>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 0207 	bic.w	r2, r3, #7
 80026d0:	4923      	ldr	r1, [pc, #140]	; (8002760 <HAL_RCC_ClockConfig+0x1ec>)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d8:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_RCC_ClockConfig+0x1ec>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e036      	b.n	8002758 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	4918      	ldr	r1, [pc, #96]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	4313      	orrs	r3, r2
 8002706:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4910      	ldr	r1, [pc, #64]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002728:	f000 f824 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	490b      	ldr	r1, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x1f4>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1f8>)
 8002746:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1fc>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe ff09 	bl	8001564 <HAL_InitTick>
 8002752:	4603      	mov	r3, r0
 8002754:	72fb      	strb	r3, [r7, #11]

  return status;
 8002756:	7afb      	ldrb	r3, [r7, #11]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40022000 	.word	0x40022000
 8002764:	40021000 	.word	0x40021000
 8002768:	0800637c 	.word	0x0800637c
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCC_GetSysClockFreq+0x108>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <HAL_RCC_GetSysClockFreq+0x108>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x34>
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d121      	bne.n	80027e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d11e      	bne.n	80027e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027a8:	4b34      	ldr	r3, [pc, #208]	; (800287c <HAL_RCC_GetSysClockFreq+0x108>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027b4:	4b31      	ldr	r3, [pc, #196]	; (800287c <HAL_RCC_GetSysClockFreq+0x108>)
 80027b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	e005      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027c4:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_RCC_GetSysClockFreq+0x108>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027d0:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10d      	bne.n	80027fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_RCC_GetSysClockFreq+0x110>)
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	e004      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027f8:	4b23      	ldr	r3, [pc, #140]	; (8002888 <HAL_RCC_GetSysClockFreq+0x114>)
 80027fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d134      	bne.n	800286c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HAL_RCC_GetSysClockFreq+0x108>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d003      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0xa6>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d003      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0xac>
 8002818:	e005      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <HAL_RCC_GetSysClockFreq+0x110>)
 800281c:	617b      	str	r3, [r7, #20]
      break;
 800281e:	e005      	b.n	800282c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_GetSysClockFreq+0x114>)
 8002822:	617b      	str	r3, [r7, #20]
      break;
 8002824:	e002      	b.n	800282c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	617b      	str	r3, [r7, #20]
      break;
 800282a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_RCC_GetSysClockFreq+0x108>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	3301      	adds	r3, #1
 8002838:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_RCC_GetSysClockFreq+0x108>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	fb03 f202 	mul.w	r2, r3, r2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_RCC_GetSysClockFreq+0x108>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	0e5b      	lsrs	r3, r3, #25
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	3301      	adds	r3, #1
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800286c:	69bb      	ldr	r3, [r7, #24]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
 8002880:	08006394 	.word	0x08006394
 8002884:	00f42400 	.word	0x00f42400
 8002888:	007a1200 	.word	0x007a1200

0800288c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000000 	.word	0x20000000

080028a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028a8:	f7ff fff0 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4904      	ldr	r1, [pc, #16]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	0800638c 	.word	0x0800638c

080028d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028d4:	f7ff ffda 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	0adb      	lsrs	r3, r3, #11
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4904      	ldr	r1, [pc, #16]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	0800638c 	.word	0x0800638c

080028fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002908:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002914:	f7ff f9ee 	bl	8001cf4 <HAL_PWREx_GetVoltageRange>
 8002918:	6178      	str	r0, [r7, #20]
 800291a:	e014      	b.n	8002946 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	4a24      	ldr	r2, [pc, #144]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002926:	6593      	str	r3, [r2, #88]	; 0x58
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002934:	f7ff f9de 	bl	8001cf4 <HAL_PWREx_GetVoltageRange>
 8002938:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002944:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294c:	d10b      	bne.n	8002966 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b80      	cmp	r3, #128	; 0x80
 8002952:	d919      	bls.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2ba0      	cmp	r3, #160	; 0xa0
 8002958:	d902      	bls.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800295a:	2302      	movs	r3, #2
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	e013      	b.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002960:	2301      	movs	r3, #1
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	e010      	b.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b80      	cmp	r3, #128	; 0x80
 800296a:	d902      	bls.n	8002972 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800296c:	2303      	movs	r3, #3
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	e00a      	b.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d102      	bne.n	800297e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002978:	2302      	movs	r3, #2
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	e004      	b.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b70      	cmp	r3, #112	; 0x70
 8002982:	d101      	bne.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002984:	2301      	movs	r3, #1
 8002986:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 0207 	bic.w	r2, r3, #7
 8002990:	4909      	ldr	r1, [pc, #36]	; (80029b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d001      	beq.n	80029aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40022000 	.word	0x40022000

080029bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c4:	2300      	movs	r3, #0
 80029c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029c8:	2300      	movs	r3, #0
 80029ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d041      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029e0:	d02a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029e6:	d824      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ec:	d008      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029f2:	d81e      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fc:	d010      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029fe:	e018      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a00:	4b86      	ldr	r3, [pc, #536]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a85      	ldr	r2, [pc, #532]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a0c:	e015      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fabb 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a1e:	e00c      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3320      	adds	r3, #32
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fba6 	bl	8003178 <RCCEx_PLLSAI2_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a30:	e003      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	74fb      	strb	r3, [r7, #19]
      break;
 8002a36:	e000      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a40:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a4e:	4973      	ldr	r1, [pc, #460]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a56:	e001      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d041      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a70:	d02a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a76:	d824      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a7c:	d008      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a82:	d81e      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a8c:	d010      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a8e:	e018      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a90:	4b62      	ldr	r3, [pc, #392]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a61      	ldr	r2, [pc, #388]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a9c:	e015      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fa73 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aae:	e00c      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3320      	adds	r3, #32
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fb5e 	bl	8003178 <RCCEx_PLLSAI2_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ac0:	e003      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ac6:	e000      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ad0:	4b52      	ldr	r3, [pc, #328]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ade:	494f      	ldr	r1, [pc, #316]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ae6:	e001      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80a0 	beq.w	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00d      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b14:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	4a40      	ldr	r2, [pc, #256]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b20:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b30:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a3a      	ldr	r2, [pc, #232]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fd62 	bl	8001604 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b42:	e009      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b44:	f7fe fd5e 	bl	8001604 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d902      	bls.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	74fb      	strb	r3, [r7, #19]
        break;
 8002b56:	e005      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b58:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ef      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d15c      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b6a:	4b2c      	ldr	r3, [pc, #176]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01f      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d019      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fd1d 	bl	8001604 <HAL_GetTick>
 8002bca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bcc:	e00b      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe fd19 	bl	8001604 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d902      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	74fb      	strb	r3, [r7, #19]
            break;
 8002be4:	e006      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ec      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0a:	4904      	ldr	r1, [pc, #16]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c12:	e009      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	74bb      	strb	r3, [r7, #18]
 8002c18:	e006      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c28:	7c7b      	ldrb	r3, [r7, #17]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b9e      	ldr	r3, [pc, #632]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	4a9d      	ldr	r2, [pc, #628]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c46:	4b98      	ldr	r3, [pc, #608]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f023 0203 	bic.w	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	4994      	ldr	r1, [pc, #592]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c68:	4b8f      	ldr	r3, [pc, #572]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f023 020c 	bic.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	498c      	ldr	r1, [pc, #560]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c8a:	4b87      	ldr	r3, [pc, #540]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	4983      	ldr	r1, [pc, #524]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cac:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	497b      	ldr	r1, [pc, #492]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cce:	4b76      	ldr	r3, [pc, #472]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cdc:	4972      	ldr	r1, [pc, #456]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cf0:	4b6d      	ldr	r3, [pc, #436]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfe:	496a      	ldr	r1, [pc, #424]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d12:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	4961      	ldr	r1, [pc, #388]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d34:	4b5c      	ldr	r3, [pc, #368]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d42:	4959      	ldr	r1, [pc, #356]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d56:	4b54      	ldr	r3, [pc, #336]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d64:	4950      	ldr	r1, [pc, #320]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d78:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	4948      	ldr	r1, [pc, #288]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d9a:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	493f      	ldr	r1, [pc, #252]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d028      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dca:	4937      	ldr	r1, [pc, #220]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dda:	d106      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de6:	60d3      	str	r3, [r2, #12]
 8002de8:	e011      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002df2:	d10c      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	2101      	movs	r1, #1
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f8c8 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e0a:	7cfb      	ldrb	r3, [r7, #19]
 8002e0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d028      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	491f      	ldr	r1, [pc, #124]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e38:	d106      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e44:	60d3      	str	r3, [r2, #12]
 8002e46:	e011      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2101      	movs	r1, #1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 f899 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d02b      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e86:	4908      	ldr	r1, [pc, #32]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e96:	d109      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a02      	ldr	r2, [pc, #8]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea2:	60d3      	str	r3, [r2, #12]
 8002ea4:	e014      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2101      	movs	r1, #1
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f867 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d02f      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eea:	4928      	ldr	r1, [pc, #160]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002efa:	d10d      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3304      	adds	r3, #4
 8002f00:	2102      	movs	r1, #2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f844 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d014      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	74bb      	strb	r3, [r7, #18]
 8002f16:	e011      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3320      	adds	r3, #32
 8002f26:	2102      	movs	r1, #2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f925 	bl	8003178 <RCCEx_PLLSAI2_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f56:	490d      	ldr	r1, [pc, #52]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7a:	4904      	ldr	r1, [pc, #16]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f82:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000

08002f90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f9e:	4b75      	ldr	r3, [pc, #468]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002faa:	4b72      	ldr	r3, [pc, #456]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0203 	and.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d10d      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
       ||
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fc2:	4b6c      	ldr	r3, [pc, #432]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d047      	beq.n	8003066 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	e044      	b.n	8003066 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d018      	beq.n	8003016 <RCCEx_PLLSAI1_Config+0x86>
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d825      	bhi.n	8003034 <RCCEx_PLLSAI1_Config+0xa4>
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d002      	beq.n	8002ff2 <RCCEx_PLLSAI1_Config+0x62>
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d009      	beq.n	8003004 <RCCEx_PLLSAI1_Config+0x74>
 8002ff0:	e020      	b.n	8003034 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ff2:	4b60      	ldr	r3, [pc, #384]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11d      	bne.n	800303a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003002:	e01a      	b.n	800303a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003004:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d116      	bne.n	800303e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e013      	b.n	800303e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003016:	4b57      	ldr	r3, [pc, #348]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003022:	4b54      	ldr	r3, [pc, #336]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003032:	e006      	b.n	8003042 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      break;
 8003038:	e004      	b.n	8003044 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800303a:	bf00      	nop
 800303c:	e002      	b.n	8003044 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800303e:	bf00      	nop
 8003040:	e000      	b.n	8003044 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003042:	bf00      	nop
    }

    if(status == HAL_OK)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10d      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800304a:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	430b      	orrs	r3, r1
 8003060:	4944      	ldr	r1, [pc, #272]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d17d      	bne.n	8003168 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800306c:	4b41      	ldr	r3, [pc, #260]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a40      	ldr	r2, [pc, #256]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003072:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7fe fac4 	bl	8001604 <HAL_GetTick>
 800307c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800307e:	e009      	b.n	8003094 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003080:	f7fe fac0 	bl	8001604 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d902      	bls.n	8003094 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	73fb      	strb	r3, [r7, #15]
        break;
 8003092:	e005      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003094:	4b37      	ldr	r3, [pc, #220]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ef      	bne.n	8003080 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d160      	bne.n	8003168 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d111      	bne.n	80030d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6892      	ldr	r2, [r2, #8]
 80030bc:	0211      	lsls	r1, r2, #8
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	0912      	lsrs	r2, r2, #4
 80030c4:	0452      	lsls	r2, r2, #17
 80030c6:	430a      	orrs	r2, r1
 80030c8:	492a      	ldr	r1, [pc, #168]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	610b      	str	r3, [r1, #16]
 80030ce:	e027      	b.n	8003120 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d112      	bne.n	80030fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6892      	ldr	r2, [r2, #8]
 80030e6:	0211      	lsls	r1, r2, #8
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6912      	ldr	r2, [r2, #16]
 80030ec:	0852      	lsrs	r2, r2, #1
 80030ee:	3a01      	subs	r2, #1
 80030f0:	0552      	lsls	r2, r2, #21
 80030f2:	430a      	orrs	r2, r1
 80030f4:	491f      	ldr	r1, [pc, #124]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	610b      	str	r3, [r1, #16]
 80030fa:	e011      	b.n	8003120 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003104:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6892      	ldr	r2, [r2, #8]
 800310c:	0211      	lsls	r1, r2, #8
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6952      	ldr	r2, [r2, #20]
 8003112:	0852      	lsrs	r2, r2, #1
 8003114:	3a01      	subs	r2, #1
 8003116:	0652      	lsls	r2, r2, #25
 8003118:	430a      	orrs	r2, r1
 800311a:	4916      	ldr	r1, [pc, #88]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a13      	ldr	r2, [pc, #76]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800312a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fe fa6a 	bl	8001604 <HAL_GetTick>
 8003130:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003132:	e009      	b.n	8003148 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003134:	f7fe fa66 	bl	8001604 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d902      	bls.n	8003148 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	73fb      	strb	r3, [r7, #15]
          break;
 8003146:	e005      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ef      	beq.n	8003134 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	4904      	ldr	r1, [pc, #16]	; (8003174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000

08003178 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003186:	4b6a      	ldr	r3, [pc, #424]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d018      	beq.n	80031c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003192:	4b67      	ldr	r3, [pc, #412]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0203 	and.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10d      	bne.n	80031be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
       ||
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031aa:	4b61      	ldr	r3, [pc, #388]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
       ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d047      	beq.n	800324e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	e044      	b.n	800324e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d018      	beq.n	80031fe <RCCEx_PLLSAI2_Config+0x86>
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d825      	bhi.n	800321c <RCCEx_PLLSAI2_Config+0xa4>
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d002      	beq.n	80031da <RCCEx_PLLSAI2_Config+0x62>
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d009      	beq.n	80031ec <RCCEx_PLLSAI2_Config+0x74>
 80031d8:	e020      	b.n	800321c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031da:	4b55      	ldr	r3, [pc, #340]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d11d      	bne.n	8003222 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ea:	e01a      	b.n	8003222 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031ec:	4b50      	ldr	r3, [pc, #320]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d116      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fc:	e013      	b.n	8003226 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031fe:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800320a:	4b49      	ldr	r3, [pc, #292]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800321a:	e006      	b.n	800322a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e004      	b.n	800322c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800322a:	bf00      	nop
    }

    if(status == HAL_OK)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10d      	bne.n	800324e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003232:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	430b      	orrs	r3, r1
 8003248:	4939      	ldr	r1, [pc, #228]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324a:	4313      	orrs	r3, r2
 800324c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d167      	bne.n	8003324 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003254:	4b36      	ldr	r3, [pc, #216]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a35      	ldr	r2, [pc, #212]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fe f9d0 	bl	8001604 <HAL_GetTick>
 8003264:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003266:	e009      	b.n	800327c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003268:	f7fe f9cc 	bl	8001604 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d902      	bls.n	800327c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	73fb      	strb	r3, [r7, #15]
        break;
 800327a:	e005      	b.n	8003288 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800327c:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ef      	bne.n	8003268 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d14a      	bne.n	8003324 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d111      	bne.n	80032b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003294:	4b26      	ldr	r3, [pc, #152]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800329c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6892      	ldr	r2, [r2, #8]
 80032a4:	0211      	lsls	r1, r2, #8
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68d2      	ldr	r2, [r2, #12]
 80032aa:	0912      	lsrs	r2, r2, #4
 80032ac:	0452      	lsls	r2, r2, #17
 80032ae:	430a      	orrs	r2, r1
 80032b0:	491f      	ldr	r1, [pc, #124]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	614b      	str	r3, [r1, #20]
 80032b6:	e011      	b.n	80032dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6892      	ldr	r2, [r2, #8]
 80032c8:	0211      	lsls	r1, r2, #8
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6912      	ldr	r2, [r2, #16]
 80032ce:	0852      	lsrs	r2, r2, #1
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0652      	lsls	r2, r2, #25
 80032d4:	430a      	orrs	r2, r1
 80032d6:	4916      	ldr	r1, [pc, #88]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a13      	ldr	r2, [pc, #76]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fe f98c 	bl	8001604 <HAL_GetTick>
 80032ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032ee:	e009      	b.n	8003304 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032f0:	f7fe f988 	bl	8001604 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d902      	bls.n	8003304 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	73fb      	strb	r3, [r7, #15]
          break;
 8003302:	e005      	b.n	8003310 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ef      	beq.n	80032f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4904      	ldr	r1, [pc, #16]	; (8003330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003320:	4313      	orrs	r3, r2
 8003322:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e040      	b.n	80033c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd ff4a 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	; 0x24
 8003360:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fe8a 	bl	8004094 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fbcf 	bl	8003b24 <UART_SetConfig>
 8003386:	4603      	mov	r3, r0
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e01b      	b.n	80033c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 ff09 	bl	80041d8 <UART_CheckIdleState>
 80033c6:	4603      	mov	r3, r0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b08b      	sub	sp, #44	; 0x2c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d147      	bne.n	8003476 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_UART_Transmit_IT+0x22>
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e040      	b.n	8003478 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2221      	movs	r2, #33	; 0x21
 800341e:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003428:	d107      	bne.n	800343a <HAL_UART_Transmit_IT+0x6a>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <HAL_UART_Transmit_IT+0xb4>)
 8003436:	66da      	str	r2, [r3, #108]	; 0x6c
 8003438:	e002      	b.n	8003440 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a12      	ldr	r2, [pc, #72]	; (8003488 <HAL_UART_Transmit_IT+0xb8>)
 800343e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	613b      	str	r3, [r7, #16]
   return(result);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	69f9      	ldr	r1, [r7, #28]
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	61bb      	str	r3, [r7, #24]
   return(result);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e6      	bne.n	8003440 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003476:	2302      	movs	r3, #2
  }
}
 8003478:	4618      	mov	r0, r3
 800347a:	372c      	adds	r7, #44	; 0x2c
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	08004731 	.word	0x08004731
 8003488:	08004679 	.word	0x08004679

0800348c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d137      	bne.n	8003514 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_UART_Receive_IT+0x24>
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e030      	b.n	8003516 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a18      	ldr	r2, [pc, #96]	; (8003520 <HAL_UART_Receive_IT+0x94>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01f      	beq.n	8003504 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d018      	beq.n	8003504 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	613b      	str	r3, [r7, #16]
   return(result);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	623b      	str	r3, [r7, #32]
 80034f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f4:	69f9      	ldr	r1, [r7, #28]
 80034f6:	6a3a      	ldr	r2, [r7, #32]
 80034f8:	e841 2300 	strex	r3, r2, [r1]
 80034fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e6      	bne.n	80034d2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	461a      	mov	r2, r3
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 ff74 	bl	80043f8 <UART_Start_Receive_IT>
 8003510:	4603      	mov	r3, r0
 8003512:	e000      	b.n	8003516 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3728      	adds	r7, #40	; 0x28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40008000 	.word	0x40008000

08003524 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b0ba      	sub	sp, #232	; 0xe8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800354a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800354e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003552:	4013      	ands	r3, r2
 8003554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d115      	bne.n	800358c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00f      	beq.n	800358c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800356c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 82ae 	beq.w	8003ade <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
      }
      return;
 800358a:	e2a8      	b.n	8003ade <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800358c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8117 	beq.w	80037c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035a6:	4b85      	ldr	r3, [pc, #532]	; (80037bc <HAL_UART_IRQHandler+0x298>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 810a 	beq.w	80037c4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d011      	beq.n	80035e0 <HAL_UART_IRQHandler+0xbc>
 80035bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d011      	beq.n	8003610 <HAL_UART_IRQHandler+0xec>
 80035ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2202      	movs	r2, #2
 80035fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003606:	f043 0204 	orr.w	r2, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d011      	beq.n	8003640 <HAL_UART_IRQHandler+0x11c>
 800361c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2204      	movs	r2, #4
 800362e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d017      	beq.n	800367c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800364c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800365c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2208      	movs	r2, #8
 800366a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003672:	f043 0208 	orr.w	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003684:	2b00      	cmp	r3, #0
 8003686:	d012      	beq.n	80036ae <HAL_UART_IRQHandler+0x18a>
 8003688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00c      	beq.n	80036ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800369c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8214 	beq.w	8003ae2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003702:	2b00      	cmp	r3, #0
 8003704:	d04f      	beq.n	80037a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ff3c 	bl	8004584 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d141      	bne.n	800379e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3308      	adds	r3, #8
 8003720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3308      	adds	r3, #8
 8003742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003746:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800374a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800375e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1d9      	bne.n	800371a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	2b00      	cmp	r3, #0
 800376c:	d013      	beq.n	8003796 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <HAL_UART_IRQHandler+0x29c>)
 8003774:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe f89d 	bl	80018ba <HAL_DMA_Abort_IT>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d017      	beq.n	80037b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003790:	4610      	mov	r0, r2
 8003792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003794:	e00f      	b.n	80037b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9ae 	bl	8003af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	e00b      	b.n	80037b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9aa 	bl	8003af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e007      	b.n	80037b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9a6 	bl	8003af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80037b4:	e195      	b.n	8003ae2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b6:	bf00      	nop
    return;
 80037b8:	e193      	b.n	8003ae2 <HAL_UART_IRQHandler+0x5be>
 80037ba:	bf00      	nop
 80037bc:	04000120 	.word	0x04000120
 80037c0:	0800464d 	.word	0x0800464d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	f040 814e 	bne.w	8003a6a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8147 	beq.w	8003a6a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8140 	beq.w	8003a6a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2210      	movs	r2, #16
 80037f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	f040 80b8 	bne.w	8003972 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800380e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8167 	beq.w	8003ae6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800381e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003822:	429a      	cmp	r2, r3
 8003824:	f080 815f 	bcs.w	8003ae6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800382e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 8086 	bne.w	8003950 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800385c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800386e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003872:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800387a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1da      	bne.n	8003844 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3308      	adds	r3, #8
 8003894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800389e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e1      	bne.n	800388e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3308      	adds	r3, #8
 80038d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e3      	bne.n	80038ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800391e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003920:	f023 0310 	bic.w	r3, r3, #16
 8003924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003932:	65bb      	str	r3, [r7, #88]	; 0x58
 8003934:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e4      	bne.n	8003910 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd ff77 	bl	800183e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003962:	b29b      	uxth	r3, r3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	b29b      	uxth	r3, r3
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8ce 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003970:	e0b9      	b.n	8003ae6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800397e:	b29b      	uxth	r3, r3
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80ab 	beq.w	8003aea <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80a6 	beq.w	8003aea <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039c0:	647b      	str	r3, [r7, #68]	; 0x44
 80039c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e4      	bne.n	800399e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3308      	adds	r3, #8
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	623b      	str	r3, [r7, #32]
   return(result);
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3308      	adds	r3, #8
 80039f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039f8:	633a      	str	r2, [r7, #48]	; 0x30
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e3      	bne.n	80039d4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f023 0310 	bic.w	r3, r3, #16
 8003a34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	69b9      	ldr	r1, [r7, #24]
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e4      	bne.n	8003a20 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f852 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a68:	e03f      	b.n	8003aea <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <HAL_UART_IRQHandler+0x570>
 8003a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f001 f895 	bl	8004bbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a92:	e02d      	b.n	8003af0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00e      	beq.n	8003abe <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01c      	beq.n	8003aee <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
    }
    return;
 8003abc:	e017      	b.n	8003aee <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d012      	beq.n	8003af0 <HAL_UART_IRQHandler+0x5cc>
 8003aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fe8a 	bl	80047f0 <UART_EndTransmit_IT>
    return;
 8003adc:	e008      	b.n	8003af0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ade:	bf00      	nop
 8003ae0:	e006      	b.n	8003af0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003aee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003af0:	37e8      	adds	r7, #232	; 0xe8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop

08003af8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b28:	b08a      	sub	sp, #40	; 0x28
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4ba4      	ldr	r3, [pc, #656]	; (8003de4 <UART_SetConfig+0x2c0>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a99      	ldr	r2, [pc, #612]	; (8003de8 <UART_SetConfig+0x2c4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a90      	ldr	r2, [pc, #576]	; (8003dec <UART_SetConfig+0x2c8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d126      	bne.n	8003bfc <UART_SetConfig+0xd8>
 8003bae:	4b90      	ldr	r3, [pc, #576]	; (8003df0 <UART_SetConfig+0x2cc>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d81b      	bhi.n	8003bf4 <UART_SetConfig+0xd0>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0xa0>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003be5 	.word	0x08003be5
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003bed 	.word	0x08003bed
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bda:	e116      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be2:	e112      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003be4:	2304      	movs	r3, #4
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bea:	e10e      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003bec:	2308      	movs	r3, #8
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf2:	e10a      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfa:	e106      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a7c      	ldr	r2, [pc, #496]	; (8003df4 <UART_SetConfig+0x2d0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d138      	bne.n	8003c78 <UART_SetConfig+0x154>
 8003c06:	4b7a      	ldr	r3, [pc, #488]	; (8003df0 <UART_SetConfig+0x2cc>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b0c      	cmp	r3, #12
 8003c12:	d82d      	bhi.n	8003c70 <UART_SetConfig+0x14c>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <UART_SetConfig+0xf8>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003c71 	.word	0x08003c71
 8003c28:	08003c71 	.word	0x08003c71
 8003c2c:	08003c61 	.word	0x08003c61
 8003c30:	08003c71 	.word	0x08003c71
 8003c34:	08003c71 	.word	0x08003c71
 8003c38:	08003c71 	.word	0x08003c71
 8003c3c:	08003c59 	.word	0x08003c59
 8003c40:	08003c71 	.word	0x08003c71
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c69 	.word	0x08003c69
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c56:	e0d8      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5e:	e0d4      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003c60:	2304      	movs	r3, #4
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c66:	e0d0      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6e:	e0cc      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003c70:	2310      	movs	r3, #16
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e0c8      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a5e      	ldr	r2, [pc, #376]	; (8003df8 <UART_SetConfig+0x2d4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d125      	bne.n	8003cce <UART_SetConfig+0x1aa>
 8003c82:	4b5b      	ldr	r3, [pc, #364]	; (8003df0 <UART_SetConfig+0x2cc>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c8c:	2b30      	cmp	r3, #48	; 0x30
 8003c8e:	d016      	beq.n	8003cbe <UART_SetConfig+0x19a>
 8003c90:	2b30      	cmp	r3, #48	; 0x30
 8003c92:	d818      	bhi.n	8003cc6 <UART_SetConfig+0x1a2>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d00a      	beq.n	8003cae <UART_SetConfig+0x18a>
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d814      	bhi.n	8003cc6 <UART_SetConfig+0x1a2>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <UART_SetConfig+0x182>
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d008      	beq.n	8003cb6 <UART_SetConfig+0x192>
 8003ca4:	e00f      	b.n	8003cc6 <UART_SetConfig+0x1a2>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cac:	e0ad      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb4:	e0a9      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cbc:	e0a5      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc4:	e0a1      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ccc:	e09d      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a4a      	ldr	r2, [pc, #296]	; (8003dfc <UART_SetConfig+0x2d8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d125      	bne.n	8003d24 <UART_SetConfig+0x200>
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <UART_SetConfig+0x2cc>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ce2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ce4:	d016      	beq.n	8003d14 <UART_SetConfig+0x1f0>
 8003ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ce8:	d818      	bhi.n	8003d1c <UART_SetConfig+0x1f8>
 8003cea:	2b80      	cmp	r3, #128	; 0x80
 8003cec:	d00a      	beq.n	8003d04 <UART_SetConfig+0x1e0>
 8003cee:	2b80      	cmp	r3, #128	; 0x80
 8003cf0:	d814      	bhi.n	8003d1c <UART_SetConfig+0x1f8>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <UART_SetConfig+0x1d8>
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d008      	beq.n	8003d0c <UART_SetConfig+0x1e8>
 8003cfa:	e00f      	b.n	8003d1c <UART_SetConfig+0x1f8>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d02:	e082      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d04:	2302      	movs	r3, #2
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0a:	e07e      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d12:	e07a      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d14:	2308      	movs	r3, #8
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e076      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d22:	e072      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <UART_SetConfig+0x2dc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d12a      	bne.n	8003d84 <UART_SetConfig+0x260>
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <UART_SetConfig+0x2cc>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d3c:	d01a      	beq.n	8003d74 <UART_SetConfig+0x250>
 8003d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d42:	d81b      	bhi.n	8003d7c <UART_SetConfig+0x258>
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d48:	d00c      	beq.n	8003d64 <UART_SetConfig+0x240>
 8003d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d4e:	d815      	bhi.n	8003d7c <UART_SetConfig+0x258>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <UART_SetConfig+0x238>
 8003d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d58:	d008      	beq.n	8003d6c <UART_SetConfig+0x248>
 8003d5a:	e00f      	b.n	8003d7c <UART_SetConfig+0x258>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d62:	e052      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d64:	2302      	movs	r3, #2
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6a:	e04e      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e04a      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d74:	2308      	movs	r3, #8
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e046      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e042      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <UART_SetConfig+0x2c4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d13a      	bne.n	8003e04 <UART_SetConfig+0x2e0>
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <UART_SetConfig+0x2cc>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d9c:	d01a      	beq.n	8003dd4 <UART_SetConfig+0x2b0>
 8003d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da2:	d81b      	bhi.n	8003ddc <UART_SetConfig+0x2b8>
 8003da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da8:	d00c      	beq.n	8003dc4 <UART_SetConfig+0x2a0>
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dae:	d815      	bhi.n	8003ddc <UART_SetConfig+0x2b8>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <UART_SetConfig+0x298>
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db8:	d008      	beq.n	8003dcc <UART_SetConfig+0x2a8>
 8003dba:	e00f      	b.n	8003ddc <UART_SetConfig+0x2b8>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc2:	e022      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dca:	e01e      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd2:	e01a      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dda:	e016      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e012      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003de4:	efff69f3 	.word	0xefff69f3
 8003de8:	40008000 	.word	0x40008000
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40004400 	.word	0x40004400
 8003df8:	40004800 	.word	0x40004800
 8003dfc:	40004c00 	.word	0x40004c00
 8003e00:	40005000 	.word	0x40005000
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a9f      	ldr	r2, [pc, #636]	; (800408c <UART_SetConfig+0x568>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d17a      	bne.n	8003f0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d824      	bhi.n	8003e66 <UART_SetConfig+0x342>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <UART_SetConfig+0x300>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e67 	.word	0x08003e67
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e57 	.word	0x08003e57
 8003e38:	08003e67 	.word	0x08003e67
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e67 	.word	0x08003e67
 8003e44:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7fe fd2c 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 8003e4c:	61f8      	str	r0, [r7, #28]
        break;
 8003e4e:	e010      	b.n	8003e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b8f      	ldr	r3, [pc, #572]	; (8004090 <UART_SetConfig+0x56c>)
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e00d      	b.n	8003e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe fc8d 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8003e5a:	61f8      	str	r0, [r7, #28]
        break;
 8003e5c:	e009      	b.n	8003e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e005      	b.n	8003e72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80fb 	beq.w	8004070 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d305      	bcc.n	8003e96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d903      	bls.n	8003e9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e9c:	e0e8      	b.n	8004070 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	461c      	mov	r4, r3
 8003ea4:	4615      	mov	r5, r2
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	022b      	lsls	r3, r5, #8
 8003eb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003eb4:	0222      	lsls	r2, r4, #8
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	6849      	ldr	r1, [r1, #4]
 8003eba:	0849      	lsrs	r1, r1, #1
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	4688      	mov	r8, r1
 8003ec0:	4681      	mov	r9, r0
 8003ec2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ec6:	eb43 0b09 	adc.w	fp, r3, r9
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed8:	4650      	mov	r0, sl
 8003eda:	4659      	mov	r1, fp
 8003edc:	f7fc f9e0 	bl	80002a0 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eee:	d308      	bcc.n	8003f02 <UART_SetConfig+0x3de>
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef6:	d204      	bcs.n	8003f02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	e0b6      	b.n	8004070 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f08:	e0b2      	b.n	8004070 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f12:	d15e      	bne.n	8003fd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d828      	bhi.n	8003f6e <UART_SetConfig+0x44a>
 8003f1c:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <UART_SetConfig+0x400>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f51 	.word	0x08003f51
 8003f2c:	08003f59 	.word	0x08003f59
 8003f30:	08003f6f 	.word	0x08003f6f
 8003f34:	08003f5f 	.word	0x08003f5f
 8003f38:	08003f6f 	.word	0x08003f6f
 8003f3c:	08003f6f 	.word	0x08003f6f
 8003f40:	08003f6f 	.word	0x08003f6f
 8003f44:	08003f67 	.word	0x08003f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7fe fcac 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 8003f4c:	61f8      	str	r0, [r7, #28]
        break;
 8003f4e:	e014      	b.n	8003f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7fe fcbe 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8003f54:	61f8      	str	r0, [r7, #28]
        break;
 8003f56:	e010      	b.n	8003f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f58:	4b4d      	ldr	r3, [pc, #308]	; (8004090 <UART_SetConfig+0x56c>)
 8003f5a:	61fb      	str	r3, [r7, #28]
        break;
 8003f5c:	e00d      	b.n	8003f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5e:	f7fe fc09 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8003f62:	61f8      	str	r0, [r7, #28]
        break;
 8003f64:	e009      	b.n	8003f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6a:	61fb      	str	r3, [r7, #28]
        break;
 8003f6c:	e005      	b.n	8003f7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d077      	beq.n	8004070 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	005a      	lsls	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	441a      	add	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b0f      	cmp	r3, #15
 8003f9a:	d916      	bls.n	8003fca <UART_SetConfig+0x4a6>
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa2:	d212      	bcs.n	8003fca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f023 030f 	bic.w	r3, r3, #15
 8003fac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	8afb      	ldrh	r3, [r7, #22]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	8afa      	ldrh	r2, [r7, #22]
 8003fc6:	60da      	str	r2, [r3, #12]
 8003fc8:	e052      	b.n	8004070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fd0:	e04e      	b.n	8004070 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d827      	bhi.n	800402a <UART_SetConfig+0x506>
 8003fda:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <UART_SetConfig+0x4bc>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	0800402b 	.word	0x0800402b
 8003ff0:	0800401b 	.word	0x0800401b
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	0800402b 	.word	0x0800402b
 8003ffc:	0800402b 	.word	0x0800402b
 8004000:	08004023 	.word	0x08004023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe fc4e 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 8004008:	61f8      	str	r0, [r7, #28]
        break;
 800400a:	e014      	b.n	8004036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7fe fc60 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8004010:	61f8      	str	r0, [r7, #28]
        break;
 8004012:	e010      	b.n	8004036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004014:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <UART_SetConfig+0x56c>)
 8004016:	61fb      	str	r3, [r7, #28]
        break;
 8004018:	e00d      	b.n	8004036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401a:	f7fe fbab 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 800401e:	61f8      	str	r0, [r7, #28]
        break;
 8004020:	e009      	b.n	8004036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004026:	61fb      	str	r3, [r7, #28]
        break;
 8004028:	e005      	b.n	8004036 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004034:	bf00      	nop
    }

    if (pclk != 0U)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d019      	beq.n	8004070 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	085a      	lsrs	r2, r3, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	441a      	add	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b0f      	cmp	r3, #15
 8004054:	d909      	bls.n	800406a <UART_SetConfig+0x546>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	d205      	bcs.n	800406a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60da      	str	r2, [r3, #12]
 8004068:	e002      	b.n	8004070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800407c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004080:	4618      	mov	r0, r3
 8004082:	3728      	adds	r7, #40	; 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408a:	bf00      	nop
 800408c:	40008000 	.word	0x40008000
 8004090:	00f42400 	.word	0x00f42400

08004094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01a      	beq.n	80041aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004192:	d10a      	bne.n	80041aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b098      	sub	sp, #96	; 0x60
 80041dc:	af02      	add	r7, sp, #8
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041e8:	f7fd fa0c 	bl	8001604 <HAL_GetTick>
 80041ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d12e      	bne.n	800425a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004204:	2200      	movs	r2, #0
 8004206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f88c 	bl	8004328 <UART_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d021      	beq.n	800425a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800422a:	653b      	str	r3, [r7, #80]	; 0x50
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004234:	647b      	str	r3, [r7, #68]	; 0x44
 8004236:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800423a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e6      	bne.n	8004216 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e062      	b.n	8004320 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b04      	cmp	r3, #4
 8004266:	d149      	bne.n	80042fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004270:	2200      	movs	r2, #0
 8004272:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f856 	bl	8004328 <UART_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d03c      	beq.n	80042fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	623b      	str	r3, [r7, #32]
   return(result);
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a0:	633b      	str	r3, [r7, #48]	; 0x30
 80042a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e6      	bne.n	8004282 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3308      	adds	r3, #8
 80042ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042d4:	61fa      	str	r2, [r7, #28]
 80042d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	617b      	str	r3, [r7, #20]
   return(result);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e011      	b.n	8004320 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3758      	adds	r7, #88	; 0x58
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004338:	e049      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d045      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fd f95f 	bl	8001604 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <UART_WaitOnFlagUntilTimeout+0x30>
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e048      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d031      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d110      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2208      	movs	r2, #8
 800437e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f8ff 	bl	8004584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2208      	movs	r2, #8
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e029      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a8:	d111      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f8e5 	bl	8004584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e00f      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4013      	ands	r3, r2
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	bf0c      	ite	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	2300      	movne	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d0a6      	beq.n	800433a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b097      	sub	sp, #92	; 0x5c
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442a:	d10e      	bne.n	800444a <UART_Start_Receive_IT+0x52>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d105      	bne.n	8004440 <UART_Start_Receive_IT+0x48>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f240 12ff 	movw	r2, #511	; 0x1ff
 800443a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800443e:	e02d      	b.n	800449c <UART_Start_Receive_IT+0xa4>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	22ff      	movs	r2, #255	; 0xff
 8004444:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004448:	e028      	b.n	800449c <UART_Start_Receive_IT+0xa4>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10d      	bne.n	800446e <UART_Start_Receive_IT+0x76>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <UART_Start_Receive_IT+0x6c>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	22ff      	movs	r2, #255	; 0xff
 800445e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004462:	e01b      	b.n	800449c <UART_Start_Receive_IT+0xa4>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	227f      	movs	r2, #127	; 0x7f
 8004468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800446c:	e016      	b.n	800449c <UART_Start_Receive_IT+0xa4>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004476:	d10d      	bne.n	8004494 <UART_Start_Receive_IT+0x9c>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <UART_Start_Receive_IT+0x92>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	227f      	movs	r2, #127	; 0x7f
 8004484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004488:	e008      	b.n	800449c <UART_Start_Receive_IT+0xa4>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	223f      	movs	r2, #63	; 0x3f
 800448e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004492:	e003      	b.n	800449c <UART_Start_Receive_IT+0xa4>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2222      	movs	r2, #34	; 0x22
 80044a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3308      	adds	r3, #8
 80044b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	657b      	str	r3, [r7, #84]	; 0x54
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80044ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e8:	d107      	bne.n	80044fa <UART_Start_Receive_IT+0x102>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d103      	bne.n	80044fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a21      	ldr	r2, [pc, #132]	; (800457c <UART_Start_Receive_IT+0x184>)
 80044f6:	669a      	str	r2, [r3, #104]	; 0x68
 80044f8:	e002      	b.n	8004500 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a20      	ldr	r2, [pc, #128]	; (8004580 <UART_Start_Receive_IT+0x188>)
 80044fe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d019      	beq.n	800453c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800451c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
 8004528:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800452c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e6      	bne.n	8004508 <UART_Start_Receive_IT+0x110>
 800453a:	e018      	b.n	800456e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	613b      	str	r3, [r7, #16]
   return(result);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f043 0320 	orr.w	r3, r3, #32
 8004550:	653b      	str	r3, [r7, #80]	; 0x50
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	69f9      	ldr	r1, [r7, #28]
 8004560:	6a3a      	ldr	r2, [r7, #32]
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	61bb      	str	r3, [r7, #24]
   return(result);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e6      	bne.n	800453c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	375c      	adds	r7, #92	; 0x5c
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	08004a01 	.word	0x08004a01
 8004580:	08004845 	.word	0x08004845

08004584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b095      	sub	sp, #84	; 0x54
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
 80045ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e6      	bne.n	800458c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3308      	adds	r3, #8
 80045c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3308      	adds	r3, #8
 80045dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e5      	bne.n	80045be <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d118      	bne.n	800462c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	60bb      	str	r3, [r7, #8]
   return(result);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f023 0310 	bic.w	r3, r3, #16
 800460e:	647b      	str	r3, [r7, #68]	; 0x44
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6979      	ldr	r1, [r7, #20]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	613b      	str	r3, [r7, #16]
   return(result);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e6      	bne.n	80045fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004640:	bf00      	nop
 8004642:	3754      	adds	r7, #84	; 0x54
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff fa44 	bl	8003af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b08f      	sub	sp, #60	; 0x3c
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004684:	2b21      	cmp	r3, #33	; 0x21
 8004686:	d14d      	bne.n	8004724 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d132      	bne.n	80046fa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e6      	bne.n	8004694 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6979      	ldr	r1, [r7, #20]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	613b      	str	r3, [r7, #16]
   return(result);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e6      	bne.n	80046c6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80046f8:	e014      	b.n	8004724 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	b292      	uxth	r2, r2
 8004706:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004724:	bf00      	nop
 8004726:	373c      	adds	r7, #60	; 0x3c
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b091      	sub	sp, #68	; 0x44
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800473c:	2b21      	cmp	r3, #33	; 0x21
 800473e:	d151      	bne.n	80047e4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d132      	bne.n	80047b2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	623b      	str	r3, [r7, #32]
   return(result);
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004760:	63bb      	str	r3, [r7, #56]	; 0x38
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	633b      	str	r3, [r7, #48]	; 0x30
 800476c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e6      	bne.n	800474c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	60fb      	str	r3, [r7, #12]
   return(result);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004792:	637b      	str	r3, [r7, #52]	; 0x34
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	617b      	str	r3, [r7, #20]
   return(result);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e6      	bne.n	800477e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80047b0:	e018      	b.n	80047e4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80047b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ba:	881a      	ldrh	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c4:	b292      	uxth	r2, r2
 80047c6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047cc:	1c9a      	adds	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80047e4:	bf00      	nop
 80047e6:	3744      	adds	r7, #68	; 0x44
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	60bb      	str	r3, [r7, #8]
   return(result);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	613b      	str	r3, [r7, #16]
   return(result);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e6      	bne.n	80047f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fb ff7a 	bl	8000730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800483c:	bf00      	nop
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b09c      	sub	sp, #112	; 0x70
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004852:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485c:	2b22      	cmp	r3, #34	; 0x22
 800485e:	f040 80be 	bne.w	80049de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004868:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800486c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004870:	b2d9      	uxtb	r1, r3
 8004872:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004876:	b2da      	uxtb	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	400a      	ands	r2, r1
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f040 80a3 	bne.w	80049f2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80048cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e6      	bne.n	80048ac <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004900:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800490c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a34      	ldr	r2, [pc, #208]	; (80049fc <UART_RxISR_8BIT+0x1b8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d01f      	beq.n	8004970 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d018      	beq.n	8004970 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	623b      	str	r3, [r7, #32]
   return(result);
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004952:	663b      	str	r3, [r7, #96]	; 0x60
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
 800495e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e6      	bne.n	800493e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004974:	2b01      	cmp	r3, #1
 8004976:	d12e      	bne.n	80049d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	60fb      	str	r3, [r7, #12]
   return(result);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0310 	bic.w	r3, r3, #16
 8004992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	69b9      	ldr	r1, [r7, #24]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	617b      	str	r3, [r7, #20]
   return(result);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e6      	bne.n	800497e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d103      	bne.n	80049c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2210      	movs	r2, #16
 80049c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff f89c 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049d4:	e00d      	b.n	80049f2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fb fee4 	bl	80007a4 <HAL_UART_RxCpltCallback>
}
 80049dc:	e009      	b.n	80049f2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	8b1b      	ldrh	r3, [r3, #24]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0208 	orr.w	r2, r2, #8
 80049ee:	b292      	uxth	r2, r2
 80049f0:	831a      	strh	r2, [r3, #24]
}
 80049f2:	bf00      	nop
 80049f4:	3770      	adds	r7, #112	; 0x70
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40008000 	.word	0x40008000

08004a00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b09c      	sub	sp, #112	; 0x70
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a0e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a18:	2b22      	cmp	r3, #34	; 0x22
 8004a1a:	f040 80be 	bne.w	8004b9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004a32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004a36:	4013      	ands	r3, r2
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	1c9a      	adds	r2, r3, #2
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 80a3 	bne.w	8004bae <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a86:	657b      	str	r3, [r7, #84]	; 0x54
 8004a88:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e6      	bne.n	8004a68 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aba:	643a      	str	r2, [r7, #64]	; 0x40
 8004abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e5      	bne.n	8004a9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a34      	ldr	r2, [pc, #208]	; (8004bb8 <UART_RxISR_16BIT+0x1b8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d01f      	beq.n	8004b2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d018      	beq.n	8004b2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e6      	bne.n	8004afa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d12e      	bne.n	8004b92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 0310 	bic.w	r3, r3, #16
 8004b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	613b      	str	r3, [r7, #16]
   return(result);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e6      	bne.n	8004b3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d103      	bne.n	8004b82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fe ffbe 	bl	8003b0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b90:	e00d      	b.n	8004bae <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fb fe06 	bl	80007a4 <HAL_UART_RxCpltCallback>
}
 8004b98:	e009      	b.n	8004bae <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	8b1b      	ldrh	r3, [r3, #24]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	b292      	uxth	r2, r2
 8004bac:	831a      	strh	r2, [r3, #24]
}
 8004bae:	bf00      	nop
 8004bb0:	3770      	adds	r7, #112	; 0x70
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40008000 	.word	0x40008000

08004bbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <atoi>:
 8004bd0:	220a      	movs	r2, #10
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	f000 b9a2 	b.w	8004f1c <strtol>

08004bd8 <malloc>:
 8004bd8:	4b02      	ldr	r3, [pc, #8]	; (8004be4 <malloc+0xc>)
 8004bda:	4601      	mov	r1, r0
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	f000 b823 	b.w	8004c28 <_malloc_r>
 8004be2:	bf00      	nop
 8004be4:	20000064 	.word	0x20000064

08004be8 <sbrk_aligned>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	4e0e      	ldr	r6, [pc, #56]	; (8004c24 <sbrk_aligned+0x3c>)
 8004bec:	460c      	mov	r4, r1
 8004bee:	6831      	ldr	r1, [r6, #0]
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	b911      	cbnz	r1, 8004bfa <sbrk_aligned+0x12>
 8004bf4:	f000 fb4a 	bl	800528c <_sbrk_r>
 8004bf8:	6030      	str	r0, [r6, #0]
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 fb45 	bl	800528c <_sbrk_r>
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	d00a      	beq.n	8004c1c <sbrk_aligned+0x34>
 8004c06:	1cc4      	adds	r4, r0, #3
 8004c08:	f024 0403 	bic.w	r4, r4, #3
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	d007      	beq.n	8004c20 <sbrk_aligned+0x38>
 8004c10:	1a21      	subs	r1, r4, r0
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 fb3a 	bl	800528c <_sbrk_r>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d101      	bne.n	8004c20 <sbrk_aligned+0x38>
 8004c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c20:	4620      	mov	r0, r4
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	20000d2c 	.word	0x20000d2c

08004c28 <_malloc_r>:
 8004c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c2c:	1ccd      	adds	r5, r1, #3
 8004c2e:	f025 0503 	bic.w	r5, r5, #3
 8004c32:	3508      	adds	r5, #8
 8004c34:	2d0c      	cmp	r5, #12
 8004c36:	bf38      	it	cc
 8004c38:	250c      	movcc	r5, #12
 8004c3a:	2d00      	cmp	r5, #0
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	db01      	blt.n	8004c44 <_malloc_r+0x1c>
 8004c40:	42a9      	cmp	r1, r5
 8004c42:	d905      	bls.n	8004c50 <_malloc_r+0x28>
 8004c44:	230c      	movs	r3, #12
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	2600      	movs	r6, #0
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d24 <_malloc_r+0xfc>
 8004c54:	f000 f868 	bl	8004d28 <__malloc_lock>
 8004c58:	f8d8 3000 	ldr.w	r3, [r8]
 8004c5c:	461c      	mov	r4, r3
 8004c5e:	bb5c      	cbnz	r4, 8004cb8 <_malloc_r+0x90>
 8004c60:	4629      	mov	r1, r5
 8004c62:	4638      	mov	r0, r7
 8004c64:	f7ff ffc0 	bl	8004be8 <sbrk_aligned>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	d155      	bne.n	8004d1a <_malloc_r+0xf2>
 8004c6e:	f8d8 4000 	ldr.w	r4, [r8]
 8004c72:	4626      	mov	r6, r4
 8004c74:	2e00      	cmp	r6, #0
 8004c76:	d145      	bne.n	8004d04 <_malloc_r+0xdc>
 8004c78:	2c00      	cmp	r4, #0
 8004c7a:	d048      	beq.n	8004d0e <_malloc_r+0xe6>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4638      	mov	r0, r7
 8004c82:	eb04 0903 	add.w	r9, r4, r3
 8004c86:	f000 fb01 	bl	800528c <_sbrk_r>
 8004c8a:	4581      	cmp	r9, r0
 8004c8c:	d13f      	bne.n	8004d0e <_malloc_r+0xe6>
 8004c8e:	6821      	ldr	r1, [r4, #0]
 8004c90:	1a6d      	subs	r5, r5, r1
 8004c92:	4629      	mov	r1, r5
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff ffa7 	bl	8004be8 <sbrk_aligned>
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d037      	beq.n	8004d0e <_malloc_r+0xe6>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	442b      	add	r3, r5
 8004ca2:	6023      	str	r3, [r4, #0]
 8004ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d038      	beq.n	8004d1e <_malloc_r+0xf6>
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	42a2      	cmp	r2, r4
 8004cb0:	d12b      	bne.n	8004d0a <_malloc_r+0xe2>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	e00f      	b.n	8004cd8 <_malloc_r+0xb0>
 8004cb8:	6822      	ldr	r2, [r4, #0]
 8004cba:	1b52      	subs	r2, r2, r5
 8004cbc:	d41f      	bmi.n	8004cfe <_malloc_r+0xd6>
 8004cbe:	2a0b      	cmp	r2, #11
 8004cc0:	d917      	bls.n	8004cf2 <_malloc_r+0xca>
 8004cc2:	1961      	adds	r1, r4, r5
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	6025      	str	r5, [r4, #0]
 8004cc8:	bf18      	it	ne
 8004cca:	6059      	strne	r1, [r3, #4]
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	bf08      	it	eq
 8004cd0:	f8c8 1000 	streq.w	r1, [r8]
 8004cd4:	5162      	str	r2, [r4, r5]
 8004cd6:	604b      	str	r3, [r1, #4]
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f104 060b 	add.w	r6, r4, #11
 8004cde:	f000 f829 	bl	8004d34 <__malloc_unlock>
 8004ce2:	f026 0607 	bic.w	r6, r6, #7
 8004ce6:	1d23      	adds	r3, r4, #4
 8004ce8:	1af2      	subs	r2, r6, r3
 8004cea:	d0ae      	beq.n	8004c4a <_malloc_r+0x22>
 8004cec:	1b9b      	subs	r3, r3, r6
 8004cee:	50a3      	str	r3, [r4, r2]
 8004cf0:	e7ab      	b.n	8004c4a <_malloc_r+0x22>
 8004cf2:	42a3      	cmp	r3, r4
 8004cf4:	6862      	ldr	r2, [r4, #4]
 8004cf6:	d1dd      	bne.n	8004cb4 <_malloc_r+0x8c>
 8004cf8:	f8c8 2000 	str.w	r2, [r8]
 8004cfc:	e7ec      	b.n	8004cd8 <_malloc_r+0xb0>
 8004cfe:	4623      	mov	r3, r4
 8004d00:	6864      	ldr	r4, [r4, #4]
 8004d02:	e7ac      	b.n	8004c5e <_malloc_r+0x36>
 8004d04:	4634      	mov	r4, r6
 8004d06:	6876      	ldr	r6, [r6, #4]
 8004d08:	e7b4      	b.n	8004c74 <_malloc_r+0x4c>
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	e7cc      	b.n	8004ca8 <_malloc_r+0x80>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4638      	mov	r0, r7
 8004d14:	f000 f80e 	bl	8004d34 <__malloc_unlock>
 8004d18:	e797      	b.n	8004c4a <_malloc_r+0x22>
 8004d1a:	6025      	str	r5, [r4, #0]
 8004d1c:	e7dc      	b.n	8004cd8 <_malloc_r+0xb0>
 8004d1e:	605b      	str	r3, [r3, #4]
 8004d20:	deff      	udf	#255	; 0xff
 8004d22:	bf00      	nop
 8004d24:	20000d28 	.word	0x20000d28

08004d28 <__malloc_lock>:
 8004d28:	4801      	ldr	r0, [pc, #4]	; (8004d30 <__malloc_lock+0x8>)
 8004d2a:	f000 bafc 	b.w	8005326 <__retarget_lock_acquire_recursive>
 8004d2e:	bf00      	nop
 8004d30:	20000e70 	.word	0x20000e70

08004d34 <__malloc_unlock>:
 8004d34:	4801      	ldr	r0, [pc, #4]	; (8004d3c <__malloc_unlock+0x8>)
 8004d36:	f000 baf7 	b.w	8005328 <__retarget_lock_release_recursive>
 8004d3a:	bf00      	nop
 8004d3c:	20000e70 	.word	0x20000e70

08004d40 <srand>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <srand+0x44>)
 8004d44:	681d      	ldr	r5, [r3, #0]
 8004d46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004d48:	4604      	mov	r4, r0
 8004d4a:	b9b3      	cbnz	r3, 8004d7a <srand+0x3a>
 8004d4c:	2018      	movs	r0, #24
 8004d4e:	f7ff ff43 	bl	8004bd8 <malloc>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6328      	str	r0, [r5, #48]	; 0x30
 8004d56:	b920      	cbnz	r0, 8004d62 <srand+0x22>
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <srand+0x48>)
 8004d5a:	480c      	ldr	r0, [pc, #48]	; (8004d8c <srand+0x4c>)
 8004d5c:	2146      	movs	r1, #70	; 0x46
 8004d5e:	f000 fae5 	bl	800532c <__assert_func>
 8004d62:	490b      	ldr	r1, [pc, #44]	; (8004d90 <srand+0x50>)
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <srand+0x54>)
 8004d66:	e9c0 1300 	strd	r1, r3, [r0]
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <srand+0x58>)
 8004d6c:	6083      	str	r3, [r0, #8]
 8004d6e:	230b      	movs	r3, #11
 8004d70:	8183      	strh	r3, [r0, #12]
 8004d72:	2100      	movs	r1, #0
 8004d74:	2001      	movs	r0, #1
 8004d76:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004d7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	611c      	str	r4, [r3, #16]
 8004d80:	615a      	str	r2, [r3, #20]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	20000064 	.word	0x20000064
 8004d88:	080063c4 	.word	0x080063c4
 8004d8c:	080063db 	.word	0x080063db
 8004d90:	abcd330e 	.word	0xabcd330e
 8004d94:	e66d1234 	.word	0xe66d1234
 8004d98:	0005deec 	.word	0x0005deec

08004d9c <rand>:
 8004d9c:	4b16      	ldr	r3, [pc, #88]	; (8004df8 <rand+0x5c>)
 8004d9e:	b510      	push	{r4, lr}
 8004da0:	681c      	ldr	r4, [r3, #0]
 8004da2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004da4:	b9b3      	cbnz	r3, 8004dd4 <rand+0x38>
 8004da6:	2018      	movs	r0, #24
 8004da8:	f7ff ff16 	bl	8004bd8 <malloc>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6320      	str	r0, [r4, #48]	; 0x30
 8004db0:	b920      	cbnz	r0, 8004dbc <rand+0x20>
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <rand+0x60>)
 8004db4:	4812      	ldr	r0, [pc, #72]	; (8004e00 <rand+0x64>)
 8004db6:	2152      	movs	r1, #82	; 0x52
 8004db8:	f000 fab8 	bl	800532c <__assert_func>
 8004dbc:	4911      	ldr	r1, [pc, #68]	; (8004e04 <rand+0x68>)
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <rand+0x6c>)
 8004dc0:	e9c0 1300 	strd	r1, r3, [r0]
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <rand+0x70>)
 8004dc6:	6083      	str	r3, [r0, #8]
 8004dc8:	230b      	movs	r3, #11
 8004dca:	8183      	strh	r3, [r0, #12]
 8004dcc:	2100      	movs	r1, #0
 8004dce:	2001      	movs	r0, #1
 8004dd0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004dd4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004dd6:	480e      	ldr	r0, [pc, #56]	; (8004e10 <rand+0x74>)
 8004dd8:	690b      	ldr	r3, [r1, #16]
 8004dda:	694c      	ldr	r4, [r1, #20]
 8004ddc:	4a0d      	ldr	r2, [pc, #52]	; (8004e14 <rand+0x78>)
 8004dde:	4358      	muls	r0, r3
 8004de0:	fb02 0004 	mla	r0, r2, r4, r0
 8004de4:	fba3 3202 	umull	r3, r2, r3, r2
 8004de8:	3301      	adds	r3, #1
 8004dea:	eb40 0002 	adc.w	r0, r0, r2
 8004dee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004df2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004df6:	bd10      	pop	{r4, pc}
 8004df8:	20000064 	.word	0x20000064
 8004dfc:	080063c4 	.word	0x080063c4
 8004e00:	080063db 	.word	0x080063db
 8004e04:	abcd330e 	.word	0xabcd330e
 8004e08:	e66d1234 	.word	0xe66d1234
 8004e0c:	0005deec 	.word	0x0005deec
 8004e10:	5851f42d 	.word	0x5851f42d
 8004e14:	4c957f2d 	.word	0x4c957f2d

08004e18 <_strtol_l.constprop.0>:
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1e:	d001      	beq.n	8004e24 <_strtol_l.constprop.0+0xc>
 8004e20:	2b24      	cmp	r3, #36	; 0x24
 8004e22:	d906      	bls.n	8004e32 <_strtol_l.constprop.0+0x1a>
 8004e24:	f000 fa54 	bl	80052d0 <__errno>
 8004e28:	2316      	movs	r3, #22
 8004e2a:	6003      	str	r3, [r0, #0]
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004f18 <_strtol_l.constprop.0+0x100>
 8004e36:	460d      	mov	r5, r1
 8004e38:	462e      	mov	r6, r5
 8004e3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e3e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004e42:	f017 0708 	ands.w	r7, r7, #8
 8004e46:	d1f7      	bne.n	8004e38 <_strtol_l.constprop.0+0x20>
 8004e48:	2c2d      	cmp	r4, #45	; 0x2d
 8004e4a:	d132      	bne.n	8004eb2 <_strtol_l.constprop.0+0x9a>
 8004e4c:	782c      	ldrb	r4, [r5, #0]
 8004e4e:	2701      	movs	r7, #1
 8004e50:	1cb5      	adds	r5, r6, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d05b      	beq.n	8004f0e <_strtol_l.constprop.0+0xf6>
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d109      	bne.n	8004e6e <_strtol_l.constprop.0+0x56>
 8004e5a:	2c30      	cmp	r4, #48	; 0x30
 8004e5c:	d107      	bne.n	8004e6e <_strtol_l.constprop.0+0x56>
 8004e5e:	782c      	ldrb	r4, [r5, #0]
 8004e60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004e64:	2c58      	cmp	r4, #88	; 0x58
 8004e66:	d14d      	bne.n	8004f04 <_strtol_l.constprop.0+0xec>
 8004e68:	786c      	ldrb	r4, [r5, #1]
 8004e6a:	2310      	movs	r3, #16
 8004e6c:	3502      	adds	r5, #2
 8004e6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004e72:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e76:	f04f 0e00 	mov.w	lr, #0
 8004e7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8004e7e:	4676      	mov	r6, lr
 8004e80:	fb03 8a19 	mls	sl, r3, r9, r8
 8004e84:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004e88:	f1bc 0f09 	cmp.w	ip, #9
 8004e8c:	d816      	bhi.n	8004ebc <_strtol_l.constprop.0+0xa4>
 8004e8e:	4664      	mov	r4, ip
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	dd24      	ble.n	8004ede <_strtol_l.constprop.0+0xc6>
 8004e94:	f1be 3fff 	cmp.w	lr, #4294967295
 8004e98:	d008      	beq.n	8004eac <_strtol_l.constprop.0+0x94>
 8004e9a:	45b1      	cmp	r9, r6
 8004e9c:	d31c      	bcc.n	8004ed8 <_strtol_l.constprop.0+0xc0>
 8004e9e:	d101      	bne.n	8004ea4 <_strtol_l.constprop.0+0x8c>
 8004ea0:	45a2      	cmp	sl, r4
 8004ea2:	db19      	blt.n	8004ed8 <_strtol_l.constprop.0+0xc0>
 8004ea4:	fb06 4603 	mla	r6, r6, r3, r4
 8004ea8:	f04f 0e01 	mov.w	lr, #1
 8004eac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004eb0:	e7e8      	b.n	8004e84 <_strtol_l.constprop.0+0x6c>
 8004eb2:	2c2b      	cmp	r4, #43	; 0x2b
 8004eb4:	bf04      	itt	eq
 8004eb6:	782c      	ldrbeq	r4, [r5, #0]
 8004eb8:	1cb5      	addeq	r5, r6, #2
 8004eba:	e7ca      	b.n	8004e52 <_strtol_l.constprop.0+0x3a>
 8004ebc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004ec0:	f1bc 0f19 	cmp.w	ip, #25
 8004ec4:	d801      	bhi.n	8004eca <_strtol_l.constprop.0+0xb2>
 8004ec6:	3c37      	subs	r4, #55	; 0x37
 8004ec8:	e7e2      	b.n	8004e90 <_strtol_l.constprop.0+0x78>
 8004eca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004ece:	f1bc 0f19 	cmp.w	ip, #25
 8004ed2:	d804      	bhi.n	8004ede <_strtol_l.constprop.0+0xc6>
 8004ed4:	3c57      	subs	r4, #87	; 0x57
 8004ed6:	e7db      	b.n	8004e90 <_strtol_l.constprop.0+0x78>
 8004ed8:	f04f 3eff 	mov.w	lr, #4294967295
 8004edc:	e7e6      	b.n	8004eac <_strtol_l.constprop.0+0x94>
 8004ede:	f1be 3fff 	cmp.w	lr, #4294967295
 8004ee2:	d105      	bne.n	8004ef0 <_strtol_l.constprop.0+0xd8>
 8004ee4:	2322      	movs	r3, #34	; 0x22
 8004ee6:	6003      	str	r3, [r0, #0]
 8004ee8:	4646      	mov	r6, r8
 8004eea:	b942      	cbnz	r2, 8004efe <_strtol_l.constprop.0+0xe6>
 8004eec:	4630      	mov	r0, r6
 8004eee:	e79e      	b.n	8004e2e <_strtol_l.constprop.0+0x16>
 8004ef0:	b107      	cbz	r7, 8004ef4 <_strtol_l.constprop.0+0xdc>
 8004ef2:	4276      	negs	r6, r6
 8004ef4:	2a00      	cmp	r2, #0
 8004ef6:	d0f9      	beq.n	8004eec <_strtol_l.constprop.0+0xd4>
 8004ef8:	f1be 0f00 	cmp.w	lr, #0
 8004efc:	d000      	beq.n	8004f00 <_strtol_l.constprop.0+0xe8>
 8004efe:	1e69      	subs	r1, r5, #1
 8004f00:	6011      	str	r1, [r2, #0]
 8004f02:	e7f3      	b.n	8004eec <_strtol_l.constprop.0+0xd4>
 8004f04:	2430      	movs	r4, #48	; 0x30
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1b1      	bne.n	8004e6e <_strtol_l.constprop.0+0x56>
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	e7af      	b.n	8004e6e <_strtol_l.constprop.0+0x56>
 8004f0e:	2c30      	cmp	r4, #48	; 0x30
 8004f10:	d0a5      	beq.n	8004e5e <_strtol_l.constprop.0+0x46>
 8004f12:	230a      	movs	r3, #10
 8004f14:	e7ab      	b.n	8004e6e <_strtol_l.constprop.0+0x56>
 8004f16:	bf00      	nop
 8004f18:	08006434 	.word	0x08006434

08004f1c <strtol>:
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	460a      	mov	r2, r1
 8004f20:	4601      	mov	r1, r0
 8004f22:	4802      	ldr	r0, [pc, #8]	; (8004f2c <strtol+0x10>)
 8004f24:	6800      	ldr	r0, [r0, #0]
 8004f26:	f7ff bf77 	b.w	8004e18 <_strtol_l.constprop.0>
 8004f2a:	bf00      	nop
 8004f2c:	20000064 	.word	0x20000064

08004f30 <std>:
 8004f30:	2300      	movs	r3, #0
 8004f32:	b510      	push	{r4, lr}
 8004f34:	4604      	mov	r4, r0
 8004f36:	e9c0 3300 	strd	r3, r3, [r0]
 8004f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f3e:	6083      	str	r3, [r0, #8]
 8004f40:	8181      	strh	r1, [r0, #12]
 8004f42:	6643      	str	r3, [r0, #100]	; 0x64
 8004f44:	81c2      	strh	r2, [r0, #14]
 8004f46:	6183      	str	r3, [r0, #24]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	305c      	adds	r0, #92	; 0x5c
 8004f4e:	f000 f935 	bl	80051bc <memset>
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <std+0x58>)
 8004f54:	6263      	str	r3, [r4, #36]	; 0x24
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <std+0x5c>)
 8004f58:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <std+0x60>)
 8004f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <std+0x64>)
 8004f60:	6323      	str	r3, [r4, #48]	; 0x30
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <std+0x68>)
 8004f64:	6224      	str	r4, [r4, #32]
 8004f66:	429c      	cmp	r4, r3
 8004f68:	d006      	beq.n	8004f78 <std+0x48>
 8004f6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004f6e:	4294      	cmp	r4, r2
 8004f70:	d002      	beq.n	8004f78 <std+0x48>
 8004f72:	33d0      	adds	r3, #208	; 0xd0
 8004f74:	429c      	cmp	r4, r3
 8004f76:	d105      	bne.n	8004f84 <std+0x54>
 8004f78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f80:	f000 b9d0 	b.w	8005324 <__retarget_lock_init_recursive>
 8004f84:	bd10      	pop	{r4, pc}
 8004f86:	bf00      	nop
 8004f88:	080050f5 	.word	0x080050f5
 8004f8c:	08005117 	.word	0x08005117
 8004f90:	0800514f 	.word	0x0800514f
 8004f94:	08005173 	.word	0x08005173
 8004f98:	20000d30 	.word	0x20000d30

08004f9c <stdio_exit_handler>:
 8004f9c:	4a02      	ldr	r2, [pc, #8]	; (8004fa8 <stdio_exit_handler+0xc>)
 8004f9e:	4903      	ldr	r1, [pc, #12]	; (8004fac <stdio_exit_handler+0x10>)
 8004fa0:	4803      	ldr	r0, [pc, #12]	; (8004fb0 <stdio_exit_handler+0x14>)
 8004fa2:	f000 b869 	b.w	8005078 <_fwalk_sglue>
 8004fa6:	bf00      	nop
 8004fa8:	2000000c 	.word	0x2000000c
 8004fac:	08005add 	.word	0x08005add
 8004fb0:	20000018 	.word	0x20000018

08004fb4 <cleanup_stdio>:
 8004fb4:	6841      	ldr	r1, [r0, #4]
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <cleanup_stdio+0x34>)
 8004fb8:	4299      	cmp	r1, r3
 8004fba:	b510      	push	{r4, lr}
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	d001      	beq.n	8004fc4 <cleanup_stdio+0x10>
 8004fc0:	f000 fd8c 	bl	8005adc <_fflush_r>
 8004fc4:	68a1      	ldr	r1, [r4, #8]
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <cleanup_stdio+0x38>)
 8004fc8:	4299      	cmp	r1, r3
 8004fca:	d002      	beq.n	8004fd2 <cleanup_stdio+0x1e>
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f000 fd85 	bl	8005adc <_fflush_r>
 8004fd2:	68e1      	ldr	r1, [r4, #12]
 8004fd4:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <cleanup_stdio+0x3c>)
 8004fd6:	4299      	cmp	r1, r3
 8004fd8:	d004      	beq.n	8004fe4 <cleanup_stdio+0x30>
 8004fda:	4620      	mov	r0, r4
 8004fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe0:	f000 bd7c 	b.w	8005adc <_fflush_r>
 8004fe4:	bd10      	pop	{r4, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000d30 	.word	0x20000d30
 8004fec:	20000d98 	.word	0x20000d98
 8004ff0:	20000e00 	.word	0x20000e00

08004ff4 <global_stdio_init.part.0>:
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <global_stdio_init.part.0+0x30>)
 8004ff8:	4c0b      	ldr	r4, [pc, #44]	; (8005028 <global_stdio_init.part.0+0x34>)
 8004ffa:	4a0c      	ldr	r2, [pc, #48]	; (800502c <global_stdio_init.part.0+0x38>)
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	4620      	mov	r0, r4
 8005000:	2200      	movs	r2, #0
 8005002:	2104      	movs	r1, #4
 8005004:	f7ff ff94 	bl	8004f30 <std>
 8005008:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800500c:	2201      	movs	r2, #1
 800500e:	2109      	movs	r1, #9
 8005010:	f7ff ff8e 	bl	8004f30 <std>
 8005014:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005018:	2202      	movs	r2, #2
 800501a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800501e:	2112      	movs	r1, #18
 8005020:	f7ff bf86 	b.w	8004f30 <std>
 8005024:	20000e68 	.word	0x20000e68
 8005028:	20000d30 	.word	0x20000d30
 800502c:	08004f9d 	.word	0x08004f9d

08005030 <__sfp_lock_acquire>:
 8005030:	4801      	ldr	r0, [pc, #4]	; (8005038 <__sfp_lock_acquire+0x8>)
 8005032:	f000 b978 	b.w	8005326 <__retarget_lock_acquire_recursive>
 8005036:	bf00      	nop
 8005038:	20000e71 	.word	0x20000e71

0800503c <__sfp_lock_release>:
 800503c:	4801      	ldr	r0, [pc, #4]	; (8005044 <__sfp_lock_release+0x8>)
 800503e:	f000 b973 	b.w	8005328 <__retarget_lock_release_recursive>
 8005042:	bf00      	nop
 8005044:	20000e71 	.word	0x20000e71

08005048 <__sinit>:
 8005048:	b510      	push	{r4, lr}
 800504a:	4604      	mov	r4, r0
 800504c:	f7ff fff0 	bl	8005030 <__sfp_lock_acquire>
 8005050:	6a23      	ldr	r3, [r4, #32]
 8005052:	b11b      	cbz	r3, 800505c <__sinit+0x14>
 8005054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005058:	f7ff bff0 	b.w	800503c <__sfp_lock_release>
 800505c:	4b04      	ldr	r3, [pc, #16]	; (8005070 <__sinit+0x28>)
 800505e:	6223      	str	r3, [r4, #32]
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <__sinit+0x2c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f5      	bne.n	8005054 <__sinit+0xc>
 8005068:	f7ff ffc4 	bl	8004ff4 <global_stdio_init.part.0>
 800506c:	e7f2      	b.n	8005054 <__sinit+0xc>
 800506e:	bf00      	nop
 8005070:	08004fb5 	.word	0x08004fb5
 8005074:	20000e68 	.word	0x20000e68

08005078 <_fwalk_sglue>:
 8005078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800507c:	4607      	mov	r7, r0
 800507e:	4688      	mov	r8, r1
 8005080:	4614      	mov	r4, r2
 8005082:	2600      	movs	r6, #0
 8005084:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005088:	f1b9 0901 	subs.w	r9, r9, #1
 800508c:	d505      	bpl.n	800509a <_fwalk_sglue+0x22>
 800508e:	6824      	ldr	r4, [r4, #0]
 8005090:	2c00      	cmp	r4, #0
 8005092:	d1f7      	bne.n	8005084 <_fwalk_sglue+0xc>
 8005094:	4630      	mov	r0, r6
 8005096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800509a:	89ab      	ldrh	r3, [r5, #12]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d907      	bls.n	80050b0 <_fwalk_sglue+0x38>
 80050a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050a4:	3301      	adds	r3, #1
 80050a6:	d003      	beq.n	80050b0 <_fwalk_sglue+0x38>
 80050a8:	4629      	mov	r1, r5
 80050aa:	4638      	mov	r0, r7
 80050ac:	47c0      	blx	r8
 80050ae:	4306      	orrs	r6, r0
 80050b0:	3568      	adds	r5, #104	; 0x68
 80050b2:	e7e9      	b.n	8005088 <_fwalk_sglue+0x10>

080050b4 <siprintf>:
 80050b4:	b40e      	push	{r1, r2, r3}
 80050b6:	b500      	push	{lr}
 80050b8:	b09c      	sub	sp, #112	; 0x70
 80050ba:	ab1d      	add	r3, sp, #116	; 0x74
 80050bc:	9002      	str	r0, [sp, #8]
 80050be:	9006      	str	r0, [sp, #24]
 80050c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050c4:	4809      	ldr	r0, [pc, #36]	; (80050ec <siprintf+0x38>)
 80050c6:	9107      	str	r1, [sp, #28]
 80050c8:	9104      	str	r1, [sp, #16]
 80050ca:	4909      	ldr	r1, [pc, #36]	; (80050f0 <siprintf+0x3c>)
 80050cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80050d0:	9105      	str	r1, [sp, #20]
 80050d2:	6800      	ldr	r0, [r0, #0]
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	a902      	add	r1, sp, #8
 80050d8:	f000 f9ec 	bl	80054b4 <_svfiprintf_r>
 80050dc:	9b02      	ldr	r3, [sp, #8]
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	b01c      	add	sp, #112	; 0x70
 80050e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050e8:	b003      	add	sp, #12
 80050ea:	4770      	bx	lr
 80050ec:	20000064 	.word	0x20000064
 80050f0:	ffff0208 	.word	0xffff0208

080050f4 <__sread>:
 80050f4:	b510      	push	{r4, lr}
 80050f6:	460c      	mov	r4, r1
 80050f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050fc:	f000 f8b4 	bl	8005268 <_read_r>
 8005100:	2800      	cmp	r0, #0
 8005102:	bfab      	itete	ge
 8005104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005106:	89a3      	ldrhlt	r3, [r4, #12]
 8005108:	181b      	addge	r3, r3, r0
 800510a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800510e:	bfac      	ite	ge
 8005110:	6563      	strge	r3, [r4, #84]	; 0x54
 8005112:	81a3      	strhlt	r3, [r4, #12]
 8005114:	bd10      	pop	{r4, pc}

08005116 <__swrite>:
 8005116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800511a:	461f      	mov	r7, r3
 800511c:	898b      	ldrh	r3, [r1, #12]
 800511e:	05db      	lsls	r3, r3, #23
 8005120:	4605      	mov	r5, r0
 8005122:	460c      	mov	r4, r1
 8005124:	4616      	mov	r6, r2
 8005126:	d505      	bpl.n	8005134 <__swrite+0x1e>
 8005128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512c:	2302      	movs	r3, #2
 800512e:	2200      	movs	r2, #0
 8005130:	f000 f888 	bl	8005244 <_lseek_r>
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800513a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	4632      	mov	r2, r6
 8005142:	463b      	mov	r3, r7
 8005144:	4628      	mov	r0, r5
 8005146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800514a:	f000 b8af 	b.w	80052ac <_write_r>

0800514e <__sseek>:
 800514e:	b510      	push	{r4, lr}
 8005150:	460c      	mov	r4, r1
 8005152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005156:	f000 f875 	bl	8005244 <_lseek_r>
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	bf15      	itete	ne
 8005160:	6560      	strne	r0, [r4, #84]	; 0x54
 8005162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800516a:	81a3      	strheq	r3, [r4, #12]
 800516c:	bf18      	it	ne
 800516e:	81a3      	strhne	r3, [r4, #12]
 8005170:	bd10      	pop	{r4, pc}

08005172 <__sclose>:
 8005172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005176:	f000 b843 	b.w	8005200 <_close_r>
	...

0800517c <_vsiprintf_r>:
 800517c:	b500      	push	{lr}
 800517e:	b09b      	sub	sp, #108	; 0x6c
 8005180:	9100      	str	r1, [sp, #0]
 8005182:	9104      	str	r1, [sp, #16]
 8005184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005188:	9105      	str	r1, [sp, #20]
 800518a:	9102      	str	r1, [sp, #8]
 800518c:	4905      	ldr	r1, [pc, #20]	; (80051a4 <_vsiprintf_r+0x28>)
 800518e:	9103      	str	r1, [sp, #12]
 8005190:	4669      	mov	r1, sp
 8005192:	f000 f98f 	bl	80054b4 <_svfiprintf_r>
 8005196:	9b00      	ldr	r3, [sp, #0]
 8005198:	2200      	movs	r2, #0
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	b01b      	add	sp, #108	; 0x6c
 800519e:	f85d fb04 	ldr.w	pc, [sp], #4
 80051a2:	bf00      	nop
 80051a4:	ffff0208 	.word	0xffff0208

080051a8 <vsiprintf>:
 80051a8:	4613      	mov	r3, r2
 80051aa:	460a      	mov	r2, r1
 80051ac:	4601      	mov	r1, r0
 80051ae:	4802      	ldr	r0, [pc, #8]	; (80051b8 <vsiprintf+0x10>)
 80051b0:	6800      	ldr	r0, [r0, #0]
 80051b2:	f7ff bfe3 	b.w	800517c <_vsiprintf_r>
 80051b6:	bf00      	nop
 80051b8:	20000064 	.word	0x20000064

080051bc <memset>:
 80051bc:	4402      	add	r2, r0
 80051be:	4603      	mov	r3, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <time>:
 80051cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051ce:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <time+0x30>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	4669      	mov	r1, sp
 80051d4:	4604      	mov	r4, r0
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	f000 f822 	bl	8005220 <_gettimeofday_r>
 80051dc:	2800      	cmp	r0, #0
 80051de:	bfbe      	ittt	lt
 80051e0:	f04f 32ff 	movlt.w	r2, #4294967295
 80051e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80051e8:	e9cd 2300 	strdlt	r2, r3, [sp]
 80051ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051f0:	b10c      	cbz	r4, 80051f6 <time+0x2a>
 80051f2:	e9c4 0100 	strd	r0, r1, [r4]
 80051f6:	b004      	add	sp, #16
 80051f8:	bd10      	pop	{r4, pc}
 80051fa:	bf00      	nop
 80051fc:	20000064 	.word	0x20000064

08005200 <_close_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4d06      	ldr	r5, [pc, #24]	; (800521c <_close_r+0x1c>)
 8005204:	2300      	movs	r3, #0
 8005206:	4604      	mov	r4, r0
 8005208:	4608      	mov	r0, r1
 800520a:	602b      	str	r3, [r5, #0]
 800520c:	f7fc f8e3 	bl	80013d6 <_close>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_close_r+0x1a>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b103      	cbz	r3, 800521a <_close_r+0x1a>
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	20000e6c 	.word	0x20000e6c

08005220 <_gettimeofday_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4d07      	ldr	r5, [pc, #28]	; (8005240 <_gettimeofday_r+0x20>)
 8005224:	2300      	movs	r3, #0
 8005226:	4604      	mov	r4, r0
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	f000 ff97 	bl	8006160 <_gettimeofday>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d102      	bne.n	800523c <_gettimeofday_r+0x1c>
 8005236:	682b      	ldr	r3, [r5, #0]
 8005238:	b103      	cbz	r3, 800523c <_gettimeofday_r+0x1c>
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	bd38      	pop	{r3, r4, r5, pc}
 800523e:	bf00      	nop
 8005240:	20000e6c 	.word	0x20000e6c

08005244 <_lseek_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4d07      	ldr	r5, [pc, #28]	; (8005264 <_lseek_r+0x20>)
 8005248:	4604      	mov	r4, r0
 800524a:	4608      	mov	r0, r1
 800524c:	4611      	mov	r1, r2
 800524e:	2200      	movs	r2, #0
 8005250:	602a      	str	r2, [r5, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	f7fc f8e6 	bl	8001424 <_lseek>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_lseek_r+0x1e>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_lseek_r+0x1e>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	20000e6c 	.word	0x20000e6c

08005268 <_read_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4d07      	ldr	r5, [pc, #28]	; (8005288 <_read_r+0x20>)
 800526c:	4604      	mov	r4, r0
 800526e:	4608      	mov	r0, r1
 8005270:	4611      	mov	r1, r2
 8005272:	2200      	movs	r2, #0
 8005274:	602a      	str	r2, [r5, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	f7fc f874 	bl	8001364 <_read>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_read_r+0x1e>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_read_r+0x1e>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	20000e6c 	.word	0x20000e6c

0800528c <_sbrk_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d06      	ldr	r5, [pc, #24]	; (80052a8 <_sbrk_r+0x1c>)
 8005290:	2300      	movs	r3, #0
 8005292:	4604      	mov	r4, r0
 8005294:	4608      	mov	r0, r1
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	f7fc f8d2 	bl	8001440 <_sbrk>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_sbrk_r+0x1a>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_sbrk_r+0x1a>
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	20000e6c 	.word	0x20000e6c

080052ac <_write_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d07      	ldr	r5, [pc, #28]	; (80052cc <_write_r+0x20>)
 80052b0:	4604      	mov	r4, r0
 80052b2:	4608      	mov	r0, r1
 80052b4:	4611      	mov	r1, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	602a      	str	r2, [r5, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f7fc f86f 	bl	800139e <_write>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d102      	bne.n	80052ca <_write_r+0x1e>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b103      	cbz	r3, 80052ca <_write_r+0x1e>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	20000e6c 	.word	0x20000e6c

080052d0 <__errno>:
 80052d0:	4b01      	ldr	r3, [pc, #4]	; (80052d8 <__errno+0x8>)
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20000064 	.word	0x20000064

080052dc <__libc_init_array>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	4d0d      	ldr	r5, [pc, #52]	; (8005314 <__libc_init_array+0x38>)
 80052e0:	4c0d      	ldr	r4, [pc, #52]	; (8005318 <__libc_init_array+0x3c>)
 80052e2:	1b64      	subs	r4, r4, r5
 80052e4:	10a4      	asrs	r4, r4, #2
 80052e6:	2600      	movs	r6, #0
 80052e8:	42a6      	cmp	r6, r4
 80052ea:	d109      	bne.n	8005300 <__libc_init_array+0x24>
 80052ec:	4d0b      	ldr	r5, [pc, #44]	; (800531c <__libc_init_array+0x40>)
 80052ee:	4c0c      	ldr	r4, [pc, #48]	; (8005320 <__libc_init_array+0x44>)
 80052f0:	f000 ff3e 	bl	8006170 <_init>
 80052f4:	1b64      	subs	r4, r4, r5
 80052f6:	10a4      	asrs	r4, r4, #2
 80052f8:	2600      	movs	r6, #0
 80052fa:	42a6      	cmp	r6, r4
 80052fc:	d105      	bne.n	800530a <__libc_init_array+0x2e>
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	f855 3b04 	ldr.w	r3, [r5], #4
 8005304:	4798      	blx	r3
 8005306:	3601      	adds	r6, #1
 8005308:	e7ee      	b.n	80052e8 <__libc_init_array+0xc>
 800530a:	f855 3b04 	ldr.w	r3, [r5], #4
 800530e:	4798      	blx	r3
 8005310:	3601      	adds	r6, #1
 8005312:	e7f2      	b.n	80052fa <__libc_init_array+0x1e>
 8005314:	080065ac 	.word	0x080065ac
 8005318:	080065ac 	.word	0x080065ac
 800531c:	080065ac 	.word	0x080065ac
 8005320:	080065b0 	.word	0x080065b0

08005324 <__retarget_lock_init_recursive>:
 8005324:	4770      	bx	lr

08005326 <__retarget_lock_acquire_recursive>:
 8005326:	4770      	bx	lr

08005328 <__retarget_lock_release_recursive>:
 8005328:	4770      	bx	lr
	...

0800532c <__assert_func>:
 800532c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800532e:	4614      	mov	r4, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4b09      	ldr	r3, [pc, #36]	; (8005358 <__assert_func+0x2c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4605      	mov	r5, r0
 8005338:	68d8      	ldr	r0, [r3, #12]
 800533a:	b14c      	cbz	r4, 8005350 <__assert_func+0x24>
 800533c:	4b07      	ldr	r3, [pc, #28]	; (800535c <__assert_func+0x30>)
 800533e:	9100      	str	r1, [sp, #0]
 8005340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005344:	4906      	ldr	r1, [pc, #24]	; (8005360 <__assert_func+0x34>)
 8005346:	462b      	mov	r3, r5
 8005348:	f000 fbf0 	bl	8005b2c <fiprintf>
 800534c:	f000 fc28 	bl	8005ba0 <abort>
 8005350:	4b04      	ldr	r3, [pc, #16]	; (8005364 <__assert_func+0x38>)
 8005352:	461c      	mov	r4, r3
 8005354:	e7f3      	b.n	800533e <__assert_func+0x12>
 8005356:	bf00      	nop
 8005358:	20000064 	.word	0x20000064
 800535c:	08006534 	.word	0x08006534
 8005360:	08006541 	.word	0x08006541
 8005364:	0800656f 	.word	0x0800656f

08005368 <_free_r>:
 8005368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800536a:	2900      	cmp	r1, #0
 800536c:	d044      	beq.n	80053f8 <_free_r+0x90>
 800536e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005372:	9001      	str	r0, [sp, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f1a1 0404 	sub.w	r4, r1, #4
 800537a:	bfb8      	it	lt
 800537c:	18e4      	addlt	r4, r4, r3
 800537e:	f7ff fcd3 	bl	8004d28 <__malloc_lock>
 8005382:	4a1e      	ldr	r2, [pc, #120]	; (80053fc <_free_r+0x94>)
 8005384:	9801      	ldr	r0, [sp, #4]
 8005386:	6813      	ldr	r3, [r2, #0]
 8005388:	b933      	cbnz	r3, 8005398 <_free_r+0x30>
 800538a:	6063      	str	r3, [r4, #4]
 800538c:	6014      	str	r4, [r2, #0]
 800538e:	b003      	add	sp, #12
 8005390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005394:	f7ff bcce 	b.w	8004d34 <__malloc_unlock>
 8005398:	42a3      	cmp	r3, r4
 800539a:	d908      	bls.n	80053ae <_free_r+0x46>
 800539c:	6825      	ldr	r5, [r4, #0]
 800539e:	1961      	adds	r1, r4, r5
 80053a0:	428b      	cmp	r3, r1
 80053a2:	bf01      	itttt	eq
 80053a4:	6819      	ldreq	r1, [r3, #0]
 80053a6:	685b      	ldreq	r3, [r3, #4]
 80053a8:	1949      	addeq	r1, r1, r5
 80053aa:	6021      	streq	r1, [r4, #0]
 80053ac:	e7ed      	b.n	800538a <_free_r+0x22>
 80053ae:	461a      	mov	r2, r3
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	b10b      	cbz	r3, 80053b8 <_free_r+0x50>
 80053b4:	42a3      	cmp	r3, r4
 80053b6:	d9fa      	bls.n	80053ae <_free_r+0x46>
 80053b8:	6811      	ldr	r1, [r2, #0]
 80053ba:	1855      	adds	r5, r2, r1
 80053bc:	42a5      	cmp	r5, r4
 80053be:	d10b      	bne.n	80053d8 <_free_r+0x70>
 80053c0:	6824      	ldr	r4, [r4, #0]
 80053c2:	4421      	add	r1, r4
 80053c4:	1854      	adds	r4, r2, r1
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	6011      	str	r1, [r2, #0]
 80053ca:	d1e0      	bne.n	800538e <_free_r+0x26>
 80053cc:	681c      	ldr	r4, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	6053      	str	r3, [r2, #4]
 80053d2:	440c      	add	r4, r1
 80053d4:	6014      	str	r4, [r2, #0]
 80053d6:	e7da      	b.n	800538e <_free_r+0x26>
 80053d8:	d902      	bls.n	80053e0 <_free_r+0x78>
 80053da:	230c      	movs	r3, #12
 80053dc:	6003      	str	r3, [r0, #0]
 80053de:	e7d6      	b.n	800538e <_free_r+0x26>
 80053e0:	6825      	ldr	r5, [r4, #0]
 80053e2:	1961      	adds	r1, r4, r5
 80053e4:	428b      	cmp	r3, r1
 80053e6:	bf04      	itt	eq
 80053e8:	6819      	ldreq	r1, [r3, #0]
 80053ea:	685b      	ldreq	r3, [r3, #4]
 80053ec:	6063      	str	r3, [r4, #4]
 80053ee:	bf04      	itt	eq
 80053f0:	1949      	addeq	r1, r1, r5
 80053f2:	6021      	streq	r1, [r4, #0]
 80053f4:	6054      	str	r4, [r2, #4]
 80053f6:	e7ca      	b.n	800538e <_free_r+0x26>
 80053f8:	b003      	add	sp, #12
 80053fa:	bd30      	pop	{r4, r5, pc}
 80053fc:	20000d28 	.word	0x20000d28

08005400 <__ssputs_r>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	688e      	ldr	r6, [r1, #8]
 8005406:	461f      	mov	r7, r3
 8005408:	42be      	cmp	r6, r7
 800540a:	680b      	ldr	r3, [r1, #0]
 800540c:	4682      	mov	sl, r0
 800540e:	460c      	mov	r4, r1
 8005410:	4690      	mov	r8, r2
 8005412:	d82c      	bhi.n	800546e <__ssputs_r+0x6e>
 8005414:	898a      	ldrh	r2, [r1, #12]
 8005416:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800541a:	d026      	beq.n	800546a <__ssputs_r+0x6a>
 800541c:	6965      	ldr	r5, [r4, #20]
 800541e:	6909      	ldr	r1, [r1, #16]
 8005420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005424:	eba3 0901 	sub.w	r9, r3, r1
 8005428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800542c:	1c7b      	adds	r3, r7, #1
 800542e:	444b      	add	r3, r9
 8005430:	106d      	asrs	r5, r5, #1
 8005432:	429d      	cmp	r5, r3
 8005434:	bf38      	it	cc
 8005436:	461d      	movcc	r5, r3
 8005438:	0553      	lsls	r3, r2, #21
 800543a:	d527      	bpl.n	800548c <__ssputs_r+0x8c>
 800543c:	4629      	mov	r1, r5
 800543e:	f7ff fbf3 	bl	8004c28 <_malloc_r>
 8005442:	4606      	mov	r6, r0
 8005444:	b360      	cbz	r0, 80054a0 <__ssputs_r+0xa0>
 8005446:	6921      	ldr	r1, [r4, #16]
 8005448:	464a      	mov	r2, r9
 800544a:	f000 fb9b 	bl	8005b84 <memcpy>
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005458:	81a3      	strh	r3, [r4, #12]
 800545a:	6126      	str	r6, [r4, #16]
 800545c:	6165      	str	r5, [r4, #20]
 800545e:	444e      	add	r6, r9
 8005460:	eba5 0509 	sub.w	r5, r5, r9
 8005464:	6026      	str	r6, [r4, #0]
 8005466:	60a5      	str	r5, [r4, #8]
 8005468:	463e      	mov	r6, r7
 800546a:	42be      	cmp	r6, r7
 800546c:	d900      	bls.n	8005470 <__ssputs_r+0x70>
 800546e:	463e      	mov	r6, r7
 8005470:	6820      	ldr	r0, [r4, #0]
 8005472:	4632      	mov	r2, r6
 8005474:	4641      	mov	r1, r8
 8005476:	f000 fb6b 	bl	8005b50 <memmove>
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	1b9b      	subs	r3, r3, r6
 800547e:	60a3      	str	r3, [r4, #8]
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	4433      	add	r3, r6
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	2000      	movs	r0, #0
 8005488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548c:	462a      	mov	r2, r5
 800548e:	f000 fb8e 	bl	8005bae <_realloc_r>
 8005492:	4606      	mov	r6, r0
 8005494:	2800      	cmp	r0, #0
 8005496:	d1e0      	bne.n	800545a <__ssputs_r+0x5a>
 8005498:	6921      	ldr	r1, [r4, #16]
 800549a:	4650      	mov	r0, sl
 800549c:	f7ff ff64 	bl	8005368 <_free_r>
 80054a0:	230c      	movs	r3, #12
 80054a2:	f8ca 3000 	str.w	r3, [sl]
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ac:	81a3      	strh	r3, [r4, #12]
 80054ae:	f04f 30ff 	mov.w	r0, #4294967295
 80054b2:	e7e9      	b.n	8005488 <__ssputs_r+0x88>

080054b4 <_svfiprintf_r>:
 80054b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b8:	4698      	mov	r8, r3
 80054ba:	898b      	ldrh	r3, [r1, #12]
 80054bc:	061b      	lsls	r3, r3, #24
 80054be:	b09d      	sub	sp, #116	; 0x74
 80054c0:	4607      	mov	r7, r0
 80054c2:	460d      	mov	r5, r1
 80054c4:	4614      	mov	r4, r2
 80054c6:	d50e      	bpl.n	80054e6 <_svfiprintf_r+0x32>
 80054c8:	690b      	ldr	r3, [r1, #16]
 80054ca:	b963      	cbnz	r3, 80054e6 <_svfiprintf_r+0x32>
 80054cc:	2140      	movs	r1, #64	; 0x40
 80054ce:	f7ff fbab 	bl	8004c28 <_malloc_r>
 80054d2:	6028      	str	r0, [r5, #0]
 80054d4:	6128      	str	r0, [r5, #16]
 80054d6:	b920      	cbnz	r0, 80054e2 <_svfiprintf_r+0x2e>
 80054d8:	230c      	movs	r3, #12
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	e0d0      	b.n	8005684 <_svfiprintf_r+0x1d0>
 80054e2:	2340      	movs	r3, #64	; 0x40
 80054e4:	616b      	str	r3, [r5, #20]
 80054e6:	2300      	movs	r3, #0
 80054e8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ea:	2320      	movs	r3, #32
 80054ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80054f4:	2330      	movs	r3, #48	; 0x30
 80054f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800569c <_svfiprintf_r+0x1e8>
 80054fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054fe:	f04f 0901 	mov.w	r9, #1
 8005502:	4623      	mov	r3, r4
 8005504:	469a      	mov	sl, r3
 8005506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800550a:	b10a      	cbz	r2, 8005510 <_svfiprintf_r+0x5c>
 800550c:	2a25      	cmp	r2, #37	; 0x25
 800550e:	d1f9      	bne.n	8005504 <_svfiprintf_r+0x50>
 8005510:	ebba 0b04 	subs.w	fp, sl, r4
 8005514:	d00b      	beq.n	800552e <_svfiprintf_r+0x7a>
 8005516:	465b      	mov	r3, fp
 8005518:	4622      	mov	r2, r4
 800551a:	4629      	mov	r1, r5
 800551c:	4638      	mov	r0, r7
 800551e:	f7ff ff6f 	bl	8005400 <__ssputs_r>
 8005522:	3001      	adds	r0, #1
 8005524:	f000 80a9 	beq.w	800567a <_svfiprintf_r+0x1c6>
 8005528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800552a:	445a      	add	r2, fp
 800552c:	9209      	str	r2, [sp, #36]	; 0x24
 800552e:	f89a 3000 	ldrb.w	r3, [sl]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80a1 	beq.w	800567a <_svfiprintf_r+0x1c6>
 8005538:	2300      	movs	r3, #0
 800553a:	f04f 32ff 	mov.w	r2, #4294967295
 800553e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005542:	f10a 0a01 	add.w	sl, sl, #1
 8005546:	9304      	str	r3, [sp, #16]
 8005548:	9307      	str	r3, [sp, #28]
 800554a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800554e:	931a      	str	r3, [sp, #104]	; 0x68
 8005550:	4654      	mov	r4, sl
 8005552:	2205      	movs	r2, #5
 8005554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005558:	4850      	ldr	r0, [pc, #320]	; (800569c <_svfiprintf_r+0x1e8>)
 800555a:	f7fa fe51 	bl	8000200 <memchr>
 800555e:	9a04      	ldr	r2, [sp, #16]
 8005560:	b9d8      	cbnz	r0, 800559a <_svfiprintf_r+0xe6>
 8005562:	06d0      	lsls	r0, r2, #27
 8005564:	bf44      	itt	mi
 8005566:	2320      	movmi	r3, #32
 8005568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800556c:	0711      	lsls	r1, r2, #28
 800556e:	bf44      	itt	mi
 8005570:	232b      	movmi	r3, #43	; 0x2b
 8005572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005576:	f89a 3000 	ldrb.w	r3, [sl]
 800557a:	2b2a      	cmp	r3, #42	; 0x2a
 800557c:	d015      	beq.n	80055aa <_svfiprintf_r+0xf6>
 800557e:	9a07      	ldr	r2, [sp, #28]
 8005580:	4654      	mov	r4, sl
 8005582:	2000      	movs	r0, #0
 8005584:	f04f 0c0a 	mov.w	ip, #10
 8005588:	4621      	mov	r1, r4
 800558a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800558e:	3b30      	subs	r3, #48	; 0x30
 8005590:	2b09      	cmp	r3, #9
 8005592:	d94d      	bls.n	8005630 <_svfiprintf_r+0x17c>
 8005594:	b1b0      	cbz	r0, 80055c4 <_svfiprintf_r+0x110>
 8005596:	9207      	str	r2, [sp, #28]
 8005598:	e014      	b.n	80055c4 <_svfiprintf_r+0x110>
 800559a:	eba0 0308 	sub.w	r3, r0, r8
 800559e:	fa09 f303 	lsl.w	r3, r9, r3
 80055a2:	4313      	orrs	r3, r2
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	46a2      	mov	sl, r4
 80055a8:	e7d2      	b.n	8005550 <_svfiprintf_r+0x9c>
 80055aa:	9b03      	ldr	r3, [sp, #12]
 80055ac:	1d19      	adds	r1, r3, #4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	9103      	str	r1, [sp, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bfbb      	ittet	lt
 80055b6:	425b      	neglt	r3, r3
 80055b8:	f042 0202 	orrlt.w	r2, r2, #2
 80055bc:	9307      	strge	r3, [sp, #28]
 80055be:	9307      	strlt	r3, [sp, #28]
 80055c0:	bfb8      	it	lt
 80055c2:	9204      	strlt	r2, [sp, #16]
 80055c4:	7823      	ldrb	r3, [r4, #0]
 80055c6:	2b2e      	cmp	r3, #46	; 0x2e
 80055c8:	d10c      	bne.n	80055e4 <_svfiprintf_r+0x130>
 80055ca:	7863      	ldrb	r3, [r4, #1]
 80055cc:	2b2a      	cmp	r3, #42	; 0x2a
 80055ce:	d134      	bne.n	800563a <_svfiprintf_r+0x186>
 80055d0:	9b03      	ldr	r3, [sp, #12]
 80055d2:	1d1a      	adds	r2, r3, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	9203      	str	r2, [sp, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bfb8      	it	lt
 80055dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80055e0:	3402      	adds	r4, #2
 80055e2:	9305      	str	r3, [sp, #20]
 80055e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80056ac <_svfiprintf_r+0x1f8>
 80055e8:	7821      	ldrb	r1, [r4, #0]
 80055ea:	2203      	movs	r2, #3
 80055ec:	4650      	mov	r0, sl
 80055ee:	f7fa fe07 	bl	8000200 <memchr>
 80055f2:	b138      	cbz	r0, 8005604 <_svfiprintf_r+0x150>
 80055f4:	9b04      	ldr	r3, [sp, #16]
 80055f6:	eba0 000a 	sub.w	r0, r0, sl
 80055fa:	2240      	movs	r2, #64	; 0x40
 80055fc:	4082      	lsls	r2, r0
 80055fe:	4313      	orrs	r3, r2
 8005600:	3401      	adds	r4, #1
 8005602:	9304      	str	r3, [sp, #16]
 8005604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005608:	4825      	ldr	r0, [pc, #148]	; (80056a0 <_svfiprintf_r+0x1ec>)
 800560a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800560e:	2206      	movs	r2, #6
 8005610:	f7fa fdf6 	bl	8000200 <memchr>
 8005614:	2800      	cmp	r0, #0
 8005616:	d038      	beq.n	800568a <_svfiprintf_r+0x1d6>
 8005618:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <_svfiprintf_r+0x1f0>)
 800561a:	bb1b      	cbnz	r3, 8005664 <_svfiprintf_r+0x1b0>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	3307      	adds	r3, #7
 8005620:	f023 0307 	bic.w	r3, r3, #7
 8005624:	3308      	adds	r3, #8
 8005626:	9303      	str	r3, [sp, #12]
 8005628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562a:	4433      	add	r3, r6
 800562c:	9309      	str	r3, [sp, #36]	; 0x24
 800562e:	e768      	b.n	8005502 <_svfiprintf_r+0x4e>
 8005630:	fb0c 3202 	mla	r2, ip, r2, r3
 8005634:	460c      	mov	r4, r1
 8005636:	2001      	movs	r0, #1
 8005638:	e7a6      	b.n	8005588 <_svfiprintf_r+0xd4>
 800563a:	2300      	movs	r3, #0
 800563c:	3401      	adds	r4, #1
 800563e:	9305      	str	r3, [sp, #20]
 8005640:	4619      	mov	r1, r3
 8005642:	f04f 0c0a 	mov.w	ip, #10
 8005646:	4620      	mov	r0, r4
 8005648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800564c:	3a30      	subs	r2, #48	; 0x30
 800564e:	2a09      	cmp	r2, #9
 8005650:	d903      	bls.n	800565a <_svfiprintf_r+0x1a6>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0c6      	beq.n	80055e4 <_svfiprintf_r+0x130>
 8005656:	9105      	str	r1, [sp, #20]
 8005658:	e7c4      	b.n	80055e4 <_svfiprintf_r+0x130>
 800565a:	fb0c 2101 	mla	r1, ip, r1, r2
 800565e:	4604      	mov	r4, r0
 8005660:	2301      	movs	r3, #1
 8005662:	e7f0      	b.n	8005646 <_svfiprintf_r+0x192>
 8005664:	ab03      	add	r3, sp, #12
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	462a      	mov	r2, r5
 800566a:	4b0f      	ldr	r3, [pc, #60]	; (80056a8 <_svfiprintf_r+0x1f4>)
 800566c:	a904      	add	r1, sp, #16
 800566e:	4638      	mov	r0, r7
 8005670:	f3af 8000 	nop.w
 8005674:	1c42      	adds	r2, r0, #1
 8005676:	4606      	mov	r6, r0
 8005678:	d1d6      	bne.n	8005628 <_svfiprintf_r+0x174>
 800567a:	89ab      	ldrh	r3, [r5, #12]
 800567c:	065b      	lsls	r3, r3, #25
 800567e:	f53f af2d 	bmi.w	80054dc <_svfiprintf_r+0x28>
 8005682:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005684:	b01d      	add	sp, #116	; 0x74
 8005686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568a:	ab03      	add	r3, sp, #12
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	462a      	mov	r2, r5
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <_svfiprintf_r+0x1f4>)
 8005692:	a904      	add	r1, sp, #16
 8005694:	4638      	mov	r0, r7
 8005696:	f000 f879 	bl	800578c <_printf_i>
 800569a:	e7eb      	b.n	8005674 <_svfiprintf_r+0x1c0>
 800569c:	08006570 	.word	0x08006570
 80056a0:	0800657a 	.word	0x0800657a
 80056a4:	00000000 	.word	0x00000000
 80056a8:	08005401 	.word	0x08005401
 80056ac:	08006576 	.word	0x08006576

080056b0 <_printf_common>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	4616      	mov	r6, r2
 80056b6:	4699      	mov	r9, r3
 80056b8:	688a      	ldr	r2, [r1, #8]
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	bfb8      	it	lt
 80056c4:	4613      	movlt	r3, r2
 80056c6:	6033      	str	r3, [r6, #0]
 80056c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056cc:	4607      	mov	r7, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	b10a      	cbz	r2, 80056d6 <_printf_common+0x26>
 80056d2:	3301      	adds	r3, #1
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	0699      	lsls	r1, r3, #26
 80056da:	bf42      	ittt	mi
 80056dc:	6833      	ldrmi	r3, [r6, #0]
 80056de:	3302      	addmi	r3, #2
 80056e0:	6033      	strmi	r3, [r6, #0]
 80056e2:	6825      	ldr	r5, [r4, #0]
 80056e4:	f015 0506 	ands.w	r5, r5, #6
 80056e8:	d106      	bne.n	80056f8 <_printf_common+0x48>
 80056ea:	f104 0a19 	add.w	sl, r4, #25
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	6832      	ldr	r2, [r6, #0]
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc26      	bgt.n	8005746 <_printf_common+0x96>
 80056f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056fc:	1e13      	subs	r3, r2, #0
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	bf18      	it	ne
 8005702:	2301      	movne	r3, #1
 8005704:	0692      	lsls	r2, r2, #26
 8005706:	d42b      	bmi.n	8005760 <_printf_common+0xb0>
 8005708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800570c:	4649      	mov	r1, r9
 800570e:	4638      	mov	r0, r7
 8005710:	47c0      	blx	r8
 8005712:	3001      	adds	r0, #1
 8005714:	d01e      	beq.n	8005754 <_printf_common+0xa4>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	6922      	ldr	r2, [r4, #16]
 800571a:	f003 0306 	and.w	r3, r3, #6
 800571e:	2b04      	cmp	r3, #4
 8005720:	bf02      	ittt	eq
 8005722:	68e5      	ldreq	r5, [r4, #12]
 8005724:	6833      	ldreq	r3, [r6, #0]
 8005726:	1aed      	subeq	r5, r5, r3
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	bf0c      	ite	eq
 800572c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005730:	2500      	movne	r5, #0
 8005732:	4293      	cmp	r3, r2
 8005734:	bfc4      	itt	gt
 8005736:	1a9b      	subgt	r3, r3, r2
 8005738:	18ed      	addgt	r5, r5, r3
 800573a:	2600      	movs	r6, #0
 800573c:	341a      	adds	r4, #26
 800573e:	42b5      	cmp	r5, r6
 8005740:	d11a      	bne.n	8005778 <_printf_common+0xc8>
 8005742:	2000      	movs	r0, #0
 8005744:	e008      	b.n	8005758 <_printf_common+0xa8>
 8005746:	2301      	movs	r3, #1
 8005748:	4652      	mov	r2, sl
 800574a:	4649      	mov	r1, r9
 800574c:	4638      	mov	r0, r7
 800574e:	47c0      	blx	r8
 8005750:	3001      	adds	r0, #1
 8005752:	d103      	bne.n	800575c <_printf_common+0xac>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575c:	3501      	adds	r5, #1
 800575e:	e7c6      	b.n	80056ee <_printf_common+0x3e>
 8005760:	18e1      	adds	r1, r4, r3
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	2030      	movs	r0, #48	; 0x30
 8005766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800576a:	4422      	add	r2, r4
 800576c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005774:	3302      	adds	r3, #2
 8005776:	e7c7      	b.n	8005708 <_printf_common+0x58>
 8005778:	2301      	movs	r3, #1
 800577a:	4622      	mov	r2, r4
 800577c:	4649      	mov	r1, r9
 800577e:	4638      	mov	r0, r7
 8005780:	47c0      	blx	r8
 8005782:	3001      	adds	r0, #1
 8005784:	d0e6      	beq.n	8005754 <_printf_common+0xa4>
 8005786:	3601      	adds	r6, #1
 8005788:	e7d9      	b.n	800573e <_printf_common+0x8e>
	...

0800578c <_printf_i>:
 800578c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	7e0f      	ldrb	r7, [r1, #24]
 8005792:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005794:	2f78      	cmp	r7, #120	; 0x78
 8005796:	4691      	mov	r9, r2
 8005798:	4680      	mov	r8, r0
 800579a:	460c      	mov	r4, r1
 800579c:	469a      	mov	sl, r3
 800579e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057a2:	d807      	bhi.n	80057b4 <_printf_i+0x28>
 80057a4:	2f62      	cmp	r7, #98	; 0x62
 80057a6:	d80a      	bhi.n	80057be <_printf_i+0x32>
 80057a8:	2f00      	cmp	r7, #0
 80057aa:	f000 80d4 	beq.w	8005956 <_printf_i+0x1ca>
 80057ae:	2f58      	cmp	r7, #88	; 0x58
 80057b0:	f000 80c0 	beq.w	8005934 <_printf_i+0x1a8>
 80057b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057bc:	e03a      	b.n	8005834 <_printf_i+0xa8>
 80057be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057c2:	2b15      	cmp	r3, #21
 80057c4:	d8f6      	bhi.n	80057b4 <_printf_i+0x28>
 80057c6:	a101      	add	r1, pc, #4	; (adr r1, 80057cc <_printf_i+0x40>)
 80057c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005839 	.word	0x08005839
 80057d4:	080057b5 	.word	0x080057b5
 80057d8:	080057b5 	.word	0x080057b5
 80057dc:	080057b5 	.word	0x080057b5
 80057e0:	080057b5 	.word	0x080057b5
 80057e4:	08005839 	.word	0x08005839
 80057e8:	080057b5 	.word	0x080057b5
 80057ec:	080057b5 	.word	0x080057b5
 80057f0:	080057b5 	.word	0x080057b5
 80057f4:	080057b5 	.word	0x080057b5
 80057f8:	0800593d 	.word	0x0800593d
 80057fc:	08005865 	.word	0x08005865
 8005800:	080058f7 	.word	0x080058f7
 8005804:	080057b5 	.word	0x080057b5
 8005808:	080057b5 	.word	0x080057b5
 800580c:	0800595f 	.word	0x0800595f
 8005810:	080057b5 	.word	0x080057b5
 8005814:	08005865 	.word	0x08005865
 8005818:	080057b5 	.word	0x080057b5
 800581c:	080057b5 	.word	0x080057b5
 8005820:	080058ff 	.word	0x080058ff
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	602a      	str	r2, [r5, #0]
 800582c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005834:	2301      	movs	r3, #1
 8005836:	e09f      	b.n	8005978 <_printf_i+0x1ec>
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	682b      	ldr	r3, [r5, #0]
 800583c:	0607      	lsls	r7, r0, #24
 800583e:	f103 0104 	add.w	r1, r3, #4
 8005842:	6029      	str	r1, [r5, #0]
 8005844:	d501      	bpl.n	800584a <_printf_i+0xbe>
 8005846:	681e      	ldr	r6, [r3, #0]
 8005848:	e003      	b.n	8005852 <_printf_i+0xc6>
 800584a:	0646      	lsls	r6, r0, #25
 800584c:	d5fb      	bpl.n	8005846 <_printf_i+0xba>
 800584e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005852:	2e00      	cmp	r6, #0
 8005854:	da03      	bge.n	800585e <_printf_i+0xd2>
 8005856:	232d      	movs	r3, #45	; 0x2d
 8005858:	4276      	negs	r6, r6
 800585a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800585e:	485a      	ldr	r0, [pc, #360]	; (80059c8 <_printf_i+0x23c>)
 8005860:	230a      	movs	r3, #10
 8005862:	e012      	b.n	800588a <_printf_i+0xfe>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	6820      	ldr	r0, [r4, #0]
 8005868:	1d19      	adds	r1, r3, #4
 800586a:	6029      	str	r1, [r5, #0]
 800586c:	0605      	lsls	r5, r0, #24
 800586e:	d501      	bpl.n	8005874 <_printf_i+0xe8>
 8005870:	681e      	ldr	r6, [r3, #0]
 8005872:	e002      	b.n	800587a <_printf_i+0xee>
 8005874:	0641      	lsls	r1, r0, #25
 8005876:	d5fb      	bpl.n	8005870 <_printf_i+0xe4>
 8005878:	881e      	ldrh	r6, [r3, #0]
 800587a:	4853      	ldr	r0, [pc, #332]	; (80059c8 <_printf_i+0x23c>)
 800587c:	2f6f      	cmp	r7, #111	; 0x6f
 800587e:	bf0c      	ite	eq
 8005880:	2308      	moveq	r3, #8
 8005882:	230a      	movne	r3, #10
 8005884:	2100      	movs	r1, #0
 8005886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800588a:	6865      	ldr	r5, [r4, #4]
 800588c:	60a5      	str	r5, [r4, #8]
 800588e:	2d00      	cmp	r5, #0
 8005890:	bfa2      	ittt	ge
 8005892:	6821      	ldrge	r1, [r4, #0]
 8005894:	f021 0104 	bicge.w	r1, r1, #4
 8005898:	6021      	strge	r1, [r4, #0]
 800589a:	b90e      	cbnz	r6, 80058a0 <_printf_i+0x114>
 800589c:	2d00      	cmp	r5, #0
 800589e:	d04b      	beq.n	8005938 <_printf_i+0x1ac>
 80058a0:	4615      	mov	r5, r2
 80058a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80058a6:	fb03 6711 	mls	r7, r3, r1, r6
 80058aa:	5dc7      	ldrb	r7, [r0, r7]
 80058ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058b0:	4637      	mov	r7, r6
 80058b2:	42bb      	cmp	r3, r7
 80058b4:	460e      	mov	r6, r1
 80058b6:	d9f4      	bls.n	80058a2 <_printf_i+0x116>
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d10b      	bne.n	80058d4 <_printf_i+0x148>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	07de      	lsls	r6, r3, #31
 80058c0:	d508      	bpl.n	80058d4 <_printf_i+0x148>
 80058c2:	6923      	ldr	r3, [r4, #16]
 80058c4:	6861      	ldr	r1, [r4, #4]
 80058c6:	4299      	cmp	r1, r3
 80058c8:	bfde      	ittt	le
 80058ca:	2330      	movle	r3, #48	; 0x30
 80058cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058d4:	1b52      	subs	r2, r2, r5
 80058d6:	6122      	str	r2, [r4, #16]
 80058d8:	f8cd a000 	str.w	sl, [sp]
 80058dc:	464b      	mov	r3, r9
 80058de:	aa03      	add	r2, sp, #12
 80058e0:	4621      	mov	r1, r4
 80058e2:	4640      	mov	r0, r8
 80058e4:	f7ff fee4 	bl	80056b0 <_printf_common>
 80058e8:	3001      	adds	r0, #1
 80058ea:	d14a      	bne.n	8005982 <_printf_i+0x1f6>
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	b004      	add	sp, #16
 80058f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	f043 0320 	orr.w	r3, r3, #32
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	4833      	ldr	r0, [pc, #204]	; (80059cc <_printf_i+0x240>)
 8005900:	2778      	movs	r7, #120	; 0x78
 8005902:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	6829      	ldr	r1, [r5, #0]
 800590a:	061f      	lsls	r7, r3, #24
 800590c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005910:	d402      	bmi.n	8005918 <_printf_i+0x18c>
 8005912:	065f      	lsls	r7, r3, #25
 8005914:	bf48      	it	mi
 8005916:	b2b6      	uxthmi	r6, r6
 8005918:	07df      	lsls	r7, r3, #31
 800591a:	bf48      	it	mi
 800591c:	f043 0320 	orrmi.w	r3, r3, #32
 8005920:	6029      	str	r1, [r5, #0]
 8005922:	bf48      	it	mi
 8005924:	6023      	strmi	r3, [r4, #0]
 8005926:	b91e      	cbnz	r6, 8005930 <_printf_i+0x1a4>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	f023 0320 	bic.w	r3, r3, #32
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	2310      	movs	r3, #16
 8005932:	e7a7      	b.n	8005884 <_printf_i+0xf8>
 8005934:	4824      	ldr	r0, [pc, #144]	; (80059c8 <_printf_i+0x23c>)
 8005936:	e7e4      	b.n	8005902 <_printf_i+0x176>
 8005938:	4615      	mov	r5, r2
 800593a:	e7bd      	b.n	80058b8 <_printf_i+0x12c>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	6826      	ldr	r6, [r4, #0]
 8005940:	6961      	ldr	r1, [r4, #20]
 8005942:	1d18      	adds	r0, r3, #4
 8005944:	6028      	str	r0, [r5, #0]
 8005946:	0635      	lsls	r5, r6, #24
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	d501      	bpl.n	8005950 <_printf_i+0x1c4>
 800594c:	6019      	str	r1, [r3, #0]
 800594e:	e002      	b.n	8005956 <_printf_i+0x1ca>
 8005950:	0670      	lsls	r0, r6, #25
 8005952:	d5fb      	bpl.n	800594c <_printf_i+0x1c0>
 8005954:	8019      	strh	r1, [r3, #0]
 8005956:	2300      	movs	r3, #0
 8005958:	6123      	str	r3, [r4, #16]
 800595a:	4615      	mov	r5, r2
 800595c:	e7bc      	b.n	80058d8 <_printf_i+0x14c>
 800595e:	682b      	ldr	r3, [r5, #0]
 8005960:	1d1a      	adds	r2, r3, #4
 8005962:	602a      	str	r2, [r5, #0]
 8005964:	681d      	ldr	r5, [r3, #0]
 8005966:	6862      	ldr	r2, [r4, #4]
 8005968:	2100      	movs	r1, #0
 800596a:	4628      	mov	r0, r5
 800596c:	f7fa fc48 	bl	8000200 <memchr>
 8005970:	b108      	cbz	r0, 8005976 <_printf_i+0x1ea>
 8005972:	1b40      	subs	r0, r0, r5
 8005974:	6060      	str	r0, [r4, #4]
 8005976:	6863      	ldr	r3, [r4, #4]
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	2300      	movs	r3, #0
 800597c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005980:	e7aa      	b.n	80058d8 <_printf_i+0x14c>
 8005982:	6923      	ldr	r3, [r4, #16]
 8005984:	462a      	mov	r2, r5
 8005986:	4649      	mov	r1, r9
 8005988:	4640      	mov	r0, r8
 800598a:	47d0      	blx	sl
 800598c:	3001      	adds	r0, #1
 800598e:	d0ad      	beq.n	80058ec <_printf_i+0x160>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	079b      	lsls	r3, r3, #30
 8005994:	d413      	bmi.n	80059be <_printf_i+0x232>
 8005996:	68e0      	ldr	r0, [r4, #12]
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	4298      	cmp	r0, r3
 800599c:	bfb8      	it	lt
 800599e:	4618      	movlt	r0, r3
 80059a0:	e7a6      	b.n	80058f0 <_printf_i+0x164>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4632      	mov	r2, r6
 80059a6:	4649      	mov	r1, r9
 80059a8:	4640      	mov	r0, r8
 80059aa:	47d0      	blx	sl
 80059ac:	3001      	adds	r0, #1
 80059ae:	d09d      	beq.n	80058ec <_printf_i+0x160>
 80059b0:	3501      	adds	r5, #1
 80059b2:	68e3      	ldr	r3, [r4, #12]
 80059b4:	9903      	ldr	r1, [sp, #12]
 80059b6:	1a5b      	subs	r3, r3, r1
 80059b8:	42ab      	cmp	r3, r5
 80059ba:	dcf2      	bgt.n	80059a2 <_printf_i+0x216>
 80059bc:	e7eb      	b.n	8005996 <_printf_i+0x20a>
 80059be:	2500      	movs	r5, #0
 80059c0:	f104 0619 	add.w	r6, r4, #25
 80059c4:	e7f5      	b.n	80059b2 <_printf_i+0x226>
 80059c6:	bf00      	nop
 80059c8:	08006581 	.word	0x08006581
 80059cc:	08006592 	.word	0x08006592

080059d0 <__sflush_r>:
 80059d0:	898a      	ldrh	r2, [r1, #12]
 80059d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d6:	4605      	mov	r5, r0
 80059d8:	0710      	lsls	r0, r2, #28
 80059da:	460c      	mov	r4, r1
 80059dc:	d458      	bmi.n	8005a90 <__sflush_r+0xc0>
 80059de:	684b      	ldr	r3, [r1, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dc05      	bgt.n	80059f0 <__sflush_r+0x20>
 80059e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dc02      	bgt.n	80059f0 <__sflush_r+0x20>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059f2:	2e00      	cmp	r6, #0
 80059f4:	d0f9      	beq.n	80059ea <__sflush_r+0x1a>
 80059f6:	2300      	movs	r3, #0
 80059f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059fc:	682f      	ldr	r7, [r5, #0]
 80059fe:	6a21      	ldr	r1, [r4, #32]
 8005a00:	602b      	str	r3, [r5, #0]
 8005a02:	d032      	beq.n	8005a6a <__sflush_r+0x9a>
 8005a04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	075a      	lsls	r2, r3, #29
 8005a0a:	d505      	bpl.n	8005a18 <__sflush_r+0x48>
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	1ac0      	subs	r0, r0, r3
 8005a10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a12:	b10b      	cbz	r3, 8005a18 <__sflush_r+0x48>
 8005a14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a16:	1ac0      	subs	r0, r0, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a1e:	6a21      	ldr	r1, [r4, #32]
 8005a20:	4628      	mov	r0, r5
 8005a22:	47b0      	blx	r6
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	d106      	bne.n	8005a38 <__sflush_r+0x68>
 8005a2a:	6829      	ldr	r1, [r5, #0]
 8005a2c:	291d      	cmp	r1, #29
 8005a2e:	d82b      	bhi.n	8005a88 <__sflush_r+0xb8>
 8005a30:	4a29      	ldr	r2, [pc, #164]	; (8005ad8 <__sflush_r+0x108>)
 8005a32:	410a      	asrs	r2, r1
 8005a34:	07d6      	lsls	r6, r2, #31
 8005a36:	d427      	bmi.n	8005a88 <__sflush_r+0xb8>
 8005a38:	2200      	movs	r2, #0
 8005a3a:	6062      	str	r2, [r4, #4]
 8005a3c:	04d9      	lsls	r1, r3, #19
 8005a3e:	6922      	ldr	r2, [r4, #16]
 8005a40:	6022      	str	r2, [r4, #0]
 8005a42:	d504      	bpl.n	8005a4e <__sflush_r+0x7e>
 8005a44:	1c42      	adds	r2, r0, #1
 8005a46:	d101      	bne.n	8005a4c <__sflush_r+0x7c>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	b903      	cbnz	r3, 8005a4e <__sflush_r+0x7e>
 8005a4c:	6560      	str	r0, [r4, #84]	; 0x54
 8005a4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a50:	602f      	str	r7, [r5, #0]
 8005a52:	2900      	cmp	r1, #0
 8005a54:	d0c9      	beq.n	80059ea <__sflush_r+0x1a>
 8005a56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a5a:	4299      	cmp	r1, r3
 8005a5c:	d002      	beq.n	8005a64 <__sflush_r+0x94>
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f7ff fc82 	bl	8005368 <_free_r>
 8005a64:	2000      	movs	r0, #0
 8005a66:	6360      	str	r0, [r4, #52]	; 0x34
 8005a68:	e7c0      	b.n	80059ec <__sflush_r+0x1c>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b0      	blx	r6
 8005a70:	1c41      	adds	r1, r0, #1
 8005a72:	d1c8      	bne.n	8005a06 <__sflush_r+0x36>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0c5      	beq.n	8005a06 <__sflush_r+0x36>
 8005a7a:	2b1d      	cmp	r3, #29
 8005a7c:	d001      	beq.n	8005a82 <__sflush_r+0xb2>
 8005a7e:	2b16      	cmp	r3, #22
 8005a80:	d101      	bne.n	8005a86 <__sflush_r+0xb6>
 8005a82:	602f      	str	r7, [r5, #0]
 8005a84:	e7b1      	b.n	80059ea <__sflush_r+0x1a>
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a8c:	81a3      	strh	r3, [r4, #12]
 8005a8e:	e7ad      	b.n	80059ec <__sflush_r+0x1c>
 8005a90:	690f      	ldr	r7, [r1, #16]
 8005a92:	2f00      	cmp	r7, #0
 8005a94:	d0a9      	beq.n	80059ea <__sflush_r+0x1a>
 8005a96:	0793      	lsls	r3, r2, #30
 8005a98:	680e      	ldr	r6, [r1, #0]
 8005a9a:	bf08      	it	eq
 8005a9c:	694b      	ldreq	r3, [r1, #20]
 8005a9e:	600f      	str	r7, [r1, #0]
 8005aa0:	bf18      	it	ne
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	eba6 0807 	sub.w	r8, r6, r7
 8005aa8:	608b      	str	r3, [r1, #8]
 8005aaa:	f1b8 0f00 	cmp.w	r8, #0
 8005aae:	dd9c      	ble.n	80059ea <__sflush_r+0x1a>
 8005ab0:	6a21      	ldr	r1, [r4, #32]
 8005ab2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ab4:	4643      	mov	r3, r8
 8005ab6:	463a      	mov	r2, r7
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b0      	blx	r6
 8005abc:	2800      	cmp	r0, #0
 8005abe:	dc06      	bgt.n	8005ace <__sflush_r+0xfe>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	e78e      	b.n	80059ec <__sflush_r+0x1c>
 8005ace:	4407      	add	r7, r0
 8005ad0:	eba8 0800 	sub.w	r8, r8, r0
 8005ad4:	e7e9      	b.n	8005aaa <__sflush_r+0xda>
 8005ad6:	bf00      	nop
 8005ad8:	dfbffffe 	.word	0xdfbffffe

08005adc <_fflush_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	690b      	ldr	r3, [r1, #16]
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	b913      	cbnz	r3, 8005aec <_fflush_r+0x10>
 8005ae6:	2500      	movs	r5, #0
 8005ae8:	4628      	mov	r0, r5
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	b118      	cbz	r0, 8005af6 <_fflush_r+0x1a>
 8005aee:	6a03      	ldr	r3, [r0, #32]
 8005af0:	b90b      	cbnz	r3, 8005af6 <_fflush_r+0x1a>
 8005af2:	f7ff faa9 	bl	8005048 <__sinit>
 8005af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f3      	beq.n	8005ae6 <_fflush_r+0xa>
 8005afe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b00:	07d0      	lsls	r0, r2, #31
 8005b02:	d404      	bmi.n	8005b0e <_fflush_r+0x32>
 8005b04:	0599      	lsls	r1, r3, #22
 8005b06:	d402      	bmi.n	8005b0e <_fflush_r+0x32>
 8005b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b0a:	f7ff fc0c 	bl	8005326 <__retarget_lock_acquire_recursive>
 8005b0e:	4628      	mov	r0, r5
 8005b10:	4621      	mov	r1, r4
 8005b12:	f7ff ff5d 	bl	80059d0 <__sflush_r>
 8005b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b18:	07da      	lsls	r2, r3, #31
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	d4e4      	bmi.n	8005ae8 <_fflush_r+0xc>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	059b      	lsls	r3, r3, #22
 8005b22:	d4e1      	bmi.n	8005ae8 <_fflush_r+0xc>
 8005b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b26:	f7ff fbff 	bl	8005328 <__retarget_lock_release_recursive>
 8005b2a:	e7dd      	b.n	8005ae8 <_fflush_r+0xc>

08005b2c <fiprintf>:
 8005b2c:	b40e      	push	{r1, r2, r3}
 8005b2e:	b503      	push	{r0, r1, lr}
 8005b30:	4601      	mov	r1, r0
 8005b32:	ab03      	add	r3, sp, #12
 8005b34:	4805      	ldr	r0, [pc, #20]	; (8005b4c <fiprintf+0x20>)
 8005b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b3a:	6800      	ldr	r0, [r0, #0]
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	f000 f88f 	bl	8005c60 <_vfiprintf_r>
 8005b42:	b002      	add	sp, #8
 8005b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b48:	b003      	add	sp, #12
 8005b4a:	4770      	bx	lr
 8005b4c:	20000064 	.word	0x20000064

08005b50 <memmove>:
 8005b50:	4288      	cmp	r0, r1
 8005b52:	b510      	push	{r4, lr}
 8005b54:	eb01 0402 	add.w	r4, r1, r2
 8005b58:	d902      	bls.n	8005b60 <memmove+0x10>
 8005b5a:	4284      	cmp	r4, r0
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	d807      	bhi.n	8005b70 <memmove+0x20>
 8005b60:	1e43      	subs	r3, r0, #1
 8005b62:	42a1      	cmp	r1, r4
 8005b64:	d008      	beq.n	8005b78 <memmove+0x28>
 8005b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b6e:	e7f8      	b.n	8005b62 <memmove+0x12>
 8005b70:	4402      	add	r2, r0
 8005b72:	4601      	mov	r1, r0
 8005b74:	428a      	cmp	r2, r1
 8005b76:	d100      	bne.n	8005b7a <memmove+0x2a>
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b82:	e7f7      	b.n	8005b74 <memmove+0x24>

08005b84 <memcpy>:
 8005b84:	440a      	add	r2, r1
 8005b86:	4291      	cmp	r1, r2
 8005b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b8c:	d100      	bne.n	8005b90 <memcpy+0xc>
 8005b8e:	4770      	bx	lr
 8005b90:	b510      	push	{r4, lr}
 8005b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b9a:	4291      	cmp	r1, r2
 8005b9c:	d1f9      	bne.n	8005b92 <memcpy+0xe>
 8005b9e:	bd10      	pop	{r4, pc}

08005ba0 <abort>:
 8005ba0:	b508      	push	{r3, lr}
 8005ba2:	2006      	movs	r0, #6
 8005ba4:	f000 fa34 	bl	8006010 <raise>
 8005ba8:	2001      	movs	r0, #1
 8005baa:	f7fb fbd1 	bl	8001350 <_exit>

08005bae <_realloc_r>:
 8005bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb2:	4680      	mov	r8, r0
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	460e      	mov	r6, r1
 8005bb8:	b921      	cbnz	r1, 8005bc4 <_realloc_r+0x16>
 8005bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	f7ff b832 	b.w	8004c28 <_malloc_r>
 8005bc4:	b92a      	cbnz	r2, 8005bd2 <_realloc_r+0x24>
 8005bc6:	f7ff fbcf 	bl	8005368 <_free_r>
 8005bca:	4625      	mov	r5, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd2:	f000 fa39 	bl	8006048 <_malloc_usable_size_r>
 8005bd6:	4284      	cmp	r4, r0
 8005bd8:	4607      	mov	r7, r0
 8005bda:	d802      	bhi.n	8005be2 <_realloc_r+0x34>
 8005bdc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005be0:	d812      	bhi.n	8005c08 <_realloc_r+0x5a>
 8005be2:	4621      	mov	r1, r4
 8005be4:	4640      	mov	r0, r8
 8005be6:	f7ff f81f 	bl	8004c28 <_malloc_r>
 8005bea:	4605      	mov	r5, r0
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d0ed      	beq.n	8005bcc <_realloc_r+0x1e>
 8005bf0:	42bc      	cmp	r4, r7
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	bf28      	it	cs
 8005bf8:	463a      	movcs	r2, r7
 8005bfa:	f7ff ffc3 	bl	8005b84 <memcpy>
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4640      	mov	r0, r8
 8005c02:	f7ff fbb1 	bl	8005368 <_free_r>
 8005c06:	e7e1      	b.n	8005bcc <_realloc_r+0x1e>
 8005c08:	4635      	mov	r5, r6
 8005c0a:	e7df      	b.n	8005bcc <_realloc_r+0x1e>

08005c0c <__sfputc_r>:
 8005c0c:	6893      	ldr	r3, [r2, #8]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	b410      	push	{r4}
 8005c14:	6093      	str	r3, [r2, #8]
 8005c16:	da08      	bge.n	8005c2a <__sfputc_r+0x1e>
 8005c18:	6994      	ldr	r4, [r2, #24]
 8005c1a:	42a3      	cmp	r3, r4
 8005c1c:	db01      	blt.n	8005c22 <__sfputc_r+0x16>
 8005c1e:	290a      	cmp	r1, #10
 8005c20:	d103      	bne.n	8005c2a <__sfputc_r+0x1e>
 8005c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c26:	f000 b935 	b.w	8005e94 <__swbuf_r>
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	1c58      	adds	r0, r3, #1
 8005c2e:	6010      	str	r0, [r2, #0]
 8005c30:	7019      	strb	r1, [r3, #0]
 8005c32:	4608      	mov	r0, r1
 8005c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <__sfputs_r>:
 8005c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3c:	4606      	mov	r6, r0
 8005c3e:	460f      	mov	r7, r1
 8005c40:	4614      	mov	r4, r2
 8005c42:	18d5      	adds	r5, r2, r3
 8005c44:	42ac      	cmp	r4, r5
 8005c46:	d101      	bne.n	8005c4c <__sfputs_r+0x12>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e007      	b.n	8005c5c <__sfputs_r+0x22>
 8005c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c50:	463a      	mov	r2, r7
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7ff ffda 	bl	8005c0c <__sfputc_r>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d1f3      	bne.n	8005c44 <__sfputs_r+0xa>
 8005c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c60 <_vfiprintf_r>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	460d      	mov	r5, r1
 8005c66:	b09d      	sub	sp, #116	; 0x74
 8005c68:	4614      	mov	r4, r2
 8005c6a:	4698      	mov	r8, r3
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	b118      	cbz	r0, 8005c78 <_vfiprintf_r+0x18>
 8005c70:	6a03      	ldr	r3, [r0, #32]
 8005c72:	b90b      	cbnz	r3, 8005c78 <_vfiprintf_r+0x18>
 8005c74:	f7ff f9e8 	bl	8005048 <__sinit>
 8005c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c7a:	07d9      	lsls	r1, r3, #31
 8005c7c:	d405      	bmi.n	8005c8a <_vfiprintf_r+0x2a>
 8005c7e:	89ab      	ldrh	r3, [r5, #12]
 8005c80:	059a      	lsls	r2, r3, #22
 8005c82:	d402      	bmi.n	8005c8a <_vfiprintf_r+0x2a>
 8005c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c86:	f7ff fb4e 	bl	8005326 <__retarget_lock_acquire_recursive>
 8005c8a:	89ab      	ldrh	r3, [r5, #12]
 8005c8c:	071b      	lsls	r3, r3, #28
 8005c8e:	d501      	bpl.n	8005c94 <_vfiprintf_r+0x34>
 8005c90:	692b      	ldr	r3, [r5, #16]
 8005c92:	b99b      	cbnz	r3, 8005cbc <_vfiprintf_r+0x5c>
 8005c94:	4629      	mov	r1, r5
 8005c96:	4630      	mov	r0, r6
 8005c98:	f000 f93a 	bl	8005f10 <__swsetup_r>
 8005c9c:	b170      	cbz	r0, 8005cbc <_vfiprintf_r+0x5c>
 8005c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ca0:	07dc      	lsls	r4, r3, #31
 8005ca2:	d504      	bpl.n	8005cae <_vfiprintf_r+0x4e>
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	b01d      	add	sp, #116	; 0x74
 8005caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cae:	89ab      	ldrh	r3, [r5, #12]
 8005cb0:	0598      	lsls	r0, r3, #22
 8005cb2:	d4f7      	bmi.n	8005ca4 <_vfiprintf_r+0x44>
 8005cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cb6:	f7ff fb37 	bl	8005328 <__retarget_lock_release_recursive>
 8005cba:	e7f3      	b.n	8005ca4 <_vfiprintf_r+0x44>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cca:	2330      	movs	r3, #48	; 0x30
 8005ccc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e80 <_vfiprintf_r+0x220>
 8005cd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cd4:	f04f 0901 	mov.w	r9, #1
 8005cd8:	4623      	mov	r3, r4
 8005cda:	469a      	mov	sl, r3
 8005cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_vfiprintf_r+0x86>
 8005ce2:	2a25      	cmp	r2, #37	; 0x25
 8005ce4:	d1f9      	bne.n	8005cda <_vfiprintf_r+0x7a>
 8005ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8005cea:	d00b      	beq.n	8005d04 <_vfiprintf_r+0xa4>
 8005cec:	465b      	mov	r3, fp
 8005cee:	4622      	mov	r2, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7ff ffa1 	bl	8005c3a <__sfputs_r>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f000 80a9 	beq.w	8005e50 <_vfiprintf_r+0x1f0>
 8005cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d00:	445a      	add	r2, fp
 8005d02:	9209      	str	r2, [sp, #36]	; 0x24
 8005d04:	f89a 3000 	ldrb.w	r3, [sl]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80a1 	beq.w	8005e50 <_vfiprintf_r+0x1f0>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f04f 32ff 	mov.w	r2, #4294967295
 8005d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d18:	f10a 0a01 	add.w	sl, sl, #1
 8005d1c:	9304      	str	r3, [sp, #16]
 8005d1e:	9307      	str	r3, [sp, #28]
 8005d20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d24:	931a      	str	r3, [sp, #104]	; 0x68
 8005d26:	4654      	mov	r4, sl
 8005d28:	2205      	movs	r2, #5
 8005d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2e:	4854      	ldr	r0, [pc, #336]	; (8005e80 <_vfiprintf_r+0x220>)
 8005d30:	f7fa fa66 	bl	8000200 <memchr>
 8005d34:	9a04      	ldr	r2, [sp, #16]
 8005d36:	b9d8      	cbnz	r0, 8005d70 <_vfiprintf_r+0x110>
 8005d38:	06d1      	lsls	r1, r2, #27
 8005d3a:	bf44      	itt	mi
 8005d3c:	2320      	movmi	r3, #32
 8005d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d42:	0713      	lsls	r3, r2, #28
 8005d44:	bf44      	itt	mi
 8005d46:	232b      	movmi	r3, #43	; 0x2b
 8005d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d50:	2b2a      	cmp	r3, #42	; 0x2a
 8005d52:	d015      	beq.n	8005d80 <_vfiprintf_r+0x120>
 8005d54:	9a07      	ldr	r2, [sp, #28]
 8005d56:	4654      	mov	r4, sl
 8005d58:	2000      	movs	r0, #0
 8005d5a:	f04f 0c0a 	mov.w	ip, #10
 8005d5e:	4621      	mov	r1, r4
 8005d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d64:	3b30      	subs	r3, #48	; 0x30
 8005d66:	2b09      	cmp	r3, #9
 8005d68:	d94d      	bls.n	8005e06 <_vfiprintf_r+0x1a6>
 8005d6a:	b1b0      	cbz	r0, 8005d9a <_vfiprintf_r+0x13a>
 8005d6c:	9207      	str	r2, [sp, #28]
 8005d6e:	e014      	b.n	8005d9a <_vfiprintf_r+0x13a>
 8005d70:	eba0 0308 	sub.w	r3, r0, r8
 8005d74:	fa09 f303 	lsl.w	r3, r9, r3
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	9304      	str	r3, [sp, #16]
 8005d7c:	46a2      	mov	sl, r4
 8005d7e:	e7d2      	b.n	8005d26 <_vfiprintf_r+0xc6>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	1d19      	adds	r1, r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	9103      	str	r1, [sp, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bfbb      	ittet	lt
 8005d8c:	425b      	neglt	r3, r3
 8005d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d92:	9307      	strge	r3, [sp, #28]
 8005d94:	9307      	strlt	r3, [sp, #28]
 8005d96:	bfb8      	it	lt
 8005d98:	9204      	strlt	r2, [sp, #16]
 8005d9a:	7823      	ldrb	r3, [r4, #0]
 8005d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d9e:	d10c      	bne.n	8005dba <_vfiprintf_r+0x15a>
 8005da0:	7863      	ldrb	r3, [r4, #1]
 8005da2:	2b2a      	cmp	r3, #42	; 0x2a
 8005da4:	d134      	bne.n	8005e10 <_vfiprintf_r+0x1b0>
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	9203      	str	r2, [sp, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bfb8      	it	lt
 8005db2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005db6:	3402      	adds	r4, #2
 8005db8:	9305      	str	r3, [sp, #20]
 8005dba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e90 <_vfiprintf_r+0x230>
 8005dbe:	7821      	ldrb	r1, [r4, #0]
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	f7fa fa1c 	bl	8000200 <memchr>
 8005dc8:	b138      	cbz	r0, 8005dda <_vfiprintf_r+0x17a>
 8005dca:	9b04      	ldr	r3, [sp, #16]
 8005dcc:	eba0 000a 	sub.w	r0, r0, sl
 8005dd0:	2240      	movs	r2, #64	; 0x40
 8005dd2:	4082      	lsls	r2, r0
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	3401      	adds	r4, #1
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dde:	4829      	ldr	r0, [pc, #164]	; (8005e84 <_vfiprintf_r+0x224>)
 8005de0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005de4:	2206      	movs	r2, #6
 8005de6:	f7fa fa0b 	bl	8000200 <memchr>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d03f      	beq.n	8005e6e <_vfiprintf_r+0x20e>
 8005dee:	4b26      	ldr	r3, [pc, #152]	; (8005e88 <_vfiprintf_r+0x228>)
 8005df0:	bb1b      	cbnz	r3, 8005e3a <_vfiprintf_r+0x1da>
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	3307      	adds	r3, #7
 8005df6:	f023 0307 	bic.w	r3, r3, #7
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	9303      	str	r3, [sp, #12]
 8005dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e00:	443b      	add	r3, r7
 8005e02:	9309      	str	r3, [sp, #36]	; 0x24
 8005e04:	e768      	b.n	8005cd8 <_vfiprintf_r+0x78>
 8005e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	e7a6      	b.n	8005d5e <_vfiprintf_r+0xfe>
 8005e10:	2300      	movs	r3, #0
 8005e12:	3401      	adds	r4, #1
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	4619      	mov	r1, r3
 8005e18:	f04f 0c0a 	mov.w	ip, #10
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e22:	3a30      	subs	r2, #48	; 0x30
 8005e24:	2a09      	cmp	r2, #9
 8005e26:	d903      	bls.n	8005e30 <_vfiprintf_r+0x1d0>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0c6      	beq.n	8005dba <_vfiprintf_r+0x15a>
 8005e2c:	9105      	str	r1, [sp, #20]
 8005e2e:	e7c4      	b.n	8005dba <_vfiprintf_r+0x15a>
 8005e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e34:	4604      	mov	r4, r0
 8005e36:	2301      	movs	r3, #1
 8005e38:	e7f0      	b.n	8005e1c <_vfiprintf_r+0x1bc>
 8005e3a:	ab03      	add	r3, sp, #12
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	462a      	mov	r2, r5
 8005e40:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <_vfiprintf_r+0x22c>)
 8005e42:	a904      	add	r1, sp, #16
 8005e44:	4630      	mov	r0, r6
 8005e46:	f3af 8000 	nop.w
 8005e4a:	4607      	mov	r7, r0
 8005e4c:	1c78      	adds	r0, r7, #1
 8005e4e:	d1d6      	bne.n	8005dfe <_vfiprintf_r+0x19e>
 8005e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d405      	bmi.n	8005e62 <_vfiprintf_r+0x202>
 8005e56:	89ab      	ldrh	r3, [r5, #12]
 8005e58:	059a      	lsls	r2, r3, #22
 8005e5a:	d402      	bmi.n	8005e62 <_vfiprintf_r+0x202>
 8005e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e5e:	f7ff fa63 	bl	8005328 <__retarget_lock_release_recursive>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	065b      	lsls	r3, r3, #25
 8005e66:	f53f af1d 	bmi.w	8005ca4 <_vfiprintf_r+0x44>
 8005e6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e6c:	e71c      	b.n	8005ca8 <_vfiprintf_r+0x48>
 8005e6e:	ab03      	add	r3, sp, #12
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	462a      	mov	r2, r5
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <_vfiprintf_r+0x22c>)
 8005e76:	a904      	add	r1, sp, #16
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff fc87 	bl	800578c <_printf_i>
 8005e7e:	e7e4      	b.n	8005e4a <_vfiprintf_r+0x1ea>
 8005e80:	08006570 	.word	0x08006570
 8005e84:	0800657a 	.word	0x0800657a
 8005e88:	00000000 	.word	0x00000000
 8005e8c:	08005c3b 	.word	0x08005c3b
 8005e90:	08006576 	.word	0x08006576

08005e94 <__swbuf_r>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	460e      	mov	r6, r1
 8005e98:	4614      	mov	r4, r2
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	b118      	cbz	r0, 8005ea6 <__swbuf_r+0x12>
 8005e9e:	6a03      	ldr	r3, [r0, #32]
 8005ea0:	b90b      	cbnz	r3, 8005ea6 <__swbuf_r+0x12>
 8005ea2:	f7ff f8d1 	bl	8005048 <__sinit>
 8005ea6:	69a3      	ldr	r3, [r4, #24]
 8005ea8:	60a3      	str	r3, [r4, #8]
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	071a      	lsls	r2, r3, #28
 8005eae:	d525      	bpl.n	8005efc <__swbuf_r+0x68>
 8005eb0:	6923      	ldr	r3, [r4, #16]
 8005eb2:	b31b      	cbz	r3, 8005efc <__swbuf_r+0x68>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	6922      	ldr	r2, [r4, #16]
 8005eb8:	1a98      	subs	r0, r3, r2
 8005eba:	6963      	ldr	r3, [r4, #20]
 8005ebc:	b2f6      	uxtb	r6, r6
 8005ebe:	4283      	cmp	r3, r0
 8005ec0:	4637      	mov	r7, r6
 8005ec2:	dc04      	bgt.n	8005ece <__swbuf_r+0x3a>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f7ff fe08 	bl	8005adc <_fflush_r>
 8005ecc:	b9e0      	cbnz	r0, 8005f08 <__swbuf_r+0x74>
 8005ece:	68a3      	ldr	r3, [r4, #8]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	60a3      	str	r3, [r4, #8]
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	6022      	str	r2, [r4, #0]
 8005eda:	701e      	strb	r6, [r3, #0]
 8005edc:	6962      	ldr	r2, [r4, #20]
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d004      	beq.n	8005eee <__swbuf_r+0x5a>
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	07db      	lsls	r3, r3, #31
 8005ee8:	d506      	bpl.n	8005ef8 <__swbuf_r+0x64>
 8005eea:	2e0a      	cmp	r6, #10
 8005eec:	d104      	bne.n	8005ef8 <__swbuf_r+0x64>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f7ff fdf3 	bl	8005adc <_fflush_r>
 8005ef6:	b938      	cbnz	r0, 8005f08 <__swbuf_r+0x74>
 8005ef8:	4638      	mov	r0, r7
 8005efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005efc:	4621      	mov	r1, r4
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 f806 	bl	8005f10 <__swsetup_r>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d0d5      	beq.n	8005eb4 <__swbuf_r+0x20>
 8005f08:	f04f 37ff 	mov.w	r7, #4294967295
 8005f0c:	e7f4      	b.n	8005ef8 <__swbuf_r+0x64>
	...

08005f10 <__swsetup_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4b2a      	ldr	r3, [pc, #168]	; (8005fbc <__swsetup_r+0xac>)
 8005f14:	4605      	mov	r5, r0
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	460c      	mov	r4, r1
 8005f1a:	b118      	cbz	r0, 8005f24 <__swsetup_r+0x14>
 8005f1c:	6a03      	ldr	r3, [r0, #32]
 8005f1e:	b90b      	cbnz	r3, 8005f24 <__swsetup_r+0x14>
 8005f20:	f7ff f892 	bl	8005048 <__sinit>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f2a:	0718      	lsls	r0, r3, #28
 8005f2c:	d422      	bmi.n	8005f74 <__swsetup_r+0x64>
 8005f2e:	06d9      	lsls	r1, r3, #27
 8005f30:	d407      	bmi.n	8005f42 <__swsetup_r+0x32>
 8005f32:	2309      	movs	r3, #9
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	e034      	b.n	8005fac <__swsetup_r+0x9c>
 8005f42:	0758      	lsls	r0, r3, #29
 8005f44:	d512      	bpl.n	8005f6c <__swsetup_r+0x5c>
 8005f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f48:	b141      	cbz	r1, 8005f5c <__swsetup_r+0x4c>
 8005f4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f4e:	4299      	cmp	r1, r3
 8005f50:	d002      	beq.n	8005f58 <__swsetup_r+0x48>
 8005f52:	4628      	mov	r0, r5
 8005f54:	f7ff fa08 	bl	8005368 <_free_r>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6363      	str	r3, [r4, #52]	; 0x34
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	2300      	movs	r3, #0
 8005f66:	6063      	str	r3, [r4, #4]
 8005f68:	6923      	ldr	r3, [r4, #16]
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	f043 0308 	orr.w	r3, r3, #8
 8005f72:	81a3      	strh	r3, [r4, #12]
 8005f74:	6923      	ldr	r3, [r4, #16]
 8005f76:	b94b      	cbnz	r3, 8005f8c <__swsetup_r+0x7c>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f82:	d003      	beq.n	8005f8c <__swsetup_r+0x7c>
 8005f84:	4621      	mov	r1, r4
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 f88c 	bl	80060a4 <__smakebuf_r>
 8005f8c:	89a0      	ldrh	r0, [r4, #12]
 8005f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f92:	f010 0301 	ands.w	r3, r0, #1
 8005f96:	d00a      	beq.n	8005fae <__swsetup_r+0x9e>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60a3      	str	r3, [r4, #8]
 8005f9c:	6963      	ldr	r3, [r4, #20]
 8005f9e:	425b      	negs	r3, r3
 8005fa0:	61a3      	str	r3, [r4, #24]
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	b943      	cbnz	r3, 8005fb8 <__swsetup_r+0xa8>
 8005fa6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005faa:	d1c4      	bne.n	8005f36 <__swsetup_r+0x26>
 8005fac:	bd38      	pop	{r3, r4, r5, pc}
 8005fae:	0781      	lsls	r1, r0, #30
 8005fb0:	bf58      	it	pl
 8005fb2:	6963      	ldrpl	r3, [r4, #20]
 8005fb4:	60a3      	str	r3, [r4, #8]
 8005fb6:	e7f4      	b.n	8005fa2 <__swsetup_r+0x92>
 8005fb8:	2000      	movs	r0, #0
 8005fba:	e7f7      	b.n	8005fac <__swsetup_r+0x9c>
 8005fbc:	20000064 	.word	0x20000064

08005fc0 <_raise_r>:
 8005fc0:	291f      	cmp	r1, #31
 8005fc2:	b538      	push	{r3, r4, r5, lr}
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	d904      	bls.n	8005fd4 <_raise_r+0x14>
 8005fca:	2316      	movs	r3, #22
 8005fcc:	6003      	str	r3, [r0, #0]
 8005fce:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005fd6:	b112      	cbz	r2, 8005fde <_raise_r+0x1e>
 8005fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fdc:	b94b      	cbnz	r3, 8005ff2 <_raise_r+0x32>
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 f830 	bl	8006044 <_getpid_r>
 8005fe4:	462a      	mov	r2, r5
 8005fe6:	4601      	mov	r1, r0
 8005fe8:	4620      	mov	r0, r4
 8005fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fee:	f000 b817 	b.w	8006020 <_kill_r>
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d00a      	beq.n	800600c <_raise_r+0x4c>
 8005ff6:	1c59      	adds	r1, r3, #1
 8005ff8:	d103      	bne.n	8006002 <_raise_r+0x42>
 8005ffa:	2316      	movs	r3, #22
 8005ffc:	6003      	str	r3, [r0, #0]
 8005ffe:	2001      	movs	r0, #1
 8006000:	e7e7      	b.n	8005fd2 <_raise_r+0x12>
 8006002:	2400      	movs	r4, #0
 8006004:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006008:	4628      	mov	r0, r5
 800600a:	4798      	blx	r3
 800600c:	2000      	movs	r0, #0
 800600e:	e7e0      	b.n	8005fd2 <_raise_r+0x12>

08006010 <raise>:
 8006010:	4b02      	ldr	r3, [pc, #8]	; (800601c <raise+0xc>)
 8006012:	4601      	mov	r1, r0
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	f7ff bfd3 	b.w	8005fc0 <_raise_r>
 800601a:	bf00      	nop
 800601c:	20000064 	.word	0x20000064

08006020 <_kill_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d07      	ldr	r5, [pc, #28]	; (8006040 <_kill_r+0x20>)
 8006024:	2300      	movs	r3, #0
 8006026:	4604      	mov	r4, r0
 8006028:	4608      	mov	r0, r1
 800602a:	4611      	mov	r1, r2
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	f7fb f97f 	bl	8001330 <_kill>
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	d102      	bne.n	800603c <_kill_r+0x1c>
 8006036:	682b      	ldr	r3, [r5, #0]
 8006038:	b103      	cbz	r3, 800603c <_kill_r+0x1c>
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	bd38      	pop	{r3, r4, r5, pc}
 800603e:	bf00      	nop
 8006040:	20000e6c 	.word	0x20000e6c

08006044 <_getpid_r>:
 8006044:	f7fb b96c 	b.w	8001320 <_getpid>

08006048 <_malloc_usable_size_r>:
 8006048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800604c:	1f18      	subs	r0, r3, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	bfbc      	itt	lt
 8006052:	580b      	ldrlt	r3, [r1, r0]
 8006054:	18c0      	addlt	r0, r0, r3
 8006056:	4770      	bx	lr

08006058 <__swhatbuf_r>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	460c      	mov	r4, r1
 800605c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006060:	2900      	cmp	r1, #0
 8006062:	b096      	sub	sp, #88	; 0x58
 8006064:	4615      	mov	r5, r2
 8006066:	461e      	mov	r6, r3
 8006068:	da0d      	bge.n	8006086 <__swhatbuf_r+0x2e>
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006070:	f04f 0100 	mov.w	r1, #0
 8006074:	bf0c      	ite	eq
 8006076:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800607a:	2340      	movne	r3, #64	; 0x40
 800607c:	2000      	movs	r0, #0
 800607e:	6031      	str	r1, [r6, #0]
 8006080:	602b      	str	r3, [r5, #0]
 8006082:	b016      	add	sp, #88	; 0x58
 8006084:	bd70      	pop	{r4, r5, r6, pc}
 8006086:	466a      	mov	r2, sp
 8006088:	f000 f848 	bl	800611c <_fstat_r>
 800608c:	2800      	cmp	r0, #0
 800608e:	dbec      	blt.n	800606a <__swhatbuf_r+0x12>
 8006090:	9901      	ldr	r1, [sp, #4]
 8006092:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006096:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800609a:	4259      	negs	r1, r3
 800609c:	4159      	adcs	r1, r3
 800609e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060a2:	e7eb      	b.n	800607c <__swhatbuf_r+0x24>

080060a4 <__smakebuf_r>:
 80060a4:	898b      	ldrh	r3, [r1, #12]
 80060a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060a8:	079d      	lsls	r5, r3, #30
 80060aa:	4606      	mov	r6, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	d507      	bpl.n	80060c0 <__smakebuf_r+0x1c>
 80060b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	6123      	str	r3, [r4, #16]
 80060b8:	2301      	movs	r3, #1
 80060ba:	6163      	str	r3, [r4, #20]
 80060bc:	b002      	add	sp, #8
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	ab01      	add	r3, sp, #4
 80060c2:	466a      	mov	r2, sp
 80060c4:	f7ff ffc8 	bl	8006058 <__swhatbuf_r>
 80060c8:	9900      	ldr	r1, [sp, #0]
 80060ca:	4605      	mov	r5, r0
 80060cc:	4630      	mov	r0, r6
 80060ce:	f7fe fdab 	bl	8004c28 <_malloc_r>
 80060d2:	b948      	cbnz	r0, 80060e8 <__smakebuf_r+0x44>
 80060d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d8:	059a      	lsls	r2, r3, #22
 80060da:	d4ef      	bmi.n	80060bc <__smakebuf_r+0x18>
 80060dc:	f023 0303 	bic.w	r3, r3, #3
 80060e0:	f043 0302 	orr.w	r3, r3, #2
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	e7e3      	b.n	80060b0 <__smakebuf_r+0xc>
 80060e8:	89a3      	ldrh	r3, [r4, #12]
 80060ea:	6020      	str	r0, [r4, #0]
 80060ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f0:	81a3      	strh	r3, [r4, #12]
 80060f2:	9b00      	ldr	r3, [sp, #0]
 80060f4:	6163      	str	r3, [r4, #20]
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	6120      	str	r0, [r4, #16]
 80060fa:	b15b      	cbz	r3, 8006114 <__smakebuf_r+0x70>
 80060fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006100:	4630      	mov	r0, r6
 8006102:	f000 f81d 	bl	8006140 <_isatty_r>
 8006106:	b128      	cbz	r0, 8006114 <__smakebuf_r+0x70>
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	81a3      	strh	r3, [r4, #12]
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	431d      	orrs	r5, r3
 8006118:	81a5      	strh	r5, [r4, #12]
 800611a:	e7cf      	b.n	80060bc <__smakebuf_r+0x18>

0800611c <_fstat_r>:
 800611c:	b538      	push	{r3, r4, r5, lr}
 800611e:	4d07      	ldr	r5, [pc, #28]	; (800613c <_fstat_r+0x20>)
 8006120:	2300      	movs	r3, #0
 8006122:	4604      	mov	r4, r0
 8006124:	4608      	mov	r0, r1
 8006126:	4611      	mov	r1, r2
 8006128:	602b      	str	r3, [r5, #0]
 800612a:	f7fb f960 	bl	80013ee <_fstat>
 800612e:	1c43      	adds	r3, r0, #1
 8006130:	d102      	bne.n	8006138 <_fstat_r+0x1c>
 8006132:	682b      	ldr	r3, [r5, #0]
 8006134:	b103      	cbz	r3, 8006138 <_fstat_r+0x1c>
 8006136:	6023      	str	r3, [r4, #0]
 8006138:	bd38      	pop	{r3, r4, r5, pc}
 800613a:	bf00      	nop
 800613c:	20000e6c 	.word	0x20000e6c

08006140 <_isatty_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4d06      	ldr	r5, [pc, #24]	; (800615c <_isatty_r+0x1c>)
 8006144:	2300      	movs	r3, #0
 8006146:	4604      	mov	r4, r0
 8006148:	4608      	mov	r0, r1
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	f7fb f95f 	bl	800140e <_isatty>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d102      	bne.n	800615a <_isatty_r+0x1a>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	b103      	cbz	r3, 800615a <_isatty_r+0x1a>
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	20000e6c 	.word	0x20000e6c

08006160 <_gettimeofday>:
 8006160:	4b02      	ldr	r3, [pc, #8]	; (800616c <_gettimeofday+0xc>)
 8006162:	2258      	movs	r2, #88	; 0x58
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	f04f 30ff 	mov.w	r0, #4294967295
 800616a:	4770      	bx	lr
 800616c:	20000e6c 	.word	0x20000e6c

08006170 <_init>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr

0800617c <_fini>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	bf00      	nop
 8006180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006182:	bc08      	pop	{r3}
 8006184:	469e      	mov	lr, r3
 8006186:	4770      	bx	lr
